/* This code was generated by the ParTool Vnus Backend. */

#include <stdlib.h>
#include <stdio.h>
#include <stream.h>
#include <String.h>
#include <Complex.h>
#include "../lib/vnusstio.h"
#include "../runtime/expr.h"
#include "../runtime/shape.h"
#include "../runtime/view.h"
#include "../runtime/vnusrtl.h"

VnusNatural numberOfProcessors = 30;
ShapeOfVnusNatural processorArray( NULL, 2, 6, 5 );

VnusReal _x;
VnusInteger _i;
VnusInteger _desti;
VnusNatural _n;
VnusComplex _c;
VnusComplex _c2;
VnusNatural _tpi;
VnusNatural _tpo;
VnusNatural _tpio;
VnusBoolean _b;
VnusBoolean _true;
VnusBoolean _false;
VnusString _s;
VnusNatural _f;
ShapeOfVnusInteger _shp( new Distribution( 2, new BlockCyclic(5), new Collapsed() ), 2, 5, 8 );
ShapeOfVnusInteger A( new Distribution( 1, new BlockCyclic(5) ), 1, 20 );
ShapeOfVnusInteger B( new Distribution( 1, new Cyclic() ), 1, 20 );
ViewOfVnusInteger _aview( 2 );
ViewOfVnusInteger _V( 1 );
ViewOfVnusInteger _W( 1 );
VnusInteger _inc( VnusInteger _inc_i );
VnusInteger _dec( VnusInteger _dec_i );
void _Empty( void );
void _Print1dView( VnusNatural _Print1dView_f, ViewOfVnusInteger _Print1dView_V, VnusNatural _Print1dView_p );
void _Print1dShape( VnusNatural _Print1dShape_f, ShapeOfVnusInteger _Print1dShape_A, VnusNatural _Print1dShape_p );
void _testcmpinteger( VnusNatural _testcmpinteger_f, VnusInteger _testcmpinteger_a, VnusInteger _testcmpinteger_b, VnusNatural _testcmpinteger_p );
void _testscopes( VnusNatural _testscopes_f, VnusNatural _testscopes_n, VnusNatural _testscopes_p );
// extern VnusNatural vnusstio_open( VnusString vnusstio_open_fnm, VnusString vnusstio_open_mode, VnusNatural vnusstio_open_p );
// extern VnusNatural numberOfProcessors;
// extern void vnusstio_close( VnusNatural vnusstio_close_hnd, VnusNatural vnusstio_close_p );
// extern void vnusstio_writer( VnusNatural vnusstio_writer_hnd, VnusReal vnusstio_writer_r, VnusNatural vnusstio_writer_p );
// extern void vnusstio_writec( VnusNatural vnusstio_writec_hnd, VnusComplex vnusstio_writec_c, VnusNatural vnusstio_writec_p );
// extern void vnusstio_writeb( VnusNatural vnusstio_writeb_hnd, VnusBoolean vnusstio_writeb_b, VnusNatural vnusstio_writeb_p );
// extern void vnusstio_writei( VnusNatural vnusstio_writei_hnd, VnusInteger vnusstio_writei_i, VnusNatural vnusstio_writei_p );
// extern void vnusstio_writen( VnusNatural vnusstio_writen_hnd, VnusNatural vnusstio_writen_n, VnusNatural vnusstio_writen_p );
// extern void vnusstio_writes( VnusNatural vnusstio_writes_hnd, VnusString vnusstio_writes_s, VnusNatural vnusstio_writes_p );

void _testscopes( VnusNatural _testscopes_f, VnusNatural _testscopes_n, VnusNatural _testscopes_p )
{
    /* Scope: renamed_testscopes */

    vnusstio_writen( _testscopes_f, _testscopes_n, _testscopes_p );
    vnusstio_writes( _testscopes_f, " ", _testscopes_p );
    {
	/* Scope: subscope */
	VnusNatural _testscopes_n_sub;

	_testscopes_n_sub = (42+1);
	vnusstio_writen( _testscopes_f, _testscopes_n, _testscopes_p );
	vnusstio_writes( _testscopes_f, " ", _testscopes_p );
	vnusstio_writen( _testscopes_f, _testscopes_n_sub, _testscopes_p );
	vnusstio_writes( _testscopes_f, "\n", _testscopes_p );
    }
}

void _Empty( void )
{
    /* Scope: _Empty */
}

void _Print1dView( VnusNatural _Print1dView_f, ViewOfVnusInteger _Print1dView_V, VnusNatural _Print1dView_p )
{
    /* Scope: _Print1dView */
    const VnusNatural _Print1dView_n =  _Print1dView_V.Size( 0 );

    {
	const unsigned int bound0 = _Print1dView_n;

	for( unsigned int _Print1dView_i=0; _Print1dView_i<bound0; _Print1dView_i++ )
	{
	    vnusstio_writei( _Print1dView_f, _Print1dView_V( _Print1dView_i ), _Print1dView_p );
	    vnusstio_writes( _Print1dView_f, " ", _Print1dView_p );
	}
    }
    vnusstio_writes( _Print1dView_f, "\n", _Print1dView_p );
}

void _Print1dShape( VnusNatural _Print1dShape_f, ShapeOfVnusInteger _Print1dShape_A, VnusNatural _Print1dShape_p )
{
    /* Scope: _Print1dShape */
    const VnusNatural _Print1dShape_n =  _Print1dShape_A.Size( 0 );

    {
	const unsigned int bound1 = _Print1dShape_n;

	for( unsigned int _Print1dShape_i=0; _Print1dShape_i<bound1; _Print1dShape_i++ )
	{
	    vnusstio_writei( _Print1dShape_f, _Print1dShape_A( _Print1dShape_i ), _Print1dShape_p );
	    vnusstio_writes( _Print1dShape_f, " ", _Print1dShape_p );
	}
    }
    vnusstio_writes( _Print1dShape_f, "\n", _Print1dShape_p );
}

VnusInteger _inc( VnusInteger _inc_i )
{
    /* Scope: _inc */
    VnusInteger _inc_res;

    _inc_res = (_inc_i+1);
    return _inc_res;
}

VnusInteger _dec( VnusInteger _dec_i )
{
    /* Scope: _dec */
    VnusInteger _dec_res;

    _dec_res = (_dec_i-1);
    return _dec_res;
}

void _testcmpinteger( VnusNatural _testcmpinteger_f, VnusInteger _testcmpinteger_a, VnusInteger _testcmpinteger_b, VnusNatural _testcmpinteger_p )
{
    /* Scope: _testcmpinteger */

    vnusstio_writei( _testcmpinteger_f, _testcmpinteger_a, _testcmpinteger_p );
    vnusstio_writes( _testcmpinteger_f, "=", _testcmpinteger_p );
    vnusstio_writei( _testcmpinteger_f, _testcmpinteger_b, _testcmpinteger_p );
    if( (_testcmpinteger_a==_testcmpinteger_b) )
    {
	vnusstio_writes( _testcmpinteger_f, " yes\n", _testcmpinteger_p );
    }
    else
    {
	vnusstio_writes( _testcmpinteger_f, " no\n", _testcmpinteger_p );
    }
    vnusstio_writei( _testcmpinteger_f, _testcmpinteger_a, _testcmpinteger_p );
    vnusstio_writes( _testcmpinteger_f, "<>", _testcmpinteger_p );
    vnusstio_writei( _testcmpinteger_f, _testcmpinteger_b, _testcmpinteger_p );
    if( (_testcmpinteger_a!=_testcmpinteger_b) )
    {
	vnusstio_writes( _testcmpinteger_f, " yes\n", _testcmpinteger_p );
    }
    else
    {
	vnusstio_writes( _testcmpinteger_f, " no\n", _testcmpinteger_p );
    }
    vnusstio_writei( _testcmpinteger_f, _testcmpinteger_a, _testcmpinteger_p );
    vnusstio_writes( _testcmpinteger_f, "<", _testcmpinteger_p );
    vnusstio_writei( _testcmpinteger_f, _testcmpinteger_b, _testcmpinteger_p );
    if( (_testcmpinteger_a<_testcmpinteger_b) )
    {
	vnusstio_writes( _testcmpinteger_f, " yes\n", _testcmpinteger_p );
    }
    else
    {
	vnusstio_writes( _testcmpinteger_f, " no\n", _testcmpinteger_p );
    }
    vnusstio_writei( _testcmpinteger_f, _testcmpinteger_a, _testcmpinteger_p );
    vnusstio_writes( _testcmpinteger_f, "<=", _testcmpinteger_p );
    vnusstio_writei( _testcmpinteger_f, _testcmpinteger_b, _testcmpinteger_p );
    if( (_testcmpinteger_a<=_testcmpinteger_b) )
    {
	vnusstio_writes( _testcmpinteger_f, " yes\n", _testcmpinteger_p );
    }
    else
    {
	vnusstio_writes( _testcmpinteger_f, " no\n", _testcmpinteger_p );
    }
    vnusstio_writei( _testcmpinteger_f, _testcmpinteger_a, _testcmpinteger_p );
    vnusstio_writes( _testcmpinteger_f, ">", _testcmpinteger_p );
    vnusstio_writei( _testcmpinteger_f, _testcmpinteger_b, _testcmpinteger_p );
    if( (_testcmpinteger_a>_testcmpinteger_b) )
    {
	vnusstio_writes( _testcmpinteger_f, " yes\n", _testcmpinteger_p );
    }
    else
    {
	vnusstio_writes( _testcmpinteger_f, " no\n", _testcmpinteger_p );
    }
    vnusstio_writei( _testcmpinteger_f, _testcmpinteger_a, _testcmpinteger_p );
    vnusstio_writes( _testcmpinteger_f, ">=", _testcmpinteger_p );
    vnusstio_writei( _testcmpinteger_f, _testcmpinteger_b, _testcmpinteger_p );
    if( (_testcmpinteger_a>=_testcmpinteger_b) )
    {
	vnusstio_writes( _testcmpinteger_f, " yes\n", _testcmpinteger_p );
    }
    else
    {
	vnusstio_writes( _testcmpinteger_f, " no\n", _testcmpinteger_p );
    }
}

static void vnus_service_a_thread( VnusNatural p )
{
    vnus_barrier();
    if( (p==0) )
    {
	_f = vnusstio_open( "runout", "w", p );
    }
    vnus_barrier();
    vnusstio_writes( _f, "Hello world\n", p );
    vnus_barrier();
    vnusstio_printf( _f, p, "Hello world\n" );
    vnus_barrier();
    if( (p==0) )
    {
	_false = FALSE;
	_true = (1==1);
	_b = _false;
	_b = (!_b);
	_b = (_false||_b);
	_b = (TRUE&&_b);
	_i = 2;
	_i = (50-_i);
	_i = (5+_i);
	_i = (5*_i);
	_i = (_i/12);
	_i = (-_i);
	_i = (_i);
	_i = _inc( _inc( _i ) );
	_i = _dec( _i );
	_n = 7;
	_n = (_n);
	_n = (7+_n);
	_n = (_n-5);
	_n = (_n*12);
	_n = (_n/13);
	_x = (2.1);
	_x = (-_x);
	_x = (_x);
	_x = ((0.7)+_x);
	_x = (_x-(5e2));
	_x = (_x*(0.12));
	_x = (_x/(0.13));
	_s = "test string";
	_c = Complex( 2, 3 );
	_c2 = Complex( 5, 12 );
	_c = (-_c);
    }
    vnus_barrier();
    vnusstio_writes( _f, "c: ", p );
    vnusstio_writec( _f, _c, p );
    vnusstio_writes( _f, "\n", p );
    vnus_barrier();
    if( (p==0) )
    {
	_c = (_c);
    }
    vnus_barrier();
    vnusstio_writes( _f, "c: ", p );
    vnusstio_writec( _f, _c, p );
    vnusstio_writes( _f, "\n", p );
    vnus_barrier();
    if( (p==0) )
    {
	_c = (_c+_c2);
    }
    vnus_barrier();
    vnusstio_writes( _f, "c: ", p );
    vnusstio_writec( _f, _c, p );
    vnusstio_writes( _f, "\n", p );
    vnus_barrier();
    if( (p==0) )
    {
	_c = (_c*_c2);
    }
    vnus_barrier();
    vnusstio_writes( _f, "c: ", p );
    vnusstio_writec( _f, _c, p );
    vnusstio_writes( _f, "\n", p );
    vnus_barrier();
    if( (p==0) )
    {
	_c = (_c-_c2);
    }
    vnus_barrier();
    vnusstio_writes( _f, "c: ", p );
    vnusstio_writec( _f, _c, p );
    vnusstio_writes( _f, "\n", p );
    vnus_barrier();
    if( (p==0) )
    {
	_c = (_c/_c2);
    }
    vnus_barrier();
    vnusstio_writes( _f, "c: ", p );
    vnusstio_writec( _f, _c, p );
    vnusstio_writes( _f, "\n", p );
    vnusstio_writes( _f, "n: ", p );
    vnusstio_writen( _f, _n, p );
    vnusstio_writes( _f, "\n", p );
    vnusstio_writes( _f, "i: ", p );
    vnusstio_writei( _f, _i, p );
    vnusstio_writes( _f, "\n", p );
    vnusstio_writes( _f, "b: ", p );
    vnusstio_writeb( _f, _b, p );
    vnusstio_writes( _f, "\n", p );
    vnusstio_writes( _f, "x: ", p );
    vnusstio_writer( _f, _x, p );
    vnusstio_writes( _f, "\n", p );
    vnusstio_writes( _f, "s: ", p );
    vnusstio_writes( _f, _s, p );
    vnusstio_writes( _f, "\n", p );
    vnusstio_writes( _f, "c: ", p );
    vnusstio_writec( _f, _c, p );
    vnusstio_writes( _f, "\n", p );
    vnusstio_writes( _f, "numberOfProcessors: ", p );
    vnusstio_writen( _f, numberOfProcessors, p );
    vnusstio_writes( _f, "\n", p );
    vnusstio_writes( _f, "\n", p );
    vnusstio_printf( _f, p, "n: %u\n", _n );
    vnusstio_printf( _f, p, "i: %ld\n", _i );
    vnusstio_printf( _f, p, "b: %s\n", ((_b)?"True":"False") );
    vnusstio_printf( _f, p, "x: %f\n", _x );
    vnusstio_printf( _f, p, "s: %s\n", (const char *) (_s) );
    vnus_barrier();
    _Empty(  );
    if( (p==0) )
    {
	_i = 14;
    }
    vnus_barrier();
    while( (_i>0) )
    {
	vnusstio_writes( _f, "i = ", p );
	vnusstio_writei( _f, _i, p );
	vnusstio_writes( _f, "\n", p );
	vnus_barrier();
	if( (p==0) )
	{
	    _i = (_i-1);
	}
	vnus_barrier();
    }
    {
	const unsigned int bound2 = 3;
	const unsigned int bound3 = 4;

	for( unsigned int _card_i=0; _card_i<bound2; _card_i++ )
	{
	    for( unsigned int _card_j=0; _card_j<bound3; _card_j++ )
	    {
		vnusstio_writes( _f, "i = ", p );
		vnusstio_writei( _f, _card_i, p );
		vnusstio_writes( _f, ", ", p );
		vnusstio_writes( _f, "j = ", p );
		vnusstio_writei( _f, _card_j, p );
		vnusstio_writes( _f, "\n", p );
	    }
	}
    }
    _testcmpinteger( _f, 1, 2, p );
    _testcmpinteger( _f, 1, 1, p );
    _testcmpinteger( _f, 2, 1, p );
    _testcmpinteger( _f, 223, 1, p );
    vnus_barrier();
    {
	const unsigned int bound4 = 5;
	const unsigned int bound5 = 8;

	for( unsigned int _card_i=0; _card_i<bound4; _card_i++ )
	{
	    for( unsigned int _card_j=0; _card_j<bound5; _card_j++ )
	    {
		if( _shp.IsOwner( p, _card_i, _card_j ) )
		{
		    _shp( _card_i, _card_j ) = (_card_i+_card_j);
		}
	    }
	}
    }
    vnus_barrier();
    {
	const unsigned int bound6 = 5;
	const unsigned int bound7 = 8;

	for( unsigned int _card_i=0; _card_i<bound6; _card_i++ )
	{
	    for( unsigned int _card_j=0; _card_j<bound7; _card_j++ )
	    {
		vnusstio_writes( _f, "shp[", p );
		vnusstio_writei( _f, _card_i, p );
		vnusstio_writes( _f, ",", p );
		vnusstio_writei( _f, _card_j, p );
		vnusstio_writes( _f, "] = ", p );
		vnusstio_writei( _f, _shp( _card_i, _card_j ), p );
		vnusstio_writes( _f, "\n", p );
	    }
	}
    }
    {
	ExprVec __backend_ip;
	natVec __backend_dp;

	__backend_ip.resize(2);
	__backend_ip[0] =  new VarExpr( 1 );
	__backend_ip[1] =  new VarExpr( 0 );
	__backend_dp.resize(2);
	__backend_dp[0] =  8;
	__backend_dp[1] =  5;
	_aview.AssignView( &(_shp), __backend_ip, __backend_dp );
    }
    {
	const unsigned int bound8 = 8;
	const unsigned int bound9 = 5;

	for( unsigned int _card_i=0; _card_i<bound8; _card_i++ )
	{
	    for( unsigned int _card_j=0; _card_j<bound9; _card_j++ )
	    {
		vnusstio_writes( _f, "aview[", p );
		vnusstio_writei( _f, _card_i, p );
		vnusstio_writes( _f, ",", p );
		vnusstio_writei( _f, _card_j, p );
		vnusstio_writes( _f, "] = ", p );
		vnusstio_writei( _f, _aview( _card_i, _card_j ), p );
		vnusstio_writes( _f, "\n", p );
	    }
	}
    }
    vnusstio_writes( _f, "A := 66;\n", p );
    {
	const unsigned int bounda = 20;

	for( unsigned int _card_i=0; _card_i<bounda; _card_i++ )
	{
	    if( A.IsOwner( p, _card_i ) )
	    {
		A( _card_i ) = 66;
	    }
	}
    }
    vnus_barrier();
    _Print1dShape( _f, A, p );
    vnus_barrier();
    vnusstio_writes( _f, "V <- A;\nV := 2112;\n", p );
    {
	ExprVec __backend_ip;
	natVec __backend_dp;

	__backend_ip.resize(1);
	__backend_ip[0] =  new VarExpr( 0 );
	__backend_dp.resize(1);
	__backend_dp[0] =  10;
	_V.AssignView( &(A), __backend_ip, __backend_dp );
    }
    {
	const unsigned int boundb = 10;

	for( unsigned int _card_i=0; _card_i<boundb; _card_i++ )
	{
	    _V( _card_i ) = 2112;
	}
    }
    _Print1dShape( _f, A, p );
    _Print1dView( _f, _V, p );
    vnus_barrier();
    {
	ExprVec __backend_ip;
	natVec __backend_dp;

	__backend_ip.resize(1);
	__backend_ip[0] =  new BinaryExpr(modOp, new BinaryExpr(addOp, new BinaryExpr(mulOp, new ConstExpr( 3 ), new VarExpr( 0 ) ), new ConstExpr( 2 ) ), new ConstExpr( 10 ) );
	__backend_dp.resize(1);
	__backend_dp[0] =  10;
	_W.AssignView( &(A), __backend_ip, __backend_dp );
    }
    {
	const unsigned int boundc = 10;

	for( unsigned int _card_i=0; _card_i<boundc; _card_i++ )
	{
	    vnus_barrier();
	    _W( _card_i ) = _card_i;
	    vnus_barrier();
	}
    }
    _Print1dShape( _f, A, p );
    vnusstio_writes( _f, "A[i] := 0;\n", p );
    vnus_barrier();
    {
	const unsigned int boundd = 20;

	for( unsigned int i=0; i<boundd; i++ )
	{
	    if( A.IsOwner( p, i ) )
	    {
		A( i ) = 0;
	    }
	}
    }
    vnus_barrier();
    vnusstio_writes( _f, "A: ", p );
    _Print1dShape( _f, A, p );
    vnusstio_writes( _f, "B[i] := i;\n", p );
    vnus_barrier();
    {
	const unsigned int bounde = 20;

	for( unsigned int i=0; i<bounde; i++ )
	{
	    if( B.IsOwner( p, i ) )
	    {
		B( i ) = i;
	    }
	}
    }
    vnus_barrier();
    vnusstio_writes( _f, "B: ", p );
    _Print1dShape( _f, B, p );
    vnusstio_writes( _f, "A[i] := B[i];\n", p );
    {
	const unsigned int boundf = 20;

	for( unsigned int i=0; i<boundf; i++ )
	{
	    if( A.IsOwner( p, i ) )
	    {
		A( i ) = B( i );
	    }
	}
    }
    vnus_barrier();
    vnusstio_writes( _f, "A: ", p );
    _Print1dShape( _f, A, p );
    vnusstio_writes( _f, "A[i] := 0;\n", p );
    vnus_barrier();
    {
	const unsigned int bound10 = 20;

	for( unsigned int i=0; i<bound10; i++ )
	{
	    if( A.IsOwner( p, i ) )
	    {
		A( i ) = 0;
	    }
	}
    }
    vnus_barrier();
    _Print1dShape( _f, A, p );
    vnusstio_writes( _f, "A[19-i] := B[i];\n", p );
    {
	const unsigned int bound11 = 20;

	for( unsigned int i=0; i<bound11; i++ )
	{
	    _desti = (19-i);
	    if( (B.Sender( i )==p) )
	    {
		vnus_send( A.Owner( _desti ), 1, sizeof( B( i ) ), &B( i ), p );
	    }
	    if( A.IsOwner( p, _desti ) )
	    {
		vnus_receive( B.Sender( i ), NULL, sizeof( A( _desti ) ), &A( _desti ), p );
	    }
	}
    }
    vnus_barrier();
    _Print1dShape( _f, A, p );
    vnus_barrier();
    _testscopes( _f, 12, p );
    vnus_barrier();
    vnusstio_close( _f, p );
}

static void vnus_service_a_thread_wrapper( int p )
{
    vnus_service_a_thread( (VnusNatural) p );
}

void initializations( void )
{
}

int main( int argc, char** argv )
{
    initializations();
    vnus_exec_forkall( vnus_service_a_thread_wrapper, numberOfProcessors, argc, argv );
    exit( 0 );
    return 0;
}
