/* This code was generated by the ParTool Vnus Backend. */

#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>
#include <vnuscomplex.h>
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>
#include "vnusstio.h"
#include "vnusbaseclass.h"
#include "arrayalloc.h"
#include "shape.h"
#include "vnusrtl.h"
#include "arrayboundviolated.h"
#include "notnullassert.h"
#include <spar-rtl.h>

int vnus_argc;
char **vnus_argv;
class record0;
class record1;

class record0 : public VnusBase {
};

class record1: public record0 {
public:
    record1()
     
    {}
    record1( VnusInt p_f0 ):
	field0(p_f0)
    {}
    VnusInt field0;
};

/* ------ end of forward function declarations ------ */
extern record1 *x;
/* ------ end of forward variable declarations ------ */
record1 *x;

int main( int argc, char **argv )
{
    vnus_argc = argc;
    vnus_argv = argv;
    try
    {
	// Scope: catchblock

	v__writeString( 1L, "1" );
	v__writeString( 1L, "\n" );
	x = new record1;
	x->field0 = 42L;
	throw x;
    }
    catch( record0 * v )
    {
	v__writeString( 1L, "2" );
	v__writeString( 1L, "\n" );
    }
    v__writeString( 1L, "3" );
    v__writeString( 1L, "\n" );
    exit( 0 );
    return 0;
}
