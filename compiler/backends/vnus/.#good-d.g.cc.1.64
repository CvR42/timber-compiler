/* This code was generated by the ParTool Vnus Backend. */

#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>
#include <vnuscomplex.h>
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>
#include "vnusstio.h"
#include "vnusprocdefs.h"
#include "vnusbaseclass.h"
#include "arrayalloc.h"
#include "shape.h"
#include "vnusrtl.h"
#include "arrayboundviolated.h"
#include "notnullassert.h"

VnusInt numberOfProcessors = 30;
VnusInt processorArrayInit[] = { 6, 5 };
ShapeD1<VnusInt> processorArray( (VnusBase::markfntype) NULL, processorArrayInit, 2, 2 );

int vnus_argc;
char **vnus_argv;
class record0;

class record0 : public VnusBase {
};

// extern VnusInt v__open( VnusString v__open_fnm, VnusString v__open_mode );
// extern void v__close( VnusInt v__close_hnd );
// extern void v__writeFloat( VnusInt v__writer_hnd, VnusFloat v__writer_r );
// extern void v__writeComplex( VnusInt v__writec_hnd, VnusComplex v__writec_c );
// extern void v__writeBoolean( VnusInt v__writeb_hnd, VnusBoolean v__writeb_b );
// extern void v__writeInt( VnusInt v__writei_hnd, VnusInt v__writei_i );
// extern void v__writeString( VnusInt v__writes_hnd, VnusString v__writes_s );
void _testscopes( VnusInt _testscopes_f, VnusInt _testscopes_n, VnusInt _testscopes_p );
void _Empty( void );
// extern void VnusEventArrayBoundViolated( void );
void _Print1dShape( VnusInt _Print1dShape_f, ShapeD1<VnusInt> _Print1dShape_A, VnusInt _Print1dShape_p );
VnusInt _inc( VnusInt _inc_i );
VnusInt _dec( VnusInt _dec_i );
void _testcmpint( VnusInt _testcmpint_f, VnusInt _testcmpint_a, VnusInt _testcmpint_b, VnusInt _testcmpint_p );
/* ------ end of forward function declarations ------ */
extern VnusFloat _x;
extern VnusInt _i;
extern VnusInt _desti;
extern VnusInt _n;
extern VnusComplex _c;
extern VnusComplex _c2;
extern VnusInt _tpi;
extern VnusInt _tpo;
extern VnusInt _tpio;
extern VnusBoolean _b;
extern VnusBoolean _true;
extern VnusBoolean _false;
extern VnusString _s;
extern VnusInt _f;
extern ShapeD2<VnusInt> _shp;
extern ShapeD1<VnusInt> A;
extern ShapeD1<VnusInt> B;
// extern VnusInt numberOfProcessors;
/* ------ end of forward variable declarations ------ */
VnusFloat _x;
VnusInt _i;
VnusInt _desti;
VnusInt _n;
VnusComplex _c;
VnusComplex _c2;
VnusInt _tpi;
VnusInt _tpo;
VnusInt _tpio;
VnusBoolean _b;
VnusBoolean _true;
VnusBoolean _false;
VnusString _s;
VnusInt _f;
ShapeD2<VnusInt> _shp( (VnusBase::markfntype) NULL, 5L, 8L );
ShapeD1<VnusInt> A( (VnusBase::markfntype) NULL, 20L );
ShapeD1<VnusInt> B( (VnusBase::markfntype) NULL, 20L );

void _testscopes( VnusInt _testscopes_f, VnusInt _testscopes_n, VnusInt _testscopes_p )
{
    // Scope: renamed_testscopes

    v__writeInt( _testscopes_f, _testscopes_n );
    v__writeString( _testscopes_f, " " );
    {
	// Scope: subscope
	VnusInt _testscopes_n_sub;

	_testscopes_n_sub = 43L;
	v__writeInt( _testscopes_f, _testscopes_n );
	v__writeString( _testscopes_f, " " );
	v__writeInt( _testscopes_f, 43L );
	v__writeString( _testscopes_f, "\n" );
    }
}

void _Empty( void )
{
}

void _Print1dShape( VnusInt _Print1dShape_f, ShapeD1<VnusInt> _Print1dShape_A, VnusInt _Print1dShape_p )
{
    {
	// Scope: _Print1dShape

	{
	    const VnusInt upperbound0 = _Print1dShape_A.GetSize0();

	    for( VnusInt _Print1dShape_i=0L; _Print1dShape_i<upperbound0; ++_Print1dShape_i )
	    {
		if( VnusIsUpperBoundViolated(_Print1dShape_i,_Print1dShape_A.GetSize0()) )
		{
		    goto bounds0;
		}
		v__writeInt( _Print1dShape_f, _Print1dShape_A[_Print1dShape_i] );
		v__writeString( _Print1dShape_f, " " );
	    }
	}
	v__writeString( _Print1dShape_f, "\n" );
	return;
    }
bounds0:
    VnusEventArrayBoundViolated();
}

VnusInt _inc( VnusInt _inc_i )
{
    // Scope: _inc

    return (_inc_i+1L);
}

VnusInt _dec( VnusInt _dec_i )
{
    // Scope: _dec

    return (_dec_i-1L);
}

void _testcmpint( VnusInt _testcmpint_f, VnusInt _testcmpint_a, VnusInt _testcmpint_b, VnusInt _testcmpint_p )
{
    // Scope: _testcmpint

    v__writeInt( _testcmpint_f, _testcmpint_a );
    v__writeString( _testcmpint_f, "=" );
    v__writeInt( _testcmpint_f, _testcmpint_b );
    if( (_testcmpint_a==_testcmpint_b) )
    {
	v__writeString( _testcmpint_f, " yes\n" );
    }
    else
    {
	v__writeString( _testcmpint_f, " no\n" );
    }
    v__writeInt( _testcmpint_f, _testcmpint_a );
    v__writeString( _testcmpint_f, "<>" );
    v__writeInt( _testcmpint_f, _testcmpint_b );
    if( (_testcmpint_a!=_testcmpint_b) )
    {
	v__writeString( _testcmpint_f, " yes\n" );
    }
    else
    {
	v__writeString( _testcmpint_f, " no\n" );
    }
    v__writeInt( _testcmpint_f, _testcmpint_a );
    v__writeString( _testcmpint_f, "<" );
    v__writeInt( _testcmpint_f, _testcmpint_b );
    if( (_testcmpint_a<_testcmpint_b) )
    {
	v__writeString( _testcmpint_f, " yes\n" );
    }
    else
    {
	v__writeString( _testcmpint_f, " no\n" );
    }
    v__writeInt( _testcmpint_f, _testcmpint_a );
    v__writeString( _testcmpint_f, "<=" );
    v__writeInt( _testcmpint_f, _testcmpint_b );
    if( (_testcmpint_a<=_testcmpint_b) )
    {
	v__writeString( _testcmpint_f, " yes\n" );
    }
    else
    {
	v__writeString( _testcmpint_f, " no\n" );
    }
    v__writeInt( _testcmpint_f, _testcmpint_a );
    v__writeString( _testcmpint_f, ">" );
    v__writeInt( _testcmpint_f, _testcmpint_b );
    if( (_testcmpint_a>_testcmpint_b) )
    {
	v__writeString( _testcmpint_f, " yes\n" );
    }
    else
    {
	v__writeString( _testcmpint_f, " no\n" );
    }
    v__writeInt( _testcmpint_f, _testcmpint_a );
    v__writeString( _testcmpint_f, ">=" );
    v__writeInt( _testcmpint_f, _testcmpint_b );
    if( (_testcmpint_a>=_testcmpint_b) )
    {
	v__writeString( _testcmpint_f, " yes\n" );
    }
    else
    {
	v__writeString( _testcmpint_f, " no\n" );
    }
}

static void vnus_service_a_thread( VnusInt p )
{
    vnus_barrier();
    if( (p==0L) )
    {
	_f = (VnusInt) v__open( "runout", "w" );
    }
    vnus_barrier();
    v__writeString( _f, "Hello world\n" );
    vnus_barrier();
    v__writeString( _f, "Hello world" );
    v__writeString( _f, "\n" );
    vnus_barrier();
    if( (p==0L) )
    {
	_false = false;
	_true = true;
	_b = false;
	_b = true;
	_b = (false|true);
	_b = (true&_b);
	_i = 2L;
	_i = 48L;
	_i = 53L;
	_i = 265L;
	_i = 22L;
	_i = (-22L);
	_i = (-22L);
	_i = _inc( _inc( (-22L) ) );
	_i = _dec( _i );
	_n = 7L;
	_n = 7L;
	_n = 14L;
	_n = 9L;
	_n = 108L;
	_n = 8L;
	_x = 2.1;
	_x = (-_x);
	_x = _x;
	_x = (0.7+_x);
	_x = (_x-500);
	_x = (_x*0.12);
	_x = (_x/0.13);
	_s = "test string";
	_c = VnusComplex( 2, 3 );
	_c2 = VnusComplex( 5, 12 );
	_c = (-_c);
    }
    vnus_barrier();
    v__writeString( _f, "c: " );
    v__writeComplex( _f, _c );
    v__writeString( _f, "\n" );
    vnus_barrier();
    if( (p==0L) )
    {
	_c = _c;
    }
    vnus_barrier();
    v__writeString( _f, "c: " );
    v__writeComplex( _f, _c );
    v__writeString( _f, "\n" );
    vnus_barrier();
    if( (p==0L) )
    {
	_c = (_c+_c2);
    }
    vnus_barrier();
    v__writeString( _f, "c: " );
    v__writeComplex( _f, _c );
    v__writeString( _f, "\n" );
    vnus_barrier();
    if( (p==0L) )
    {
	_c = (_c*_c2);
    }
    vnus_barrier();
    v__writeString( _f, "c: " );
    v__writeComplex( _f, _c );
    v__writeString( _f, "\n" );
    vnus_barrier();
    if( (p==0L) )
    {
	_c = (_c-_c2);
    }
    vnus_barrier();
    v__writeString( _f, "c: " );
    v__writeComplex( _f, _c );
    v__writeString( _f, "\n" );
    vnus_barrier();
    if( (p==0L) )
    {
	_c = (_c/_c2);
    }
    vnus_barrier();
    v__writeString( _f, "c: " );
    v__writeComplex( _f, _c );
    v__writeString( _f, "\n" );
    v__writeString( _f, "n: " );
    v__writeInt( _f, _n );
    v__writeString( _f, "\n" );
    v__writeString( _f, "i: " );
    v__writeInt( _f, _i );
    v__writeString( _f, "\n" );
    v__writeString( _f, "b: " );
    v__writeBoolean( _f, _b );
    v__writeString( _f, "\n" );
    v__writeString( _f, "x: " );
    v__writeFloat( _f, _x );
    v__writeString( _f, "\n" );
    v__writeString( _f, "s: " );
    v__writeString( _f, _s );
    v__writeString( _f, "\n" );
    v__writeString( _f, "c: " );
    v__writeComplex( _f, _c );
    v__writeString( _f, "\n" );
    v__writeString( _f, "numberOfProcessors: " );
    v__writeInt( _f, numberOfProcessors );
    v__writeString( _f, "\n" );
    v__writeString( _f, "\n" );
    v__writeString( _f, "n: " );
    v__writeInt( _f, _n );
    v__writeString( _f, "\n" );
    v__writeString( _f, "i: " );
    v__writeInt( _f, _i );
    v__writeString( _f, "\n" );
    v__writeString( _f, "b: " );
    v__writeBoolean( _f, _b );
    v__writeString( _f, "\n" );
    v__writeString( _f, "x: " );
    v__writeFloat( _f, _x );
    v__writeString( _f, "\n" );
    v__writeString( _f, "s: " );
    v__writeString( _f, _s );
    v__writeString( _f, "\n" );
    vnus_barrier();
    _Empty();
    if( (p==0L) )
    {
	_i = 14L;
    }
    vnus_barrier();
    while( (_i>0L) )
    {
	v__writeString( _f, "i = " );
	v__writeInt( _f, _i );
	v__writeString( _f, "\n" );
	vnus_barrier();
	if( (p==0L) )
	{
	    _i = (_i-1L);
	}
	vnus_barrier();
    }
    {
	for( VnusInt _card_i=0L; _card_i<3L; ++_card_i )
	{
	    for( VnusInt _card_j=0L; _card_j<4L; ++_card_j )
	    {
		v__writeString( _f, "i = " );
		v__writeInt( _f, _card_i );
		v__writeString( _f, ", " );
		v__writeString( _f, "j = " );
		v__writeInt( _f, _card_j );
		v__writeString( _f, "\n" );
	    }
	}
    }
    _testcmpint( _f, 1L, 2L, p );
    _testcmpint( _f, 1L, 1L, p );
    _testcmpint( _f, 2L, 1L, p );
    _testcmpint( _f, 223L, 1L, p );
    vnus_barrier();
    {
	for( VnusInt _card_i=0L; _card_i<5L; ++_card_i )
	{
	    for( VnusInt _card_j=0L; _card_j<8L; ++_card_j )
	    {
		if( (((_card_i/5L)%30L)==p) )
		{
		    if( (VnusIsUpperBoundViolated(_card_i,_shp.GetSize0())||VnusIsUpperBoundViolated(_card_j,_shp.GetSize1())) )
		    {
			VnusEventArrayBoundViolated();
		    }
		    _shp[((_shp.GetSize1()*_card_i)+_card_j)] = (_card_i+_card_j);
		}
	    }
	}
    }
    vnus_barrier();
    {
	for( VnusInt _card_i=0L; _card_i<5L; ++_card_i )
	{
	    for( VnusInt _card_j=0L; _card_j<8L; ++_card_j )
	    {
		v__writeString( _f, "shp[" );
		v__writeInt( _f, _card_i );
		v__writeString( _f, "," );
		v__writeInt( _f, _card_j );
		v__writeString( _f, "] = " );
		if( (VnusIsUpperBoundViolated(_card_i,_shp.GetSize0())||VnusIsUpperBoundViolated(_card_j,_shp.GetSize1())) )
		{
		    VnusEventArrayBoundViolated();
		}
		v__writeInt( _f, _shp[((_shp.GetSize1()*_card_i)+_card_j)] );
		v__writeString( _f, "\n" );
	    }
	}
    }
    v__writeString( _f, "A := 66;\n" );
    {
	for( VnusInt _card_i=0L; _card_i<20L; ++_card_i )
	{
	    if( (((_card_i/5L)%30L)==p) )
	    {
		if( VnusIsUpperBoundViolated(_card_i,A.GetSize0()) )
		{
		    VnusEventArrayBoundViolated();
		}
		A[_card_i] = 66L;
	    }
	}
    }
    vnus_barrier();
    _Print1dShape( _f, A, p );
    vnus_barrier();
    _Print1dShape( _f, A, p );
    vnus_barrier();
    v__writeString( _f, "A[i] := 0;\n" );
    {
	for( VnusInt i=0L; i<20L; ++i )
	{
	    if( (((i/5L)%30L)==p) )
	    {
		if( VnusIsUpperBoundViolated(i,A.GetSize0()) )
		{
		    VnusEventArrayBoundViolated();
		}
		A[i] = 0L;
	    }
	}
    }
    vnus_barrier();
    v__writeString( _f, "A: " );
    _Print1dShape( _f, A, p );
    v__writeString( _f, "B[i] := i;\n" );
    vnus_barrier();
    {
	for( VnusInt i=0L; i<20L; ++i )
	{
	    if( ((i%30L)==p) )
	    {
		if( VnusIsUpperBoundViolated(i,B.GetSize0()) )
		{
		    VnusEventArrayBoundViolated();
		}
		B[i] = i;
	    }
	}
    }
    vnus_barrier();
    v__writeString( _f, "B: " );
    _Print1dShape( _f, B, p );
    v__writeString( _f, "A[i] := B[i];\n" );
    {
	for( VnusInt i=0L; i<20L; ++i )
	{
	    if( (((i/5L)%30L)==p) )
	    {
		if( (VnusIsUpperBoundViolated(i,A.GetSize0())||VnusIsUpperBoundViolated(i,B.GetSize0())) )
		{
		    VnusEventArrayBoundViolated();
		}
		A[i] = B[i];
	    }
	}
    }
    vnus_barrier();
    v__writeString( _f, "A: " );
    _Print1dShape( _f, A, p );
    v__writeString( _f, "A[i] := 0;\n" );
    vnus_barrier();
    {
	for( VnusInt i=0L; i<20L; ++i )
	{
	    if( (((i/5L)%30L)==p) )
	    {
		if( VnusIsUpperBoundViolated(i,A.GetSize0()) )
		{
		    VnusEventArrayBoundViolated();
		}
		A[i] = 0L;
	    }
	}
    }
    vnus_barrier();
    _Print1dShape( _f, A, p );
    v__writeString( _f, "A[19-i] := B[i];\n" );
    {
	for( VnusInt i=0L; i<20L; ++i )
	{
	    _desti = (19L-i);
	    if( ((i%30L)==p) )
	    {
		if( VnusIsUpperBoundViolated(i,B.GetSize0()) )
		{
		    VnusEventArrayBoundViolated();
		}
		vnus_send( ((_desti/5L)%30L), sizeof( B[i] ), &B[i] );
	    }
	    if( (((_desti/5L)%30L)==p) )
	    {
		if( VnusIsBoundViolated(_desti,A.GetSize0()) )
		{
		    VnusEventArrayBoundViolated();
		}
		vnus_receive( (i%30L), sizeof( A[_desti] ), &A[_desti] );
	    }
	}
    }
    vnus_barrier();
    _Print1dShape( _f, A, p );
    vnus_barrier();
    _testscopes( _f, 12L, p );
    vnus_barrier();
    v__close( _f );
}

static void vnus_service_a_thread_wrapper( int p, int argc, char **argv )
{
    vnus_argc = argc;
    vnus_argv = argv;
    vnus_service_a_thread( (VnusInt) p );
}

int main( int argc, char **argv )
{
    vnus_exec_forkall( vnus_service_a_thread_wrapper, numberOfProcessors, argc, argv );
    exit( 0 );
    return 0;
}
