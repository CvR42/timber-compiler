globalpragmas <$ boundscheck = false $>;

import ClassData;
import Random;
import Results;
import Timer;

public class FT {
	static final char Class           = ClassData.Class;
	static final [int^3] Dim      = ClassData.Dim;
	static final int TotalDim         = Dim[0]*Dim[1]*Dim[2];
	static final complex [] TestValue = ClassData.TestValue;
	static final int MaxIterations    = ClassData.MaxIterations;
	static final complex [] sums      = new complex [MaxIterations];

	static int MaxDim;
	static complex [] omega;
	static double [] ex;
	static int [*,*,*] indexmap;

	static final double Pi            = 3.141592653589793238;
	static final double alpha         = 1.0E-6;

	static int ILog2(int n) {
		int l = 0;

		while (n>1) {
			n >>= 1;
			l++;
		}

		return l;
	}

	static void FFT_Init(final int N) {
		int m, k;
		double t;

		// omega[t] = e^(2*Pi*i/2^t)
		m = ILog2(N)+1;
		omega = new complex [m];

		k = 1;
		for (i :- :m) {
			t = 2.0*Pi/k;
			omega[i] = complex(Math.cos(t),Math.sin(t));
			k *= 2;
		}
	}

	static complex [*,*,*] <$dist="[cyclic,collapsed,collapsed]"$>tmp;

	static void FFT3D(final int is, final complex[*,*,*] <$dist="[cyclic,collapsed,collapsed]"$>u, final complex[*,*,*] <$dist="[cyclic,collapsed,collapsed]"$>v) {
		// is = forward(1)/backward(-1)
		final [int^3] N = u.getSize();

//__println(1,"FFT3D:1");
		// dim 1
//		x.setSize([N[0]]);
//		<$independent$>foreach (i :- :N[0], j :- :N[1], k :- :N[2])
		<$independent$>foreach (j :- :N[1], i :- :N[0], k :- :N[2])
				tmp[j,k,i] = u[i,j,k];
		<$taskparallel,independent$>foreach (j :- :N[1], k :- :N[2])
				FFT(is,tmp,j,k,N[0]);
		<$independent$>foreach (i :- :N[0], j :- :N[1], k :- :N[2])
				v[i,j,k] = tmp[j,k,i];
//__println(1,"FFT3D:2");
		// dim 2
//		x.setSize([N[1]]);
		<$independent$>foreach (i :- :N[0], j :- :N[1], k :- :N[2])
				tmp[i,k,j] = (<$resident$>v[i,j,k]);
		<$taskparallel,independent$>foreach (i :- :N[0], k :- :N[2])
				FFT(is,tmp,i,k,N[1]);
		<$independent$>foreach (i :- :N[0], j :- :N[1], k :- :N[2])
				v[i,j,k] = (<$resident$>tmp[i,k,j]);
//__println(1,"FFT3D:3");
		// dim 3
//		x.setSize([N[2]]);
		<$independent$>foreach (i :- :N[0], j :- :N[1], k :- :N[2])
				tmp[i,j,k] = (<$resident$>v[i,j,k]);
		<$taskparallel,independent$>foreach (i :- :N[0], j :- :N[1])
				FFT(is,tmp,i,j,N[2]);
		<$independent$>foreach (i :- :N[0], j :- :N[1], k :- :N[2])
				v[i,j,k] = (<$resident$>tmp[i,j,k]);
//__println(1,"FFT3D:4");
	}

	static complex [*] x;
	static complex [*] y;

	<$ resident $> static void FFT(final int is, complex [*,*,*] tmp,
final int dim0, final int dim1, final int dim2Size) {
		// is = normal(1)/inverse(-1)
		// x.length and y.length must be 2^M
		// x is input. y is temporary vector
		// both x and y will be altered
		int pt, pM;
		int id_to, id_frm1, id_frm2;
		complex om, om1;
//		final int N = x.getSize()[0];
		final int N = dim2Size;
		final int M = ILog2(N);

//		y.setSize([MaxDim]);
		for (i :- 0:N)
			x[i] = tmp[dim0,dim1,i];
		for (t :- 1:M+1) {
			pM = 1 << (M-t);
			pt = 1 << (t-1);

			if (is==-1)
				om1 = Complex.conj(omega[t]);
			else
				om1 = omega[t];
			om = 1.0;
			for (k :- :pt) {
				for (j :- :pM) {
					id_to = 2*j*pt+k;
					id_frm1 = j*pt+k;
					id_frm2 = id_frm1+N/2;
					y[id_to] = x[id_frm1] + om * x[id_frm2];
					y[pt+id_to] = x[id_frm1] - om * x[id_frm2];
				}
				om = om * om1;
			}
/* This switch here is incorrect in the parallel case, because the
   handle on a parallel array might not be switched the same amount
   on all processors.
   In other words: rewrite this in such a way that the input array
   is modifed in place. This might cost an extra copy, but it
   is worth it in the long run.*/
			[x,y] = [y,x];
		}

//		return x;
		for (i :- 0:N)
			tmp[dim0,dim1,i] = x[i];
	}

	static void ComputeInitialConditions(final complex [*,*,*] <$dist="[cyclic,collapsed,collapsed]"$>u) {
		final double GenerationSeed = 314159265.0;
		final double GenerationMult = 1220703125.0;
		double Real, Imag;
		double M;

		foreach (k :- :Dim[2]) {
			Random random = new Random(GenerationSeed,GenerationMult);
			random.Skip(2*k*Dim[1]*Dim[0]);
			for (j :- :Dim[1], i :- :Dim[0]) {
				Real = random.RandLC();
				Imag = random.RandLC();
				u[i,j,k] = complex(Real,Imag);
			}
			__delete(random);
		}
	}

	static void ComputeIndexMap() {
//__println(1,"ComputeIndexMap:entered");
		int expMax;
		int r, s, t;
		int d0, d1, d2;

		indexmap = new int [Dim[0],Dim[1],Dim[2]];
		[d0,d1,d2] = Dim;
		foreach (i :- :d0, j :- :d1, k :- :d2) {
			r = (i+d0/2)%d0 - d0/2;
			s = (j+d1/2)%d1 - d1/2;
			t = (k+d2/2)%d2 - d2/2;
			indexmap[i,j,k] = t*t + s*s + r*r;
		}

		expMax = MaxIterations*(Dim[0]*Dim[0] + Dim[1]*Dim[1] + Dim[2]*Dim[2]);
		ex = new double [expMax+1];
//__print(1,"expMax+1:");
//__println(1,expMax+1);
//__print(1,"ex.getSize():");
//__println(1,ex.getSize()[0]);
		ex[0] = 1.0;
		ex[1] = Math.exp(-4.0*alpha*Pi*Pi);
		for (i :- 2:expMax+1)
			ex[i] = ex[i-1] * ex[1];
//		for (i :- 0:10)
//			__println(1,ex[i]);
	}
	
	static void Evolve(int iter, final complex [*,*,*] <$dist="[cyclic,collapsed,collapsed]"$>v, final complex [*,*,*] <$dist="[cyclic,collapsed,collapsed]"$>w) {
//__println(1,"Evolve:entered");
		final [int^3] d = v.getSize();

		iter++;
//__print(1,"iter:");
//__println(1,iter);
//__print(1,"ex.getSize():");
//__println(1,ex.getSize()[0]);
//		for (i :- 0:10)
//			__println(1,ex[i]);
//__print(1,"w.getSize():[");
//__print(1,w.getSize()[0]);
//__print(1,",");
//__print(1,w.getSize()[1]);
//__print(1,",");
//__print(1,w.getSize()[2]);
//__println(1,"]");
//__print(1,"v.getSize():[");
//__print(1,v.getSize()[0]);
//__print(1,",");
//__print(1,v.getSize()[1]);
//__print(1,",");
//__print(1,v.getSize()[2]);
//__println(1,"]");
		foreach (i :- :d) {
//__print(1,"i:[");
//__print(1,i[0]);
//__print(1,",");
//__print(1,i[1]);
//__print(1,",");
//__print(1,i[2]);
//__println(1,"]");
//__print(1,"indexmap@i:");
//__println(1,indexmap@i);
			w@i = (<$resident$>v@i) * (<$resident $>ex[iter*(indexmap@i)]);
		}
	}

	static void CheckSum(final int iter, final complex [*,*,*] <$dist="[cyclic,collapsed,collapsed]"$>u) {
//__println(1,"CheckSum:entered");
		final [int^3] dim = u.getSize();
		complex chk = complex(0.0,0.0);

		<$reduction$>foreach (k :- 1:1025) {
			chk = chk + u[k%dim[0],(3*k)%dim[1],(5*k)%dim[2]];
		}
		chk /= TotalDim;
		sums[iter] = chk;
	}

	static boolean Verify() {
		double err;
		final double epsilon = 1.0E-12;
		boolean verified = true;

		foreach (i :- :MaxIterations) {
			err = Math.abs((Complex.real(sums[i]) - 
				Complex.real(TestValue[i])) / 
				Complex.real(TestValue[i]));
			if (err>=epsilon)
				verified = false;
			err = Math.abs((Complex.imag(sums[i]) - 
				Complex.imag(TestValue[i])) / 
				Complex.imag(TestValue[i]));
			if (err>=epsilon)
				verified = false;
		}
		return verified;
	}

	static public void main(String [] args) {
		double timecounter = 0.0, mops = 0.0;
		final Timer timer = new Timer();
		boolean passedVerification;
		final complex [*,*,*] <$dist="[cyclic,collapsed,collapsed]"$>u = new complex [Dim[0],Dim[1],Dim[2]]<$dist="[cyclic,collapsed,collapsed]"$>;
		final complex [*,*,*] <$dist="[cyclic,collapsed,collapsed]"$>v = new complex [Dim[0],Dim[1],Dim[2]]<$dist="[cyclic,collapsed,collapsed]"$>;
		final complex [*,*,*] <$dist="[cyclic,collapsed,collapsed]"$>w = new complex [Dim[0],Dim[1],Dim[2]]<$dist="[cyclic,collapsed,collapsed]"$>;

		__println(1,"NAS Parallel Benchmarks SPAR version - FT Benchmark\n");
		__print(1," Size:  ");
		__print(1,Dim[0]);
		__print(1,"x");
		__print(1,Dim[1]);
		__print(1,"x");
		__print(1,Dim[2]);
		__println(1,"  (class "+Class+")");
		__print(1,"  Iterations:   ");
		__println(1,MaxIterations);

		// Calculate MaxDim
		MaxDim = Dim[0];
		if (Dim[1]>MaxDim)
			MaxDim = Dim[1];
		if (Dim[2]>MaxDim)
			MaxDim = Dim[2];

	x = new complex [MaxDim];
	y = new complex [MaxDim];
	tmp = new complex [MaxDim,MaxDim,MaxDim]<$dist="[cyclic,collapsed,collapsed]"$>;
//__println(1,"1");
		timer.Clear();

//__println(1,"2");
	timer.Start();
		
//__println(1,"3");
		ComputeIndexMap();

//__println(1,"4");
		ComputeInitialConditions(v);

//__println(1,"5");
		FFT_Init(MaxDim);

//__println(1,"6");
		FFT3D(1,v,u);

//__println(1,"7");
		for (iter :- :MaxIterations) {
//			__print(1,"  iteration ");
//			__println(1,(iter+1));
			Evolve(iter,u,v);
			FFT3D(-1,v,w);
			CheckSum(iter,w);
		}

//__println(1,"8");
		timer.Stop();
		timecounter = timer.Read();

		passedVerification = Verify();

		if (timecounter>0.0)
			mops = 1.0E-6*TotalDim *
				(14.8157+7.19641*Math.log((double)TotalDim) +
				 5.23518+7.21113*Math.log((double)TotalDim)) *
				MaxIterations/timecounter;
		Results.Print(Class,
			Dim[0],
			Dim[1],
			Dim[2],
			MaxIterations,
			timecounter,
			mops,
			"floating point",
			passedVerification);
	}
}
