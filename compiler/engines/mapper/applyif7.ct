/*
   Applyif7 engine

   Switch two tighly-nested foreach loops: helps bclussing.
   This is only done if inner loop contains assignement where lhs
   contains reference to iterator of outer loop, but not of inner loop.
   */

.. File: applyif7.ct
..
.insert genwalk.t
..
.. For which types are there actions defines?
.set actors
.append actors SmtForeach
..
.insert tmcwalk.t
..
.set visit_types ${call calc_treewalk "vnusprog" "$(actors)"}
..

#include <assert.h>
#include <tmc.h>

#include "defs.h"
#include "tmadmin.h"
#include "global.h"
#include "error.h"
#include "service.h"
#include "vnusctl.h"
#include "search.h"
#include "applyif7.h"

.call generate_walker_forwards "$(visit_types)"

/* ----------- Actors ----------- */

/*
  If there are two tightly nested foreach loops with only one assignment
  statement, and the lhs of the assignment references only the outer loop's
  cardinality variable, but not the inner one's, then the loops are
  interchanged.
  */
static SmtForeach rewrite_SmtForeach_action(
  SmtForeach e, global_context gc )
{
.call generate_walker_call "    " e SmtForeach SmtForeach
    if (e->cards->sz != 1)
        return e;
    if (e->body->statements->sz != 1)
        return e;
    if (e->body->statements->arr[0]->tag != TAGSmtForeach)
        return e;
    SmtForeach F2 = to_SmtForeach(e->body->statements->arr[0]);
    if (F2->cards->sz != 1)
        return e;
    if (F2->body->statements->sz != 1)
        return e;
    if (!pragma_list_contains_tmsymbol(e->pragmas, add_tmsymbol("independent")) &&
        pragma_list_contains_tmsymbol(F2->pragmas, add_tmsymbol("independent")))
        return e;
    if (F2->body->statements->arr[0]->tag != TAGSmtAssign)
        return e;
    SmtAssign SA = to_SmtAssign(F2->body->statements->arr[0]);
    location lhs = pierceLocationWrapper(SA->lhs);
    if (lhs->tag != TAGLocSelection)
        return e;
    LocSelection LS = to_LocSelection(lhs);
    if (search_expression_list(LS->indices,
                               e->cards->arr[0]->name->sym)
        && !search_expression_list(LS->indices,
                                   F2->cards->arr[0]->name->sym))
    {
        cardinality_list cltmp = F2->cards;
        F2->cards = e->cards;
        e->cards = cltmp;
        fprintf(stderr, "IF7: switched loops %s and %s\n",
                e->cards->arr[0]->name->sym->name,
                F2->cards->arr[0]->name->sym->name);
    }
    return e;
}



.call generate_walker "$(visit_types)"

/* Given a vnusprog, rewrite it to the final form for output. */
vnusprog apply_if7(
    vnusprog elm, global_context gc )
{
.call generate_descent_call "    " elm vnusprog vnusprog
    return elm;
}
