/*
   Applyit02 engine

   Pre-label all assignments as computations

   Also performs rule it03: if rhs is a simple shape element reference
   then it is a communication, not a computation.
   */

.. File: applyit02.ct
..
.insert genwalk.t
..
.. For which types are there actions defines?
.set actors
.append actors SmtAssign
..append actors SmtForeach
.append actors ExprWrapper LocWrapper statement block RoutineDeclaration
..
.insert tmcwalk.t
..
.set visit_types ${call calc_treewalk "vnusprog" "$(actors)"}
..

#include <assert.h>
#include <tmc.h>

#include "defs.h"
#include "tmadmin.h"
#include "global.h"
#include "error.h"
#include "service.h"
#include "vnusctl.h"
#include "applyit02.h"

.call generate_action_forwards "$(actors)"
.call generate_walker_forwards "$(visit_types)"

/* ----------- Actors ----------- */

.call generate_cutoff_pragma_action SmtForeach reduction
.call generate_cutoff_pragma_action ExprWrapper resident
.call generate_cutoff_pragma_action LocWrapper resident
.call generate_cutoff_pragma_action statement resident
.call generate_cutoff_pragma_action block resident
.call generate_cutoff_pragma_action RoutineDeclaration resident   

/*
  See above.
  */
static SmtAssign rewrite_SmtAssign_action(
  SmtAssign e, global_context /*gc*/ )
{
    if (e->pragmas == 0)
        e->pragmas = new_Pragma_list();
    FlagPragma np = 0;
    if (e->rhs->tag == TAGExprSelection) // rule it03
    {
        ExprSelection es = to_ExprSelection(e->rhs);
        if (pierceExprNotNullAssert(es->shape)->tag == TAGExprName)
        {
            np = new_FlagPragma(add_origsymbol("communication"));
            fprintf(stderr,"IT02: marked as communication\n");
        }
        else if (es->shape->tag == TAGExprDeref &&
                 pierceExprNotNullAssert(to_ExprDeref(es->shape)->ref)->tag == TAGExprName)
        {
            np = new_FlagPragma(add_origsymbol("communication"));
            fprintf(stderr,"IT02: marked as communication\n");
        }
    }
    if (np == 0)
    {
        np = new_FlagPragma(add_origsymbol("computation"));
        fprintf(stderr,"IT02: marked as computation\n");
    }
    e->pragmas = append_Pragma_list(e->pragmas, np);
    return e;
}

.call generate_walker "$(visit_types)"

/* Given a vnusprog, rewrite it to the final form for output. */
vnusprog apply_it02(
    vnusprog elm, global_context gc )
{
        // A hack to avoid 'unused' warnings
    (void) rewrite_SmtAssign_walker;
    
.call generate_descent_call "    " elm vnusprog vnusprog
    return elm;
}
