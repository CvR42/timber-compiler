/*
   Applyclean5 engine

   Clean out empty Expr/LocWrappers.
   Also clean out empty TypePragmas.
   This makes matching easier,
   */

.. File: applyclean.ct
..
.insert genwalk.t
..
.. For which types are there actions defines?
.set actors
.append actors LocWrapper ExprWrapper TypePragmas
..
.insert tmcwalk.t
..
.set visit_types ${call calc_treewalk "vnusprog" "$(actors)"}
..

#include <assert.h>
#include <tmc.h>

#include "defs.h"
#include "tmadmin.h"
#include "global.h"
#include "error.h"
#include "service.h"
#include "vnusctl.h"
#include "applyclean.h"

.call generate_walker_forwards "$(visit_types)"

/* ----------- Actors ----------- */

/*
  Cleanup and maybe zap a LocWrapper node if it is empty.
  */
static location rewrite_LocWrapper_action(
    LocWrapper elm, global_context gc )
{
.call generate_walker_call "    " elm LocWrapper LocWrapper
    location ret = elm;
    if (elm->on != OwnerExpr_listNIL && elm->on->sz == 0)
    {
	rfre_OwnerExpr_list(elm->on);
	elm->on = OwnerExpr_listNIL;
    }
    if (elm->pragmas != Pragma_listNIL && elm->pragmas->sz == 0)
    {
	rfre_Pragma_list(elm->pragmas);
	elm->pragmas = Pragma_listNIL;
    }
    if (elm->on == OwnerExpr_listNIL &&
	elm->pragmas == Pragma_listNIL)
    {
	ret = elm->l;
	elm->l = locationNIL;
	rfre_location(elm);
	if (warning_level >= WARN_RULE)
	    fprintf(stderr, "Applyclean5: LocWrapper node zapped\n");
    }
    return ret;
}

/*
  Cleanup and maybe zap a ExprWrapper node if it is empty.
  */
static expression rewrite_ExprWrapper_action(
    ExprWrapper elm, global_context gc )
{
.call generate_walker_call "    " elm ExprWrapper ExprWrapper
    expression ret = elm;
    if (elm->on != OwnerExpr_listNIL && elm->on->sz == 0)
    {
	rfre_OwnerExpr_list(elm->on);
	elm->on = OwnerExpr_listNIL;
    }
    if (elm->pragmas != Pragma_listNIL && elm->pragmas->sz == 0)
    {
	rfre_Pragma_list(elm->pragmas);
	elm->pragmas = Pragma_listNIL;
    }
    if (elm->on == OwnerExpr_listNIL &&
	elm->pragmas == Pragma_listNIL)
    {
	ret = elm->x;
	elm->x = expressionNIL;
	rfre_expression(elm);
	if (warning_level >= WARN_RULE)
	    fprintf(stderr, "Applyclean5: ExprWrapper node zapped\n");
    }
    return ret;
}


/*
  Cleaup and maybe zap a TypePragmas node if it is empty.
  */
static type rewrite_TypePragmas_action(
    TypePragmas elm, global_context gc )
{
.call generate_walker_call "    " elm TypePragmas TypePragmas
    type ret = elm;
    if (elm->pragmas != Pragma_listNIL && elm->pragmas->sz == 0)
    {
	rfre_Pragma_list(elm->pragmas);
	elm->pragmas = Pragma_listNIL;
    }
    if (elm->pragmas == Pragma_listNIL)
    {
	ret = elm->t;
	elm->t = typeNIL;
	rfre_type(elm);
	if (warning_level >= WARN_RULE)
	    fprintf(stderr, "Applyclean5: TypePragmas node zapped\n");
    }
    return ret;
}


.call generate_walker "$(visit_types)"

/* Given a vnusprog, rewrite it to the final form for output. */
vnusprog apply_clean5(
    vnusprog elm, global_context gc )
{
        // A hack to avoid 'unused' warnings
    
.call generate_descent_call "    " elm vnusprog vnusprog
    return elm;
}
