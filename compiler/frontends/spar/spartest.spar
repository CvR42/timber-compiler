// This is a test program for the sugar V-nus frontend.
// It tests the execution of sequential programs.

/* This a C-style comment. */
/* This is a longer
 * C-style
 * comment
 * spanning
 * several
 * lines. This tests whether the lines are correctly counted
 * a comment.
 */

globalpragmas <$
   boundscheck=true,
   native=true,
   class=no,
   public
$>;


//<$pure$> native void __print( int f, __string s );
//native void __print( int f, long l );
//native void __print( int f, int i );
//native void __print( int f, complex c );
//native void __print( int f, boolean b );
//native void __print( int f, float r );

class VnusLib {
    static native int open( __string nm, __string mode );
    static native void close( int f );
}

class t {
    static Object next;
    public int x;
    public int y;
}

class t1 extends t {
    public int y;
    static public int z;
    <$ noGC $> void f( int n ) {}
}

public class spartest {
    <$notorious$> static float x = 0.0f;
    static int <$ positive $> i, n = 2;
    static complex c;
    static complex c2;
    static int tpi;
    static int tpo;
    static int tpio;
    static boolean b;
    static __string s;
    static int f = 0;
    static int[*,*] shp = new int[5,8];
    static int A[] = new int[20];
    static int B[] = new int[20];
    static int s0[] = new int[1];
    // class cl1 { int a; float b; char c; }
    // static cl1 rec = new cl1();
    // class cl2 { int a; float b; }
    // static cl2 rec2 = new cl2();

    <$pure$> static void test_scopes( int f, int n )
    {
	int nloc;

	nloc = n*2;
	__print( f, n );
	__print( f, " " );
	__print( f, nloc );
	__print( f, "\n" );
	<$pointless, testboolean = false, testint = 42, teststring = "hello world" $>;
	{
	    int nsub;

	    nsub = nloc*3;
	    __print( f, n );
	    __print( f, " " );
	    __print( f, nloc );
	    __print( f, " " );
	    __print( f, nsub );
	    __print( f, "\n" );
	    <$bigdeal$> if ( nsub>nloc ){
		int n1 = 3;

		while( n1>0 ){
		    n1 = n1-1;
		    nsub = nsub + n1;
		}
		do {
		    n1 = n1-1;
		    nsub = nsub + n1;
		    __println( f, "n1 = ", n1 );
		} while( n1>0 );
		__print( f, nsub );
		__print( f, "\n" );
	    }
	    else {
		int n1;

		n1 = 6;
		while( n1>0 ){
		    n1 = n1-1;
		    nsub = nsub + n1;
		}
		__print( f, nsub );
		__print( f, "\n" );
	    }
	}
	for( i :- 0:nloc ){
	    int A[] = new int[23];

	    foreach( i1 :- 0:A.getSize(0) ){
		int z;

		z = i1+2;
		A[i1] = z;
	    }
	}
    }

    static void test_dynamic( int f, int aout[], int bout[], int ain[], int bin[] )
    {
	int tmp[] = new int[bin.getSize(0)];
	int lim;

	lim = 10;
	if( bin.getSize(0)<lim ){
	    lim = bin.getSize(0);
	}
	__print( f, "lim = " );
	__print( f, lim );
	__print( f, "\n" );
	foreach( i :- 0:lim ){
	    <$testpragmamangling=(@ain @i)$>
	    tmp[i] = ain[i]+bin[i];
	}
	foreach( i :- 0:lim ){
	    aout[i] = tmp[i];
	    bout[i] = tmp[i];
	}
    }

    static void run_test_dynamic( int f, int n )
    {
	int ain[] = new int[10];
	int bin[] = new int[n];
	int aout[] = new int[10];
	int bout[] = new int[n];
	boolean bad;
	boolean allok;

	foreach [i:-:10] { ain[i] = 1; }
	foreach [i:-:n] { bin[i] = 1; }
	test_dynamic( f, aout, bout, ain, bin );
	allok = true;
	for( int i=0; i<10; i++ ){
	    if( aout[i] != 2 ){
		__print( f, "test_dynamic: bad value for aout\n" );
		__print( f, "aout[" );
		__print( f, i );
		__print( f, "] = " );
		__print( f, aout[i] );
		__print( f, "\n" );
		allok = false;
	    }
	}
	bad = false;
	for [i:-:10] {
	    bad = bad | ( bout[i] != aout[i] );
	}
	if( bad ){
	    __print( f, "test_dynamic: bad value for bout\n" );
	    allok = false;
	}
	if( allok ){
	    __print( f, "test_dynamic: everything ok\n" );
	}
    }

    <$ noGC $> static void empty_proc()
    {
    }

    <$ noGC $> static void empty_proc1( int[] v )
    {
    l:    v[0] = 42;
    }

    <$ noGC $> static void Print1dShape( int f, int[*] A )
    {
	for [ i:-:A.getSize(0) ] {
	    __print( f, A[i], " " );
	}
	__println( f, "" );
    }

    <$ noGC $> static int inc( int i )
    {
	return i+1;
    }

    <$ noGC $> static int dec( int i )
    {
	return i-1;
    }

    <$ noGC $> static void testcmpint( int f, int a, int b )
    {
	__print( f, a );
	__print( f, "=" );
	__print( f, b );
	if( a==b ){
	    __print( f, " yes\n" );
	}
	else {
	    __print( f, " no\n" );
	}
	__print( f, a );
	__print( f, "!=" );
	__print( f, b );
	if (a!=b) {
	    __print( f, " yes\n" );
	}
	else {
	    __print( f, " no\n" );
	}
	__print( f, a );
	__print( f, "<" );
	__print( f, b );
	if( a<b ){
	    __print( f, " yes\n" );
	}
	else {
	    __print( f, " no\n" );
	}
	__print( f, a );
	__print( f, "<=" );
	__print( f, b );
	if( a<=b ) {
	    __print( f, " yes\n" );
	}
	else {
	    __print( f, " no\n" );
	}
	__print( f, a );
	__print( f, ">" );
	__print( f, b );
	if( a>b) {
	    __print( f, " yes\n" );
	}
	else {
	    __print( f, " no\n" );
	}
	__print( f, a );
	__print( f, ">=" );
	__print( f, b );
	if( a>=b ){
	    __print( f, " yes\n" );
	}
	else {
	    __print( f, " no\n" );
	}
    }

    public static void main()
    {
	f = VnusLib.open ( "runout", "w" );
	__print( f, "Hello world\n" );
	__println( f, "Hello world" );
	if( true ){
	    __print( f, "Yep, true is true\n" );
	}
	else {
	    __print( f, "Huh, true is false?\n" );
	}
	if( false ){
	    __print( f, "Huh, false is true?\n" );
	}
	else {
	    __print( f, "Yep, false is false\n" );
	}
	b = false;
	b = !b;
	b = false | b;
	b = true & b;
	i = 2;
	i = 50-i;
	i = 5+i;
	i = 5*i;
	i = i/12;
	i = -i;
	i = +i;
	i = inc( inc( i ) );
	i = dec( i );
	n = 7;
	n = +n;
	n = 7+n;
	n = n-5;
	n = n*12;
	n = n/13;
	n = n*6;
	n = n/3;
	b = ( n>i ? true : false );
	x = 2.1f;
	x = -x;
	x = +x;
	x = 0.7f+x;
	x = x-5e2f;
	x = x*0.12f;
	x = x/0.13f;
	s = "test string";
	c = complex ( 2, 3 );
	c2 = complex ( 5, 12 );
	c = -c;
	__print( f, "c: " );
	__print( f, c );
	__print( f, "\n" );
	c = +c;
	__print( f, "c: " );
	__print( f, c );
	__print( f, "\n" );
	c = c+c2;
	__print( f, "c: " );
	__print( f, c );
	__print( f, "\n" );
	c = c*c2;
	__print( f, "c: " );
	__print( f, c );
	__print( f, "\n" );
	c = c-c2;
	__print( f, "c: " );
	__print( f, c );
	__print( f, "\n" );
	c = c/c2;
	__print( f, "c: " );
	__print( f, c );
	__print( f, "\n" );
	__print( f, "n: " );
	__print( f, n );
	__print( f, "\n" );
	__print( f, "i: " );
	__print( f, i );
	__print( f, "\n" );
	__print( f, "b: " );
	__print( f, b );
	__print( f, "\n" );
	__print( f, "x: " );
	__print( f, x );
	__print( f, "\n" );
	__print( f, "s: " );
	__print( f, s );
	__print( f, "\n" );
	__print( f, "c: " );
	__print( f, c );
	__print( f, "\n" );
	__print( f, "\n" );
	i = -42;
	__print( f, "i: " );
	__print( f, i );
	__print( f, "\n" );
	__println( f, "n: ", n );
	__println( f, "i: ", i );
	__println( f, "b: ", b );
	__println( f, "s: ", s );

	__println( f, 1.0 );

	__println( f, (float) (((byte) 1)+'c') );

	n = 3;
	while( n>0 ) n = n-1;

	__println( f, "n: ", n );

	i = 14;
	while( i>0 ){
	    __print( f, "i = " );
	    __print( f, i );
	    __print( f, "\n" );

	    i = i-1;
	}
	for [ i:-:3, j:-:4 ] {
	    __print( f, "i = " );
	    __print( f, i );
	    __print( f, ", " );
	    __print( f, "j = " );
	    __print( f, j );
	    __print( f, "\n" );
	}
	testcmpint( f, 1, 2 );
	testcmpint( f, 1, 1 );
	testcmpint( f, 2, 1 );
	testcmpint( f, 223, 1 );
	foreach [i:-:5, j:-:8] {
	    shp[i,j] = i+j;
	}
	for [i:-:5,j:-:8] {
	    __print( f, "shp[" );
	    __print( f, i );
	    __print( f, "," );
	    __print( f, j );
	    __print( f, "] = " );
	    __print( f, shp[i,j] );
	    __print( f, "\n" );
	}
	__print( f, "A = 66;\n" );

	for [i:-:A.getSize(0)] {
	    A[i] = 66;
	}

	Print1dShape( f, A );

	__print( f, "A[i] = 0;\n" );

	foreach [i:-:A.getSize(0)] {
	    A[i] = 0;
	}

	__print( f, "A: " );

	Print1dShape( f, A );

	__print( f, "B[i] = i;\n" );

	foreach [i:-:A.getSize(0)] {
	    B[i] = i;
	}

	__print( f, "B: " );
	Print1dShape( f, B );

	__print( f, "A[i] = B[i];\n" );

	foreach [i:-:A.getSize(0)] {
	    A[i] = B[i];
	}

	__print( f, "A: ");
	Print1dShape( f, A );
	test_scopes( f, 42 );
	run_test_dynamic( f, 42 );
	__println( f, 3<4?"yes":"no" );
	__print( f, (int) (byte) 12 );
	__print( f, "\n" );
	next: switch ( 3 ) {
	    case 4: {
		__println( f, "four" );
	    }

	    case 3: {
		__println( f, "three" );
	    }

	    case 2: {}

	    case 1: {
		__println( f, "one" );
		break next;
	    }

	    case 0: {
		__println ( f, "zero" );
	    }

	    default:
		__println( f, "default" );
	}
	__println( f, "left shifts: int:",1<<2," byte:",((byte) 1)<<2," short:",((short) 1)<<2," long:",1l<<2 );
	__println( f, "right shifts: int:",55>>2," byte:",((byte) 55)>>2," short:",((short) 55)>>2," long:",55l>>2 );
	__println( f, "unsigned right shifts: int:",55>>>2," byte:",((byte) 55)>>>2," short:",((short) 55)>>>2," long:",55l>>>2 );
	__println( f, "shifts of negative numbers: left:",(-11)<<2," right:",(-11)>>2," unsigned right:",(-11)>>>2 );
	__println( f, "bitwise operations: and:", 17 & 18, " or:",17 | 18," xor:",17 ^ 18 );
	__println( f, "boolean operations: and:", true & false, " or:",true | false," xor:",true ^ false );
	__println( f, "bitwise not:", !12," ", ! (-144) );
	__println( f, "boolean not:", !false," ", !true );
	__println( f, "increment and decrement" );
	n = 0;
	__print( f, " ", n );
	n++;
	__print( f, " ", n );
	__print( f, " ", n++ );
	__print( f, " ", n++ );
	n++;
	__print( f, " ", n );
	n--;
	__print( f, " ", n );
	n--;
	__print( f, " ", n );
	n = (n=3)*n;
	__println( f, " ", n );
	n += 5;
	__print( f, " ", n );
	n -= 1;
	__print( f, " ", n );
	n *= 6;
	__print( f, " ", n );
	n /= 3;
	__print( f, " ", n );
	n %= 1;
	__println( f, " ", n );
	n += 1;
	__println( f, " ", n );
	n <<= 2;
	__print( f, " ", n );
	n >>= 1;
	__println( f, " ", n );
	n = -1;
	__print( f, " ", n );
	n >>>= 1;
	__println( f, " ", n );

	// Some tests on vectors
	[int^2] vx = [1,1];
	[int,int] vy = [0,0];
	int a[*,*] = { { 1, 2 }, { 3, 4 } };
	__println( f, "a@vx=", a@vx, ", a@vy=", a@vy );
	a@vx = 12;
	a@vy = 42;
	__println( f, "a@vx=", a@vx, ", a@vy=", a@vy );

	VnusLib.close( f );
	empty_proc();
	empty_proc1( s0 );
	t1 x = new t1();
	x.x = 3;
	x.y = 3;
	x.z = 3;
	t1.z = 4;
	t.next = null;
    }
}
