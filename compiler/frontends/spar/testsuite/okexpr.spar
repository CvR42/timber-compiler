// This is a test program for the Spar frontend.
// It tests expression.

package spar.testsuite;

class VnusLib {
    <$pure$> static native void writeString( int f, __string s );
    static native void writeLong( int f, long l );
    static native void writeInt( int f, int i );
    static native void writeComplex( int f, complex c );
    static native void writeBoolean( int f, boolean b );
    static native void writeFloat( int f, float r );
}

public class okexpr {
    public static void main()
    {
	boolean b;
	int i, n = 2;
	float x = 0.0f;
	complex c;
	complex c2;
	__string s;
	int f = 1;

	b = false;
	__print( f, "b: ", b );
	b = !b;
	__print( f, " ", b );
	b = false | b;
	__print( f, " ", b );
	b = true & b;
	__println( f, " ", b );
	i = 2;
	__print( f, "i: ", i );
	i = 50-i;
	__print( f, " ", i );
	i = 5+i;
	__print( f, " ", i );
	i = 5*i;
	__print( f, " ", i );
	i = i/12;
	__print( f, " ", i );
	i = -i;
	__print( f, " ", i );
	i = +i;
	__println( f, " ", i );
	__print( f, "n: ", n );
	n = 7;
	__print( f, " ", n );
	n = +n;
	__print( f, " ", n );
	n = 7+n;
	__print( f, " ", n );
	n = n-5;
	__print( f, " ", n );
	n = n*12;
	__print( f, " ", n );
	n = n/13;
	__print( f, " ", n );
	n = n*6;
	__print( f, " ", n );
	n = n/3;
	__println( f, " ", n );
	x = 2.1f;
	__print( f, "x: ", x );
	x = -x;
	__print( f, " ", x );
	x = +x;
	__print( f, " ", x );
	x = 0.7f+x;
	__print( f, " ", x );
	x = x-5e2f;
	__print( f, " ", x );
	x = x*0.12f;
	__print( f, " ", x );
	x = x/0.13f;
	__println( f, " ", x );
	s = "test string";
	__println( f, "s: ", s );
	c = complex ( 2, 3 );
	__print( f, "c: ", c );
	c2 = complex ( 5, 12 );
	__print( f, " ", c );
	c = -c;
	__println( f, " ", c );
	__println( f, "left shifts: int:",1<<2," byte:",((byte) 1)<<2," short:",((short) 1)<<2," long:",1l<<2 );
	__println( f, "right shifts: int:",55>>2," byte:",((byte) 55)>>2," short:",((short) 55)>>2," long:",55l>>2 );
	__println( f, "unsigned right shifts: int:",55>>>2," byte:",((byte) 55)>>>2," short:",((short) 55)>>>2," long:",55l>>>2 );
	__println( f, "shifts of negative numbers: left:",(-11)<<2," right:",(-11)>>2," unsigned right:",(-11)>>>2 );
	__println( f, "bitwise operations: and:", 17 & 18, " or:",17 | 18," xor:",17 ^ 18 );
	__println( f, "boolean operations: and:", true & false, " or:",true | false," xor:",true ^ false );
	__println( f, "bitwise not:", !12," ", ! (-144) );
	__println( f, "boolean not:", !false," ", !true );
	__println( f, "increment and decrement" );
	n = 0;
	__print( f, " ", n );
	n++;
	__print( f, " ", n );
	n++;
	__print( f, " ", n );
	n--;
	__print( f, " ", n );
	n--;
	__print( f, " ", n++ );
	__print( f, " ", n++ );
	__print( f, " ", n-- );
	__print( f, " ", n-- );
	__println( f, " ", n );
	n += 5;
	__print( f, " ", n );
	n -= 1;
	__print( f, " ", n );
	n *= 6;
	__print( f, " ", n );
	n /= 3;
	__print( f, " ", n );
	n %= 1;
	__println( f, " ", n );
	n += 1;
	__println( f, " ", n );
	n <<= 2;
	__print( f, " ", n );
	n >>= 1;
	__println( f, " ", n );
	n = -1;
	__print( f, " ", n );
	n >>>= 1;
	__println( f, " ", n );
	n = 12;
	__print( f, " ", n );
	n |= 3;
	__print( f, " ", n );
	n &= 4;
	__print( f, " ", n );
	n ^= 7;
	__print( f, " ", n );
	n ^= 9;
	__print( f, " ", n );
	n = (n=5)*n;
	__print( f, " ", n );
	n = ++n+2;
	__print( f, " ", n );
	n = --n+2;
	__println( f, " ", n );
	__print( f, "b: ", b );
	b = true;
	__print( f, " ", b );
	b = b && false;
	__print( f, " ", b );
	b = b || true;
	__println( f, " ", b );
    }
}
