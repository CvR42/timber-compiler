.. File: collectassigned.ct
..
.. Inspect a method, and mark all formal parameters and local
.. variables that are never assigned to as 'final'. For formal parameters
.. it is possible to use the ACC_FINAL modifier bit, but for local
.. variables it is necessary to distinguish the ACC_DEDUCED_FINAL
.. and the ACC_FINAL modifier, since otherwise constants that had
.. been deduced to be final would be propagated, in violation of
.. the Java semantics.
..
.. TODO: 
.. - Let the analyzer work for tuples and vectors. For now variables
.. of these types are never deduced to be final.
.. - Extend the analysis to the readonly property of reference variables.
.. - Do final marking of the formal parameter of a catch block.
..
.. Return 'walk' or 'action', depending on the contents of 'actors'
.macro walkername t
.if ${member $t $(actors)}
.return action
.else
.return walker
.endif
.endmacro
..
.. Given an indent 'indent', the name 'var' of the variable that holds
.. the datastructure we're walking on, and a type 't', of that variable,
.. generate a return statement/
.macro generate_walker_return indent var t
$(indent)return;
.endmacro
..
.. Given an indent 'ident' and a type 't', generate a list of local
.. declarations for the walker function of that type.
.macro generate_walker_locals indent var t
.if ${member ${stemname $t} ${typelist}}
$(indent)if( $(var) == $tNIL ){
$(indent)    return;
$(indent)}
.endif
.endmacro
..
.. Given the name 'var' of the variable that holds the datastructure
.. we`re walking on, and the type 't' of that variable, generate a
.. signature for the walker function of the given type.
.macro generate_walker_signature var t
static void collectassigned_$t_walker( const_$t $(var), collectassigned_data *ctx )
.endmacro
..
.. Given the name 'var' of the variable that holds the datastructure
.. we're walking on, and the type 't' of that variable, generate a forward
.. declaration for the walker function of the given type.
.macro generate_walker_declaration var t
static void collectassigned_$t_walker( const_$t $(var), collectassigned_data *ctx );
.endmacro
..
.. Given an indent 'indent', a variable 'var' to walk into, the type of
.. the variable 'type', and the current type of the variable 'nowtype',
.. generate an invokation to an action.
.macro generate_action_call indent var type nowtype
.if ${eq $(type) $(nowtype)}
$(indent)collectassigned_$(type)_action( $(var), ctx );
.else
$(indent)collectassigned_$(type)_action( to_const_$(type)( $(var) ), ctx );
.endif
.endmacro
..
.. Given an indent 'indent', a variable 'var' to walk into, the type of
.. the variable 'type', and the current type of the variable 'nowtype',
.. generate an invokation to a walker.
.macro generate_walker_call indent var type nowtype
.if ${eq $(type) $(nowtype)}
$(indent)collectassigned_$(type)_walker( $(var), ctx );
.else
$(indent)collectassigned_$(type)_walker( to_const_$(type)( $(var) ), ctx );
.endif
.endmacro
..
.. Given an indent 'indent', a variable 'var' to walk into, the type of the
.. variable 'type', and the current type of the variable 'nowtype', generate
.. an invocation to an action or walker.
.macro generate_descent_call indent var type nowtype
.if ${member $(type) $(actors)}
.call generate_action_call "$(indent)" "$(var)" "$(type)" "$(nowtype)"
.else
.call generate_walker_call "$(indent)" "$(var)" "$(type)" "$(nowtype)"
.endif
.endmacro
..
.. For which types are there actions defines?
.set actors
.append actors AssignStatement
.append actors ConstructorInvocationStatement
.append actors FieldInvocationExpression
.append actors FieldInvocationStatement
.append actors MethodInvocation
.append actors OuterSuperConstructorInvocationStatement
.append actors OuterSuperInvocationExpression
.append actors OuterSuperInvocationStatement
.append actors SuperConstructorInvocationStatement
.append actors SuperInvocationExpression
.append actors SuperInvocationStatement
.append actors ThisConstructorInvocationStatement
.append actors TypeInvocationExpression
.append actors TypeInvocationStatement
..
.insert tmcwalk.t
..
.set visit_types ${call calc_treewalk "Block statement_list" "$(actors)"}
..
// ->->-> This is a GENERATED FILE <-<-<-

/* File: collectassigned.c
 *
 * See which variables and formal parameters are never assigned to,
 * and mark them as such.
 *
 * This helps quite a lot in the other analysis of the program.
 */

#include <assert.h>
#include <tmc.h>

#include "defs.h"
#include "tmadmin.h"
#include "global.h"
#include "collectassigned.h"
#include "service.h"

typedef struct str_collectassigned_data {
    tmsymbol_list vars;
    bool invocations;
} collectassigned_data;

.call generate_walker_forwards "$(visit_types)"
#line $[1+${tpllineno}] "${tplfilename}"

/* -------- actors ---------- */

/* Action for type AssignStatement. */
static void collectassigned_AssignStatement_action(
    const_AssignStatement smt,
    collectassigned_data *ctx
)
{
.call generate_walker_call "    " smt AssignStatement AssignStatement
    const_expression lhs = smt->lhs;
    if( lhs->tag == TAGVariableNameExpression ){
	ctx->vars = add_tmsymbol_list(
	    ctx->vars,
	    to_const_VariableNameExpression(lhs)->name->sym
	);
    }
    else if( lhs->tag == TAGVectorSubscriptExpression ){
	const_VectorSubscriptExpression sx = to_const_VectorSubscriptExpression( lhs );
	const_expression vector = sx->vector;

	if( vector->tag == TAGVariableNameExpression ){
	    ctx->vars = add_tmsymbol_list(
		ctx->vars,
		to_const_VariableNameExpression(vector)->name->sym
	    );
	}
    }
    // TODO: SubscriptExpression also deserves attention, since it
    // may also denote assignment to a tuple.
}

.foreach t SuperInvocationExpression ThisConstructorInvocationStatement TypeInvocationExpression TypeInvocationStatement MethodInvocation FieldInvocationStatement FieldInvocationExpression ConstructorInvocationStatement OuterSuperInvocationExpression OuterSuperInvocationStatement OuterSuperConstructorInvocationStatement SuperConstructorInvocationStatement SuperInvocationStatement
/* Action for type $t. */
static void collectassigned_$t_action(
    const_$t smt,
    collectassigned_data *ctx
)
{
.call generate_walker_call "    " smt $t $t
    ctx->invocations = true;
}

.endforeach
/* -------- End of action functions ---------- */

.call generate_walker "$(visit_types)"
#line $[1+${tpllineno}] "${tplfilename}"

/* Given a Block, collect all variables that are possibly assigned to in that
 * block, and all nested blocks.
 */
void collectassigned_Block( const_Block decl, tmsymbol_list *vars, bool *inv )
{
    collectassigned_data the_ctx;
    the_ctx.vars = *vars;
    the_ctx.invocations = *inv;
    collectassigned_data *ctx = &the_ctx;

.call generate_descent_call "    " decl Block Block

    *vars = the_ctx.vars;
    *inv = the_ctx.invocations;
}
