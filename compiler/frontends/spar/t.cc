/* This code was generated by the ParTool Vnus Backend. */

#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>
#include <vnuscomplex.h>
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>
#include "vnusstio.h"
#include "vnusbaseclass.h"
#include "arrayalloc.h"
#include "shape.h"
#include "vnusrtl.h"
#include "arrayboundviolated.h"
#include "notnullassert.h"
#include <spar-rtl.h>

int vnus_argc;
char **vnus_argv;
class record1;
class record0;
class record2;
class record3;
class record4;
class record6;
class record7;
class record8;
class record5;

class record1 : public VnusBase {
};

class record0: public record1 {
public:
    record0()
     
    {}
    record0( record0 *p_f0, VnusInt p_f1, record6 ***p_f2, VnusInt p_f3, VnusInt p_f4 ):
	field0(p_f0), field1(p_f1), field2(p_f2), field3(p_f3), field4(p_f4)
    {}
    record0 *field0;
    VnusInt field1;
    record6 ***field2;
    VnusInt field3;
    VnusInt field4;
};

class record2: public record1 {
public:
    record2()
     
    {}
    record2( VnusString p_f0, VnusInt p_f1, VnusInt p_f2, record1 *p_f3, record1 *p_f4, VnusInt p_f5, void (*p_f6)(record6 *), void (*p_f7)(record6 *), void (*p_f8)(record6 *,record6 *,record6 *), record6 *(*p_f9)(record6 *,record6 *) ):
	field0(p_f0), field1(p_f1), field2(p_f2), field3(p_f3), field4(p_f4), field5(p_f5), field6(p_f6), field7(p_f7), field8(p_f8), field9(p_f9)
    {}
    VnusString field0;
    VnusInt field1;
    VnusInt field2;
    record1 *field3;
    record1 *field4;
    VnusInt field5;
    void (*field6)(record6 *);
    void (*field7)(record6 *);
    void (*field8)(record6 *,record6 *,record6 *);
    record6 *(*field9)(record6 *,record6 *);
};

class record3: public record1 {
public:
    record3()
     
    {}
    record3( record2 *p_f0 ):
	field0(p_f0)
    {}
    record2 *field0;
};

class record4: public record1 {
public:
    record4()
     
    {}
    record4( record3 *p_f0, record5 *p_f1 ):
	field0(p_f0), field1(p_f1)
    {}
    record3 *field0;
    record5 *field1;
};

class record6: public record1 {
public:
    record6()
     
    {}
    record6( record3 *p_f0, record5 *p_f1, record6 *p_f2 ):
	field0(p_f0), field1(p_f1), field2(p_f2)
    {}
    record3 *field0;
    record5 *field1;
    record6 *field2;
};

class record7: public record1 {
public:
    record7()
     
    {}
    record7( record3 *p_f0, record5 *p_f1, record6 *p_f2, record6 *p_f3, record8 *p_f4 ):
	field0(p_f0), field1(p_f1), field2(p_f2), field3(p_f3), field4(p_f4)
    {}
    record3 *field0;
    record5 *field1;
    record6 *field2;
    record6 *field3;
    record8 *field4;
};

class record8: public record1 {
public:
    record8()
     
    {}
    record8( record3 *p_f0, record5 *p_f1, record6 *p_f2, ShapeD1<VnusChar> *p_f3, VnusInt p_f4, VnusInt p_f5, VnusInt p_f6, VnusBoolean p_f7 ):
	field0(p_f0), field1(p_f1), field2(p_f2), field3(p_f3), field4(p_f4), field5(p_f5), field6(p_f6), field7(p_f7)
    {}
    record3 *field0;
    record5 *field1;
    record6 *field2;
    ShapeD1<VnusChar> *field3;
    VnusInt field4;
    VnusInt field5;
    VnusInt field6;
    VnusBoolean field7;
};

class record5: public record1 {
public:
    record5()
     
    {}
    record5( record1 *p_f0 ):
	field0(p_f0)
    {}
    record1 *field0;
};

typedef void proc0(record6 *);
typedef void proc1(record6 *,record6 *,record6 *);
typedef record6 * fn0(record6 *,record6 *);
void t_main_0( void );
// extern VnusInt Java_spar_compiler_Introspection_getClassId( record6 * obj_0 );
// extern VnusString Java_spar_compiler_Introspection_getClassName( VnusInt id_2 );
// extern void Java_spar_compiler_DefaultExceptionHandler_exit( VnusString s_1 );
void spar_compiler_DefaultExceptionHandler_handler_0( record7 * x_0 );
// extern record7 * Java_java_lang_Throwable_fillInStackTrace( record7 * this_7 );
void spar_compiler_Builder_bound_0( void );
void spar_compiler_Builder_outOfMemory_0( void );
void spar_compiler_Builder_nul_0( void );
// extern void Java_spar_compiler_GC_resetActiveBlockMarks( void );
// extern void Java_spar_compiler_GC_clearRefStackOverflow( void );
// extern record6 * Java_spar_compiler_GC_firstReference( void );
// extern void Java_spar_compiler_GC_pushRef( record6 * obj_2 );
// extern record6 * Java_spar_compiler_GC_popRef( void );
// extern void Java_spar_compiler_GC_invokeMarkingMethod( record6 * obj_4 );
// extern record6 * Java_spar_compiler_GC_nextReference( void );
// extern VnusBoolean Java_spar_compiler_GC_wasRefStackOverflow( void );
// extern record6 * Java_spar_compiler_GC_firstBlock( void );
// extern VnusBoolean Java_spar_compiler_GC_getMark( record6 * obj_6 );
// extern record6 * Java_spar_compiler_GC_nextBlock( void );
// extern void Java_spar_compiler_GC_invokeFinalize( record6 * obj_8 );
// extern record6 * Java_spar_compiler_GC_deleteBlock( void );
VnusInt spar_compiler_GC_collect_0( void );
void t_mark0( record6 * markthis0 );
inline record6 * __init_t0( record6 * this0 );
void Throwable_mark0( record7 * markthis1 );
void ser_write1( record6 * writer1, record6 * handlebase0, record7 * data0 );
record7 * ser_read1( record6 * reader0, record6 * handlebase1 );
inline record7 * __init_Throwable0( record7 * this1 );
void String_mark0( record8 * markthis2 );
void ser_write0( record6 * writer2, record6 * handlebase2, record8 * data1 );
record8 * ser_read0( record6 * reader1, record6 * handlebase3 );
inline record8 * __init_String0( record8 * this2 );
void Object_mark0( record6 * markthis3 );
inline record6 * __init_Object0( record6 * this3 );
void DefaultExceptionHandler_mark0( record6 * markthis4 );
inline record6 * __init_DefaultExceptionHandler0( record6 * this4 );
void Exception_mark0( record7 * markthis5 );
void ser_write2( record6 * writer3, record6 * handlebase4, record7 * data2 );
record7 * ser_read2( record6 * reader2, record6 * handlebase5 );
inline record7 * __init_Exception0( record7 * this5 );
void Introspection_mark0( record6 * markthis6 );
inline record6 * __init_Introspection0( record6 * this6 );
void Builder_mark1( record6 * markthis7 );
inline record6 * __init_Builder1( record6 * this7 );
void ArrayIndexOutOfBoundsException_mark0( record7 * markthis8 );
void ser_write5( record6 * writer4, record6 * handlebase6, record7 * data3 );
record7 * ser_read5( record6 * reader3, record6 * handlebase7 );
inline record7 * __init_ArrayIndexOutOfBoundsException0( record7 * this8 );
void IndexOutOfBoundsException_mark1( record7 * markthis9 );
void ser_write4( record6 * writer5, record6 * handlebase8, record7 * data4 );
record7 * ser_read4( record6 * reader4, record6 * handlebase9 );
inline record7 * __init_IndexOutOfBoundsException0( record7 * this9 );
void RuntimeException_mark0( record7 * markthisa );
void ser_write3( record6 * writer6, record6 * handlebasea, record7 * data5 );
record7 * ser_read3( record6 * reader5, record6 * handlebaseb );
inline record7 * __init_RuntimeException0( record7 * thisa );
void OutOfMemoryError_mark0( record7 * markthisb );
void ser_write8( record6 * writer7, record6 * handlebasec, record7 * data6 );
record7 * ser_read8( record6 * reader6, record6 * handlebased );
inline record7 * __init_OutOfMemoryError0( record7 * thisb );
void VirtualMachineError_mark0( record7 * markthisc );
void ser_write7( record6 * writer8, record6 * handlebasee, record7 * data7 );
record7 * ser_read7( record6 * reader7, record6 * handlebasef );
inline record7 * __init_VirtualMachineError0( record7 * thisc );
void Error_mark0( record7 * markthisd );
void ser_write6( record6 * writer9, record6 * handlebase10, record7 * data8 );
record7 * ser_read6( record6 * reader8, record6 * handlebase11 );
inline record7 * __init_Error0( record7 * thisd );
void NullPointerException_mark0( record7 * markthise );
void ser_write9( record6 * writera, record6 * handlebase12, record7 * data9 );
record7 * ser_read9( record6 * reader9, record6 * handlebase13 );
inline record7 * __init_NullPointerException1( record7 * thise );
void GC_mark0( record6 * markthisf );
inline record6 * __init_GC0( record6 * thisf );
// extern void ser_writeBoolean( record6 * writerb, record6 * handlebase14, VnusBoolean dataa );
// extern void ser_writeChar( record6 * writerc, record6 * handlebase15, VnusChar datab );
// extern void ser_writeByte( record6 * writerd, record6 * handlebase16, VnusByte datac );
// extern void ser_writeShort( record6 * writere, record6 * handlebase17, VnusShort datad );
// extern void ser_writeInt( record6 * writerf, record6 * handlebase18, VnusInt datae );
// extern void ser_writeLong( record6 * writer10, record6 * handlebase19, VnusLong dataf );
// extern void ser_writeFloat( record6 * writer11, record6 * handlebase1a, VnusFloat data10 );
// extern void ser_writeDouble( record6 * writer12, record6 * handlebase1b, VnusDouble data11 );
// extern void ser_writeComplex( record6 * writer13, record6 * handlebase1c, VnusComplex data12 );
// extern void ser_writeString( record6 * writer14, record6 * handlebase1d, VnusString data13 );
// extern void ser_writeObject( record6 * writer15, record6 * handlebase1e, record6 * data14 );
// extern void ser_writeArray( record6 * writer16, record6 * handlebase1f, record6 * data15 );
// extern VnusBoolean ser_readBoolean( record6 * readera, record6 * handlebase20 );
// extern VnusChar ser_readChar( record6 * readerb, record6 * handlebase21 );
// extern VnusByte ser_readByte( record6 * readerc, record6 * handlebase22 );
// extern VnusShort ser_readShort( record6 * readerd, record6 * handlebase23 );
// extern VnusInt ser_readInt( record6 * readere, record6 * handlebase24 );
// extern VnusLong ser_readLong( record6 * readerf, record6 * handlebase25 );
// extern VnusFloat ser_readFloat( record6 * reader10, record6 * handlebase26 );
// extern VnusDouble ser_readDouble( record6 * reader11, record6 * handlebase27 );
// extern VnusComplex ser_readComplex( record6 * reader12, record6 * handlebase28 );
// extern VnusString ser_readString( record6 * reader13, record6 * handlebase29 );
// extern record6 * ser_readObject( record6 * reader14, record6 * handlebase2a );
// extern record6 * ser_readArray( record6 * reader15, record6 * handlebase2b );
void VnusEventArrayBoundViolated( void );
void VnusEventOutOfMemory( void );
void VnusEventNullPointer( void );
VnusInt VnusEventGarbageCollect( void );
/* ------ end of forward function declarations ------ */
extern record0 __gc_globallink;
extern record0 *__gc_reflink_chain;
extern record2 t_introspection0;
extern record2 Serializable_introspection0;
extern record2 Throwable_introspection0;
extern record2 String_introspection0;
extern record2 Object_introspection1;
extern record2 DefaultExceptionHandler_introspection0;
extern record2 Exception_introspection0;
extern record2 Introspection_introspection0;
extern record2 Builder_introspection0;
extern record2 ArrayIndexOutOfBoundsException_introspection0;
extern record2 IndexOutOfBoundsException_introspection0;
extern record2 RuntimeException_introspection0;
extern record2 OutOfMemoryError_introspection0;
extern record2 VirtualMachineError_introspection0;
extern record2 Error_introspection0;
extern record2 NullPointerException_introspection0;
extern record2 GC_introspection0;
extern record2 *__spar_rte_typelist[17];
extern VnusInt __spar_rte_typelist_length;
extern record3 t_vtable0;
extern record5 ivtable0;
extern record3 Throwable_vtable0;
extern record1 ivtab0;
extern record5 ivtable2d;
extern record3 String_vtable0;
extern record1 ivtab1;
extern record5 ivtable66;
extern record3 Object_vtable0;
extern record5 ivtable67;
extern record3 DefaultExceptionHandler_vtable1;
extern record5 ivtable68;
extern record3 Exception_vtable0;
extern record1 ivtab2;
extern record5 ivtable69;
extern record3 Introspection_vtable0;
extern record5 ivtable6a;
extern record3 Builder_vtable0;
extern record5 ivtable6b;
extern record3 ArrayIndexOutOfBoundsException_vtable0;
extern record1 ivtab3;
extern record5 ivtable6c;
extern record3 IndexOutOfBoundsException_vtable0;
extern record1 ivtab4;
extern record5 ivtable6d;
extern record3 RuntimeException_vtable0;
extern record1 ivtab5;
extern record5 ivtable6e;
extern record3 OutOfMemoryError_vtable0;
extern record1 ivtab6;
extern record5 ivtable6f;
extern record3 VirtualMachineError_vtable0;
extern record1 ivtab7;
extern record5 ivtable70;
extern record3 Error_vtable0;
extern record1 ivtab8;
extern record5 ivtable71;
extern record3 NullPointerException_vtable0;
extern record1 ivtab9;
extern record5 ivtable72;
extern record3 GC_vtable0;
extern record5 ivtable73;
/* ------ end of forward variable declarations ------ */
record0 __gc_globallink;
record0 *__gc_reflink_chain;
record2 t_introspection0 = record2( "t", 3L, 3L, (record1 *) &t_vtable0, (record1 *) &ivtable0, 1L, (proc0 *) &t_mark0, (proc0 *) NULL, (proc1 *) NULL, (fn0 *) NULL );
record2 Serializable_introspection0 = record2( "java.io.Serializable", 0L, 0L, (record1 *) NULL, (record1 *) NULL, 1025L, (proc0 *) NULL, (proc0 *) NULL, (proc1 *) NULL, (fn0 *) NULL );
record2 Throwable_introspection0 = record2( "java.lang.Throwable", 5L, 13L, (record1 *) &Throwable_vtable0, (record1 *) &ivtable2d, 1L, (proc0 *) &Throwable_mark0, (proc0 *) NULL, (proc1 *) &ser_write1, (fn0 *) &ser_read1 );
record2 String_introspection0 = record2( "java.lang.String", 2L, 2L, (record1 *) &String_vtable0, (record1 *) &ivtable66, 17L, (proc0 *) &String_mark0, (proc0 *) NULL, (proc1 *) &ser_write0, (fn0 *) &ser_read0 );
record2 Object_introspection1 = record2( "java.lang.Object", 1L, 16L, (record1 *) &Object_vtable0, (record1 *) &ivtable67, 1L, (proc0 *) &Object_mark0, (proc0 *) NULL, (proc1 *) NULL, (fn0 *) NULL );
record2 DefaultExceptionHandler_introspection0 = record2( "spar.compiler.DefaultExceptionHandler", 4L, 4L, (record1 *) &DefaultExceptionHandler_vtable1, (record1 *) &ivtable68, 17L, (proc0 *) &DefaultExceptionHandler_mark0, (proc0 *) NULL, (proc1 *) NULL, (fn0 *) NULL );
record2 Exception_introspection0 = record2( "java.lang.Exception", 6L, 10L, (record1 *) &Exception_vtable0, (record1 *) &ivtable69, 1L, (proc0 *) &Exception_mark0, (proc0 *) NULL, (proc1 *) &ser_write2, (fn0 *) &ser_read2 );
record2 Introspection_introspection0 = record2( "spar.compiler.Introspection", 14L, 14L, (record1 *) &Introspection_vtable0, (record1 *) &ivtable6a, 17L, (proc0 *) &Introspection_mark0, (proc0 *) NULL, (proc1 *) NULL, (fn0 *) NULL );
record2 Builder_introspection0 = record2( "spar.compiler.Builder", 15L, 15L, (record1 *) &Builder_vtable0, (record1 *) &ivtable6b, 17L, (proc0 *) &Builder_mark1, (proc0 *) NULL, (proc1 *) NULL, (fn0 *) NULL );
record2 ArrayIndexOutOfBoundsException_introspection0 = record2( "java.lang.ArrayIndexOutOfBoundsException", 9L, 9L, (record1 *) &ArrayIndexOutOfBoundsException_vtable0, (record1 *) &ivtable6c, 1L, (proc0 *) &ArrayIndexOutOfBoundsException_mark0, (proc0 *) NULL, (proc1 *) &ser_write5, (fn0 *) &ser_read5 );
record2 IndexOutOfBoundsException_introspection0 = record2( "java.lang.IndexOutOfBoundsException", 8L, 9L, (record1 *) &IndexOutOfBoundsException_vtable0, (record1 *) &ivtable6d, 1L, (proc0 *) &IndexOutOfBoundsException_mark1, (proc0 *) NULL, (proc1 *) &ser_write4, (fn0 *) &ser_read4 );
record2 RuntimeException_introspection0 = record2( "java.lang.RuntimeException", 7L, 10L, (record1 *) &RuntimeException_vtable0, (record1 *) &ivtable6e, 1L, (proc0 *) &RuntimeException_mark0, (proc0 *) NULL, (proc1 *) &ser_write3, (fn0 *) &ser_read3 );
record2 OutOfMemoryError_introspection0 = record2( "java.lang.OutOfMemoryError", 13L, 13L, (record1 *) &OutOfMemoryError_vtable0, (record1 *) &ivtable6f, 1L, (proc0 *) &OutOfMemoryError_mark0, (proc0 *) NULL, (proc1 *) &ser_write8, (fn0 *) &ser_read8 );
record2 VirtualMachineError_introspection0 = record2( "java.lang.VirtualMachineError", 12L, 13L, (record1 *) &VirtualMachineError_vtable0, (record1 *) &ivtable70, 1025L, (proc0 *) &VirtualMachineError_mark0, (proc0 *) NULL, (proc1 *) &ser_write7, (fn0 *) &ser_read7 );
record2 Error_introspection0 = record2( "java.lang.Error", 11L, 13L, (record1 *) &Error_vtable0, (record1 *) &ivtable71, 1L, (proc0 *) &Error_mark0, (proc0 *) NULL, (proc1 *) &ser_write6, (fn0 *) &ser_read6 );
record2 NullPointerException_introspection0 = record2( "java.lang.NullPointerException", 10L, 10L, (record1 *) &NullPointerException_vtable0, (record1 *) &ivtable72, 1L, (proc0 *) &NullPointerException_mark0, (proc0 *) NULL, (proc1 *) &ser_write9, (fn0 *) &ser_read9 );
record2 GC_introspection0 = record2( "spar.compiler.GC", 16L, 16L, (record1 *) &GC_vtable0, (record1 *) &ivtable73, 17L, (proc0 *) &GC_mark0, (proc0 *) NULL, (proc1 *) NULL, (fn0 *) NULL );
record2 *__spar_rte_typelist[17] = { &t_introspection0, &Serializable_introspection0, &Throwable_introspection0, &String_introspection0, &Object_introspection1, &DefaultExceptionHandler_introspection0, &Exception_introspection0, &Introspection_introspection0, &Builder_introspection0, &ArrayIndexOutOfBoundsException_introspection0, &IndexOutOfBoundsException_introspection0, &RuntimeException_introspection0, &OutOfMemoryError_introspection0, &VirtualMachineError_introspection0, &Error_introspection0, &NullPointerException_introspection0, &GC_introspection0 };
VnusInt __spar_rte_typelist_length = 17L;
record3 t_vtable0 = record3( &t_introspection0 );
record5 ivtable0 = record5( (record1 *) NULL );
record3 Throwable_vtable0 = record3( &Throwable_introspection0 );
record1 ivtab0 = record1(  );
record5 ivtable2d = record5( &ivtab0 );
record3 String_vtable0 = record3( &String_introspection0 );
record1 ivtab1 = record1(  );
record5 ivtable66 = record5( &ivtab1 );
record3 Object_vtable0 = record3( &Object_introspection1 );
record5 ivtable67 = record5( (record1 *) NULL );
record3 DefaultExceptionHandler_vtable1 = record3( &DefaultExceptionHandler_introspection0 );
record5 ivtable68 = record5( (record1 *) NULL );
record3 Exception_vtable0 = record3( &Exception_introspection0 );
record1 ivtab2 = record1(  );
record5 ivtable69 = record5( &ivtab2 );
record3 Introspection_vtable0 = record3( &Introspection_introspection0 );
record5 ivtable6a = record5( (record1 *) NULL );
record3 Builder_vtable0 = record3( &Builder_introspection0 );
record5 ivtable6b = record5( (record1 *) NULL );
record3 ArrayIndexOutOfBoundsException_vtable0 = record3( &ArrayIndexOutOfBoundsException_introspection0 );
record1 ivtab3 = record1(  );
record5 ivtable6c = record5( &ivtab3 );
record3 IndexOutOfBoundsException_vtable0 = record3( &IndexOutOfBoundsException_introspection0 );
record1 ivtab4 = record1(  );
record5 ivtable6d = record5( &ivtab4 );
record3 RuntimeException_vtable0 = record3( &RuntimeException_introspection0 );
record1 ivtab5 = record1(  );
record5 ivtable6e = record5( &ivtab5 );
record3 OutOfMemoryError_vtable0 = record3( &OutOfMemoryError_introspection0 );
record1 ivtab6 = record1(  );
record5 ivtable6f = record5( &ivtab6 );
record3 VirtualMachineError_vtable0 = record3( &VirtualMachineError_introspection0 );
record1 ivtab7 = record1(  );
record5 ivtable70 = record5( &ivtab7 );
record3 Error_vtable0 = record3( &Error_introspection0 );
record1 ivtab8 = record1(  );
record5 ivtable71 = record5( &ivtab8 );
record3 NullPointerException_vtable0 = record3( &NullPointerException_introspection0 );
record1 ivtab9 = record1(  );
record5 ivtable72 = record5( &ivtab9 );
record3 GC_vtable0 = record3( &GC_introspection0 );
record5 ivtable73 = record5( (record1 *) NULL );

void t_main_0( void )
{
    {
	// Scope: scope0
	ShapeD1<VnusInt> *a_0 = (ShapeD1<VnusInt> *) NULL;
	ShapeD1<VnusInt> *arr0_1 = (ShapeD1<VnusInt> *) NULL;
	record0 link0;

	link0.field0 = __gc_reflink_chain;
	link0.field1 = 2L;
	// Scope: scope2
	record6 **array0[2] = { (record6 * *) &a_0, (record6 * *) &arr0_1 };

	link0.field2 = (record6 * * *) array0;
	link0.field3 = 10000L;
	link0.field4 = 1917976149L;
	__gc_reflink_chain = &link0;
	arr0_1 = new ShapeD1<VnusInt>( (VnusBase::markfntype) NULL, 3L );
	(*arr0_1)[0L] = 1L;
	(*arr0_1)[1L] = 2L;
	(*arr0_1)[2L] = 3L;
	a_0 = arr0_1;
	{
	    // Scope: scope1
	    VnusInt v_0;

	    {
		// Scope: scope1e
		VnusInt retvar1;

		{
		    // Scope: scope1c
		    VnusInt retvar00;

		    if( (VnusIsUpperBoundViolated(0L,(*a_0).GetSize0())||VnusIsUpperBoundViolated(1L,(*a_0).GetSize0())) )
		    {
			goto bounds0;
		    }
		    retvar00 = ((*a_0)[0L]+(*a_0)[1L]);
		    retvar1 = retvar00;
		}
		v_0 = retvar1;
	    }
	}
	return;
    }
bounds0:
    VnusEventArrayBoundViolated();
}

void spar_compiler_DefaultExceptionHandler_handler_0( record7 * x_0 )
{
    // Scope: scope3
    VnusInt id_1;

    id_1 = (VnusInt) Java_spar_compiler_Introspection_getClassId( (record6 *) x_0 );
    {
	// Scope: scope4
	VnusString s_0;

	s_0 = (VnusString) Java_spar_compiler_Introspection_getClassName( id_1 );
	Java_spar_compiler_DefaultExceptionHandler_exit( s_0 );
    }
}

void spar_compiler_Builder_bound_0( void )
{
    // Scope: scope5
    record7 *breakout1_0 = (record7 *) NULL;
    record0 link1;

    link1.field0 = __gc_reflink_chain;
    link1.field1 = 1L;
    // Scope: scope6
    record6 **array1[1] = { (record6 * *) &breakout1_0 };

    link1.field2 = (record6 * * *) array1;
    link1.field3 = 10001L;
    link1.field4 = 1917976149L;
    __gc_reflink_chain = &link1;
    breakout1_0 = __init_ArrayIndexOutOfBoundsException0( new record7 );
    ((record7 *) (record7 *) (record7 *) (record7 *) breakout1_0)->field3 = (record6 *) NULL;
    ((record7 *) (record7 *) (record7 *) (record7 *) breakout1_0)->field4 = (record8 *) NULL;
    ((record7 *) (record7 *) (record7 *) (record7 *) breakout1_0)->field4 = (record8 *) NULL;
    {
	// Scope: scope38
	record7 *x_100100 = (record7 *) NULL;
	record0 link2;

	link2.field0 = &link1;
	link2.field1 = 1L;
	// Scope: scope7
	record6 **array2[1] = { (record6 * *) &x_100100 };

	link2.field2 = (record6 * * *) array2;
	link2.field3 = 10002L;
	link2.field4 = 1917976149L;
	__gc_reflink_chain = &link2;
	x_100100 = (record7 *) Java_java_lang_Throwable_fillInStackTrace( (record7 *) (record7 *) (record7 *) (record7 *) breakout1_0 );
    }
    throw breakout1_0;
}

void spar_compiler_Builder_outOfMemory_0( void )
{
    // Scope: scopef
    record7 *breakout2_0 = (record7 *) NULL;
    record0 link3;

    link3.field0 = __gc_reflink_chain;
    link3.field1 = 1L;
    // Scope: scope8
    record6 **array3[1] = { (record6 * *) &breakout2_0 };

    link3.field2 = (record6 * * *) array3;
    link3.field3 = 10003L;
    link3.field4 = 1917976149L;
    __gc_reflink_chain = &link3;
    breakout2_0 = __init_OutOfMemoryError0( new record7 );
    ((record7 *) (record7 *) (record7 *) breakout2_0)->field3 = (record6 *) NULL;
    ((record7 *) (record7 *) (record7 *) breakout2_0)->field4 = (record8 *) NULL;
    ((record7 *) (record7 *) (record7 *) breakout2_0)->field4 = (record8 *) NULL;
    {
	// Scope: scope4f
	record7 *x_11000 = (record7 *) NULL;
	record0 link4;

	link4.field0 = &link3;
	link4.field1 = 1L;
	// Scope: scope9
	record6 **array4[1] = { (record6 * *) &x_11000 };

	link4.field2 = (record6 * * *) array4;
	link4.field3 = 10004L;
	link4.field4 = 1917976149L;
	__gc_reflink_chain = &link4;
	x_11000 = (record7 *) Java_java_lang_Throwable_fillInStackTrace( (record7 *) (record7 *) (record7 *) breakout2_0 );
    }
    throw breakout2_0;
}

void spar_compiler_Builder_nul_0( void )
{
    // Scope: scope13
    record7 *breakout3_0 = (record7 *) NULL;
    record0 link5;

    link5.field0 = __gc_reflink_chain;
    link5.field1 = 1L;
    // Scope: scopea
    record6 **array5[1] = { (record6 * *) &breakout3_0 };

    link5.field2 = (record6 * * *) array5;
    link5.field3 = 10005L;
    link5.field4 = 1917976149L;
    __gc_reflink_chain = &link5;
    breakout3_0 = __init_NullPointerException1( new record7 );
    ((record7 *) (record7 *) (record7 *) breakout3_0)->field3 = (record6 *) NULL;
    ((record7 *) (record7 *) (record7 *) breakout3_0)->field4 = (record8 *) NULL;
    ((record7 *) (record7 *) (record7 *) breakout3_0)->field4 = (record8 *) NULL;
    {
	// Scope: scope5c
	record7 *x_10020 = (record7 *) NULL;
	record0 link6;

	link6.field0 = &link5;
	link6.field1 = 1L;
	// Scope: scopeb
	record6 **array6[1] = { (record6 * *) &x_10020 };

	link6.field2 = (record6 * * *) array6;
	link6.field3 = 10006L;
	link6.field4 = 1917976149L;
	__gc_reflink_chain = &link6;
	x_10020 = (record7 *) Java_java_lang_Throwable_fillInStackTrace( (record7 *) (record7 *) (record7 *) breakout3_0 );
    }
    throw breakout3_0;
}

VnusInt spar_compiler_GC_collect_0( void )
{
    Java_spar_compiler_GC_resetActiveBlockMarks();
    Java_spar_compiler_GC_clearRefStackOverflow();
    {
	// Scope: scope64
	record6 *obj_10;

	obj_10 = (record6 *) Java_spar_compiler_GC_firstReference();
	while( (obj_10!=(record6 *) NULL) )
	{
	    Java_spar_compiler_GC_pushRef( obj_10 );
	    {
		// Scope: scope63
		record6 *obj_311;

		obj_311 = (record6 *) Java_spar_compiler_GC_popRef();
		while( (obj_311!=(record6 *) NULL) )
		{
		    Java_spar_compiler_GC_invokeMarkingMethod( obj_311 );
		    obj_311 = (record6 *) Java_spar_compiler_GC_popRef();
		}
	    }
	    obj_10 = (record6 *) Java_spar_compiler_GC_nextReference();
	}
    }
    {
	// Scope: scope17
	VnusBoolean whilecond56_0;

	whilecond56_0 = (VnusBoolean) Java_spar_compiler_GC_wasRefStackOverflow();
	while( whilecond56_0 )
	{
	    Java_spar_compiler_GC_clearRefStackOverflow();
	    {
		// Scope: scope66
		record6 *obj_50;

		obj_50 = (record6 *) Java_spar_compiler_GC_firstBlock();
		while( (obj_50!=(record6 *) NULL) )
		{
		    if( (VnusBoolean) Java_spar_compiler_GC_getMark( obj_50 ) )
		    {
			Java_spar_compiler_GC_invokeMarkingMethod( obj_50 );
			{
			    // Scope: scope65
			    record6 *obj_320;

			    obj_320 = (record6 *) Java_spar_compiler_GC_popRef();
			    while( (obj_320!=(record6 *) NULL) )
			    {
				Java_spar_compiler_GC_invokeMarkingMethod( obj_320 );
				obj_320 = (record6 *) Java_spar_compiler_GC_popRef();
			    }
			}
		    }
		    obj_50 = (record6 *) Java_spar_compiler_GC_nextBlock();
		}
	    }
	    whilecond56_0 = (VnusBoolean) Java_spar_compiler_GC_wasRefStackOverflow();
	}
	{
	    // Scope: scope69
	    VnusInt retvar2;

	    {
		// Scope: scope68
		record6 *obj_70;

		obj_70 = (record6 *) Java_spar_compiler_GC_firstBlock();
		{
		    // Scope: scope67
		    VnusInt delcount_01 = 0L;

		    while( (obj_70!=(record6 *) NULL) )
		    {
			if( (!(VnusBoolean) Java_spar_compiler_GC_getMark( obj_70 )) )
			{
			    Java_spar_compiler_GC_invokeFinalize( obj_70 );
			    obj_70 = (record6 *) Java_spar_compiler_GC_deleteBlock();
			    delcount_01 += 1L;
			}
			else
			{
			    obj_70 = (record6 *) Java_spar_compiler_GC_nextBlock();
			}
		    }
		    retvar2 = delcount_01;
		}
	    }
	    return retvar2;
	}
    }
}

void t_mark0( record6 * markthis0 )
{
    // Scope: markscope0

}

inline record6 * __init_t0( record6 * this0 )
{
    // Scope: scope6a

    this0->field0 = (record3 *) &t_vtable0;
    this0->field1 = &ivtable0;
    return this0;
}

void Throwable_mark0( record7 * markthis1 )
{
    // Scope: markscope1

    Java_spar_compiler_GC_pushRef( (record6 *) markthis1->field3 );
    Java_spar_compiler_GC_pushRef( (record6 *) markthis1->field4 );
}

void ser_write1( record6 * writer1, record6 * handlebase0, record7 * data0 )
{
    // Scope: ser_write_scope0

    ser_writeObject( writer1, handlebase0, (record6 *) data0->field4 );
}

record7 * ser_read1( record6 * reader0, record6 * handlebase1 )
{
    // Scope: scope6b

    return (record7 *) NULL;
}

inline record7 * __init_Throwable0( record7 * this1 )
{
    // Scope: scope6c

    this1->field0 = (record3 *) &Throwable_vtable0;
    this1->field1 = &ivtable2d;
    return this1;
}

void String_mark0( record8 * markthis2 )
{
    // Scope: markscope2

    Java_spar_compiler_GC_pushRef( (record6 *) markthis2->field3 );
}

void ser_write0( record6 * writer2, record6 * handlebase2, record8 * data1 )
{
    // Scope: ser_write_scope1

    ser_writeArray( writer2, handlebase2, (record6 *) data1->field3 );
    ser_writeInt( writer2, handlebase2, data1->field4 );
    ser_writeInt( writer2, handlebase2, data1->field5 );
    ser_writeInt( writer2, handlebase2, data1->field6 );
    ser_writeBoolean( writer2, handlebase2, data1->field7 );
}

record8 * ser_read0( record6 * reader1, record6 * handlebase3 )
{
    // Scope: scope6d

    return (record8 *) NULL;
}

inline record8 * __init_String0( record8 * this2 )
{
    // Scope: scope6e

    this2->field0 = (record3 *) &String_vtable0;
    this2->field1 = &ivtable66;
    return this2;
}

void Object_mark0( record6 * markthis3 )
{
    // Scope: markscope3

}

inline record6 * __init_Object0( record6 * this3 )
{
    // Scope: scope6f

    this3->field0 = (record3 *) &Object_vtable0;
    this3->field1 = &ivtable67;
    return this3;
}

void DefaultExceptionHandler_mark0( record6 * markthis4 )
{
    // Scope: markscope4

}

inline record6 * __init_DefaultExceptionHandler0( record6 * this4 )
{
    // Scope: scope70

    this4->field0 = (record3 *) &DefaultExceptionHandler_vtable1;
    this4->field1 = &ivtable68;
    return this4;
}

void Exception_mark0( record7 * markthis5 )
{
    // Scope: markscope5

    Java_spar_compiler_GC_pushRef( (record6 *) markthis5->field3 );
    Java_spar_compiler_GC_pushRef( (record6 *) markthis5->field4 );
}

void ser_write2( record6 * writer3, record6 * handlebase4, record7 * data2 )
{
    // Scope: ser_write_scope2

    ser_writeObject( writer3, handlebase4, (record6 *) data2->field4 );
}

record7 * ser_read2( record6 * reader2, record6 * handlebase5 )
{
    // Scope: scope71

    return (record7 *) NULL;
}

inline record7 * __init_Exception0( record7 * this5 )
{
    // Scope: scope72

    this5->field0 = (record3 *) &Exception_vtable0;
    this5->field1 = &ivtable69;
    return this5;
}

void Introspection_mark0( record6 * markthis6 )
{
    // Scope: markscope6

}

inline record6 * __init_Introspection0( record6 * this6 )
{
    // Scope: scope73

    this6->field0 = (record3 *) &Introspection_vtable0;
    this6->field1 = &ivtable6a;
    return this6;
}

void Builder_mark1( record6 * markthis7 )
{
    // Scope: markscope7

}

inline record6 * __init_Builder1( record6 * this7 )
{
    // Scope: scope74

    this7->field0 = (record3 *) &Builder_vtable0;
    this7->field1 = &ivtable6b;
    return this7;
}

void ArrayIndexOutOfBoundsException_mark0( record7 * markthis8 )
{
    // Scope: markscope8

    Java_spar_compiler_GC_pushRef( (record6 *) markthis8->field3 );
    Java_spar_compiler_GC_pushRef( (record6 *) markthis8->field4 );
}

void ser_write5( record6 * writer4, record6 * handlebase6, record7 * data3 )
{
    // Scope: ser_write_scope3

    ser_writeObject( writer4, handlebase6, (record6 *) data3->field4 );
}

record7 * ser_read5( record6 * reader3, record6 * handlebase7 )
{
    // Scope: scope75

    return (record7 *) NULL;
}

inline record7 * __init_ArrayIndexOutOfBoundsException0( record7 * this8 )
{
    // Scope: scope76

    this8->field0 = (record3 *) &ArrayIndexOutOfBoundsException_vtable0;
    this8->field1 = &ivtable6c;
    return this8;
}

void IndexOutOfBoundsException_mark1( record7 * markthis9 )
{
    // Scope: markscope9

    Java_spar_compiler_GC_pushRef( (record6 *) markthis9->field3 );
    Java_spar_compiler_GC_pushRef( (record6 *) markthis9->field4 );
}

void ser_write4( record6 * writer5, record6 * handlebase8, record7 * data4 )
{
    // Scope: ser_write_scope4

    ser_writeObject( writer5, handlebase8, (record6 *) data4->field4 );
}

record7 * ser_read4( record6 * reader4, record6 * handlebase9 )
{
    // Scope: scope77

    return (record7 *) NULL;
}

inline record7 * __init_IndexOutOfBoundsException0( record7 * this9 )
{
    // Scope: scope78

    this9->field0 = (record3 *) &IndexOutOfBoundsException_vtable0;
    this9->field1 = &ivtable6d;
    return this9;
}

void RuntimeException_mark0( record7 * markthisa )
{
    // Scope: markscopea

    Java_spar_compiler_GC_pushRef( (record6 *) markthisa->field3 );
    Java_spar_compiler_GC_pushRef( (record6 *) markthisa->field4 );
}

void ser_write3( record6 * writer6, record6 * handlebasea, record7 * data5 )
{
    // Scope: ser_write_scope5

    ser_writeObject( writer6, handlebasea, (record6 *) data5->field4 );
}

record7 * ser_read3( record6 * reader5, record6 * handlebaseb )
{
    // Scope: scope79

    return (record7 *) NULL;
}

inline record7 * __init_RuntimeException0( record7 * thisa )
{
    // Scope: scope7a

    thisa->field0 = (record3 *) &RuntimeException_vtable0;
    thisa->field1 = &ivtable6e;
    return thisa;
}

void OutOfMemoryError_mark0( record7 * markthisb )
{
    // Scope: markscopeb

    Java_spar_compiler_GC_pushRef( (record6 *) markthisb->field3 );
    Java_spar_compiler_GC_pushRef( (record6 *) markthisb->field4 );
}

void ser_write8( record6 * writer7, record6 * handlebasec, record7 * data6 )
{
    // Scope: ser_write_scope6

    ser_writeObject( writer7, handlebasec, (record6 *) data6->field4 );
}

record7 * ser_read8( record6 * reader6, record6 * handlebased )
{
    // Scope: scope7b

    return (record7 *) NULL;
}

inline record7 * __init_OutOfMemoryError0( record7 * thisb )
{
    // Scope: scope7c

    thisb->field0 = (record3 *) &OutOfMemoryError_vtable0;
    thisb->field1 = &ivtable6f;
    return thisb;
}

void VirtualMachineError_mark0( record7 * markthisc )
{
    // Scope: markscopec

    Java_spar_compiler_GC_pushRef( (record6 *) markthisc->field3 );
    Java_spar_compiler_GC_pushRef( (record6 *) markthisc->field4 );
}

void ser_write7( record6 * writer8, record6 * handlebasee, record7 * data7 )
{
    // Scope: ser_write_scope7

    ser_writeObject( writer8, handlebasee, (record6 *) data7->field4 );
}

record7 * ser_read7( record6 * reader7, record6 * handlebasef )
{
    // Scope: scope7d

    return (record7 *) NULL;
}

inline record7 * __init_VirtualMachineError0( record7 * thisc )
{
    // Scope: scope7e

    thisc->field0 = (record3 *) &VirtualMachineError_vtable0;
    thisc->field1 = &ivtable70;
    return thisc;
}

void Error_mark0( record7 * markthisd )
{
    // Scope: markscoped

    Java_spar_compiler_GC_pushRef( (record6 *) markthisd->field3 );
    Java_spar_compiler_GC_pushRef( (record6 *) markthisd->field4 );
}

void ser_write6( record6 * writer9, record6 * handlebase10, record7 * data8 )
{
    // Scope: ser_write_scope8

    ser_writeObject( writer9, handlebase10, (record6 *) data8->field4 );
}

record7 * ser_read6( record6 * reader8, record6 * handlebase11 )
{
    // Scope: scope7f

    return (record7 *) NULL;
}

inline record7 * __init_Error0( record7 * thisd )
{
    // Scope: scope80

    thisd->field0 = (record3 *) &Error_vtable0;
    thisd->field1 = &ivtable71;
    return thisd;
}

void NullPointerException_mark0( record7 * markthise )
{
    // Scope: markscopee

    Java_spar_compiler_GC_pushRef( (record6 *) markthise->field3 );
    Java_spar_compiler_GC_pushRef( (record6 *) markthise->field4 );
}

void ser_write9( record6 * writera, record6 * handlebase12, record7 * data9 )
{
    // Scope: ser_write_scope9

    ser_writeObject( writera, handlebase12, (record6 *) data9->field4 );
}

record7 * ser_read9( record6 * reader9, record6 * handlebase13 )
{
    // Scope: scope81

    return (record7 *) NULL;
}

inline record7 * __init_NullPointerException1( record7 * thise )
{
    // Scope: scope82

    thise->field0 = (record3 *) &NullPointerException_vtable0;
    thise->field1 = &ivtable72;
    return thise;
}

void GC_mark0( record6 * markthisf )
{
    // Scope: markscopef

}

inline record6 * __init_GC0( record6 * thisf )
{
    // Scope: scope83

    thisf->field0 = (record3 *) &GC_vtable0;
    thisf->field1 = &ivtable73;
    return thisf;
}

void VnusEventArrayBoundViolated( void )
{
    spar_compiler_Builder_bound_0();
}

void VnusEventOutOfMemory( void )
{
    spar_compiler_Builder_outOfMemory_0();
}

void VnusEventNullPointer( void )
{
    spar_compiler_Builder_nul_0();
}

VnusInt VnusEventGarbageCollect( void )
{
    return spar_compiler_GC_collect_0();
}

int main( int argc, char **argv )
{
    vnus_argc = argc;
    vnus_argv = argv;
    try
    {
	// Scope: __main_catchblock

	t_main_0();
    }
    catch( record1 * __main_x )
    {
	spar_compiler_DefaultExceptionHandler_handler_0( (record7 *) __main_x );
    }
    exit( 0 );
    return 0;
}
