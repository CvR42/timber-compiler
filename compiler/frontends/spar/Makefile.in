
@SET_MAKE@

COMPILERSRCROOT=../..
TMROOT=@TMROOT@

include $(COMPILERSRCROOT)/Makefiles/Make.vars

# All this stuff is filled in by configure
prefix=@prefix@
exec_prefix=@exec_prefix@
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
UNINSTALL_PROGRAM = rm -f
#INSTALL_SCRIPT = @INSTALL_SCRIPT@
#EXEEXT = @EXEEXT@
#OBJEXT = @OBJEXT@

YACC	 = @YACC@ -v -d

WFLAGS   = -Wall -W -Wno-long-long -Wshadow -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wmissing-prototypes -Winline -Woverloaded-virtual -Wstrict-prototypes -Wsynth -pedantic -ansi -Wsign-compare

GNUWFLAGS = -Waggregate-return # -Wconversion

ERRWFLAGS = # -Werror -pedantic-errors

# CvR: Use LOGNEW (remove comment below) if you want to know where
# dangling allocations of tm datastructures occur.
#USELOGNEW = -DLOGNEW -DTO_ASSERTS

# Uncomment this if you want to profile the compiler.
#USEGPROF = -pg

#CHECKCAST = -DTMC_CHECKED_CAST

CFLAGS	 = $(USELOGNEW) -g $(USEGPROF) $(CHECKCAST) -O2 $(WFLAGS) $(ERRWFLAGS) $(GNUWFLAGS) -I$(TMROOT)/include

LINTFLAGS = +fll -i/usr/include/linux -i$(TMROOT)/include

#CXXFLAGS = $(USELOGNEW) -O3 -g $(WFLAGS) $(ERRWFLAGS) -I$(LOCALINC)
#CFLAGS = $(USELOGNEW) -g -I$(LOCALINC)
CC	 = @CXX@
CXX	 = @CXX@
BUILDDEPENDS = @BUILDDEPENDS@
#CC	 = KCC
LD	 = $(CC)
MAKEFILE = Makefile
DEPENDFILE = $(MAKEFILE).d
LIBS	 = $(TMROOT)/lib/libtmc.a #-lefence
LDFLAGS	 = -g $(USEGPROF)
TM       = tm

#SPARFRONT = sparfront$(EXEEXT)
SPARFRONT = sparfront
SPARDRIVER = spar
SPARPREAMBLE = ../../Makefiles/spar-preamble

# Sorted rougly by compilation phase. Helper files come after that.
OBJ = \
    tmadmin.o \
    lex.o \
    parser.o \
    fwdregtype.o \
    regtype.o \
    doimports.o \
    lower.o \
    mangle.o \
    check.o \
    rewrite.o  \
    markfinal.o  \
    countrefs.o  \
    collectassigned.o  \
    noreturn.o  \
    inliner.o \
    getscopes.o  \
    getunbounds.o  \
    markused.o  \
    addgc.o  \
    isconstant.o  \
    ispure.o  \
    isgc.o  \
    isgcsetting.o  \
    iszero.o  \
    codesize.o  \
    constfold.o \
    substitute.o  \
    prettyprint.o \
    markadmin.o \
    symbol_table.o \
    collect.o \
    typederive.o \
    typename.o \
    exprname.o \
    constant.o \
    service.o  \
    global.o \
    error.o \
    dump.o \
    main.o \
    vnus_types.o \
    analyze.o \
    pragma.o

CT_SOURCES = $(wildcard *.ct)
HT_SOURCES = $(wildcard *.ht)
C_SOURCES = analyze.c collect.c constant.c doimports.c dump.c error.c \
    exprname.c global.c lex.c main.c pragma.c prettyprint.c markadmin.c \
    inliner.c service.c symbol_table.c typederive.c typename.c vnus_types.c

# Non-generated header files
H_SOURCES = \
    analyze.h \
    check.h \
    collect.h \
    config.h \
    constant.h \
    constfold.h \
    defs.h \
    doimports.h \
    dump.h \
    error.h \
    exprname.h \
    fwdregtype.h \
    global.h \
    lex.h \
    lower.h \
    mangle.h \
    inliner.h \
    noreturn.h \
    getscopes.h \
    getunbounds.h \
    markused.h \
    addgc.h \
    isconstant.h \
    ispure.h \
    isgc.h \
    isgcsetting.h \
    iszero.h \
    codesize.h \
    parser.h \
    pragma.h \
    prettyprint.h \
    markadmin.h \
    regtype.h \
    rewrite.h \
    markfinal.h \
    countrefs.h \
    collectassigned.h \
    service.h \
    substitute.h \
    symbol_table.h \
    typederive.h \
    typename.h \
    version.h \
    vnus_types.h

Y_SOURCES = parser.y

SOURCES = $(CT_SOURCES) $(HT_SOURCES) $(C_SOURCES) $(H_SOURCES) $(Y_SOURCES)

C_FILES = $(C_SOURCES) $(CT_SOURCES:.ct=.c) $(Y_SOURCES:.y=.c)
H_FILES = $(H_SOURCES) $(HT_SOURCES:.ht=.h)

# Generated sources and headers
GENSRC  = parser.c tmadmin.c constfold.c mangle.c check.c rewrite.c lower.c \
    fwdregtype.c regtype.c substitute.c markfinal.c collectassigned.c \
    isgc.c addgc.c codesize.c getscopes.c getunbounds.c isconstant.c \
    iszero.c markused.c noreturn.c isgcsetting.c countrefs.c ispure.c
GENHDR  = parser-tokens.h tmadmin.h

# Sources we get dependency information from.
DEPENDSRC = $(GENSRC) $(C_SOURCES)

# Files to be deleted upon cleanup
JUNK    = $(GENSRC) $(GENHDR) $(OBJ) y.output lex.back* vnuserr \
	  makelog runout testout spartest spartestprog \
	  spartest.g.* test-*.err spartest.err config.log

EXPENSIVEJUNK = $(SPARFRONT) $(DEPENDFILE) config.status configure

SUBDIRS = testsuite doc
TMADMINFILES = tmadmin.t spar.ds tmadmin.ds

TESTFILES = spartest.spar spargood.v spargood.err spargood.out

DISTFILES = Makefile.in TODO $(SOURCES) $(TMADMINFILES) $(TESTFILES) \
    configure configure.ac config.h.in

all: 	depend $(SPARFRONT) $(SPARDRIVER)

$(SPARFRONT): $(OBJ) $(LIBS)
	$(LD) $(LDFLAGS) $(OBJ) $(LIBS) -o $(SPARFRONT)

help:
	@$(ECHO) " Possible make targets:"
	@$(ECHO) "all              Create local running programs."
	@$(ECHO) "clean            Delete all temporary files."
	@$(ECHO) "empty            Delete all temporary files and executables."
	@$(ECHO) "depend           Update dependencies in $(DEPENDFILE)."
	@$(ECHO) "tests            Do some test runs of the compiler."
	@$(ECHO) "runs             Do some test runs of the compiler output."
	@$(ECHO) "Sequential code test:"
	@$(ECHO) "spartest           Run the compiler, and examine output."
	@$(ECHO) "run                Compile and run, and examine output of that run."

gfiles:	$(GENHDR) $(GENSRC)

%.c %-tokens.h: %.y
	$(YACC) $<
	mv y.tab.c $*.c
	mv y.tab.h $*-tokens.h

isconstant.c: spar.ds tmadmin.ds isconstant.ct
	$(TM) tmadmin.ds isconstant.ct > $@

ispure.c: spar.ds tmadmin.ds ispure.ct
	$(TM) tmadmin.ds ispure.ct > $@

isgc.c: spar.ds tmadmin.ds isgc.ct
	$(TM) tmadmin.ds isgc.ct > $@

isgcsetting.c: spar.ds tmadmin.ds isgcsetting.ct
	$(TM) tmadmin.ds isgcsetting.ct > $@

codesize.c: spar.ds tmadmin.ds codesize.ct
	$(TM) tmadmin.ds codesize.ct > $@

iszero.c: spar.ds tmadmin.ds iszero.ct
	$(TM) tmadmin.ds iszero.ct > $@

addgc.c: spar.ds tmadmin.ds addgc.ct
	$(TM) tmadmin.ds addgc.ct > $@

markused.c: spar.ds tmadmin.ds markused.ct
	$(TM) tmadmin.ds markused.ct > $@

regtype.c: spar.ds tmadmin.ds regtype.ct
	$(TM) tmadmin.ds regtype.ct > $@

fwdregtype.c: spar.ds tmadmin.ds fwdregtype.ct
	$(TM) tmadmin.ds fwdregtype.ct > $@

lower.c: spar.ds tmadmin.ds lower.ct
	$(TM) tmadmin.ds lower.ct > $@

noreturn.c: spar.ds tmadmin.ds noreturn.ct
	$(TM) tmadmin.ds noreturn.ct > $@

getscopes.c: spar.ds tmadmin.ds getscopes.ct
	$(TM) tmadmin.ds getscopes.ct > $@

getunbounds.c: spar.ds tmadmin.ds getunbounds.ct
	$(TM) tmadmin.ds getunbounds.ct > $@

rewrite.c: spar.ds tmadmin.ds rewrite.ct
	$(TM) tmadmin.ds rewrite.ct > $@

markfinal.c: spar.ds tmadmin.ds markfinal.ct
	$(TM) tmadmin.ds markfinal.ct > $@

countrefs.c: spar.ds tmadmin.ds countrefs.ct
	$(TM) tmadmin.ds countrefs.ct > $@

collectassigned.c: spar.ds tmadmin.ds collectassigned.ct
	$(TM) tmadmin.ds collectassigned.ct > $@

substitute.c: spar.ds tmadmin.ds substitute.ct
	$(TM) tmadmin.ds substitute.ct > $@

check.c: spar.ds tmadmin.ds check.ct
	$(TM) tmadmin.ds check.ct > $@

mangle.c: spar.ds tmadmin.ds mangle.ct
	$(TM) tmadmin.ds mangle.ct > $@

constfold.c: spar.ds tmadmin.ds constfold.ct
	$(TM) tmadmin.ds constfold.ct > $@

tmadmin.c: spar.ds tmadmin.ds tmadmin.t tmadmin.ct
	$(TM) tmadmin.ds tmadmin.ct > $@

tmadmin.h: spar.ds tmadmin.ds tmadmin.t tmadmin.ht
	$(TM) tmadmin.ds tmadmin.ht > $@

tmfnprop.lnt: spar.ds tmadmin.ds tmadmin.t tmfnprop.lnt.t
	$(TM) tmadmin.ds tmfnprop.lnt.t > $@

spartest: spartest.g.v spartest.err spargood.v spargood.err
	diff spartest.g.v spargood.v
	diff spartest.err spargood.err

spartest.g.v spartest.err: $(SPARFRONT) spartest.spar spar
	./$(SPARFRONT) spartest.spar --noboundscheck -o spartest.g.v -e spartest.err

$(SPARDRIVER):
	(cd ../../driver && $(MAKE) $(SPARDRIVER))

spartestprog: spartest.spar $(SPARDRIVER) $(SPARFRONT)
	$(COMPILERSRCROOT)/driver/$(SPARDRIVER) spartest.spar -o $@

run: spartestprog
	./spartestprog
	diff runout spargood.out

tests: spartest

check: spartest run
	cd testsuite; make check

runs: run

install: $(SPARFRONT) $(INSTALLED_SPARDRIVER)
	$(INSTALL) -d @libexecdir@
	$(INSTALL_PROGRAM) $(SPARFRONT) @libexecdir@/$(SPARFRONT)

uninstall: 
	$(UNINSTALL_PROGRAM) @libexecdir@/$(SPARFRONT)

depend:	$(DEPENDFILE)

$(DEPENDFILE): $(DEPENDSRC) $(H_FILES)
	$(BUILDDEPENDS) -I$(TMROOT)/include $(DEPENDSRC) > $(DEPENDFILE)

lint: $(C_FILES) $(H_FILES) $(MAKEFILE) co-gnu.lnt fnprop.lnt suppress.lnt tmfnprop.lnt
	lint co-gnu tmfnprop fnprop suppress $(LINTFLAGS) $(C_FILES) > $@

instats:
	rm -f $(GENSRC) $(GENHDR)
	wc -l *.c *.h *.y *.ct *.ht *.t *.ds

stats: $(GENSRC) $(GENHDR)
	wc -l *.c *.h

genstats: $(GENSRC) $(GENHDR)
	wc -l $(GENSRC) $(GENHDR)

include $(COMPILERSRCROOT)/Makefiles/Make.dist
include $(COMPILERSRCROOT)/Makefiles/Make.std

.PRECIOUS:	%.g.cc

# Configuration related rules

include $(COMPILERSRCROOT)/Makefiles/Make.configure

runner-develop-config.sh: configure runner-develop-config.sh.in runner-install-config.sh.in
	./config.status

runner-install-config.sh: configure runner-develop-config.sh.in runner-install-config.sh.in
	./config.status

# CvR: It's all very nice that configure does not want to change unmodified
# files, but it does mean that this rule is constantly triggered, since
# make wants to build an out-of-date config.h. This in turn means that
# other files - the runner scripts - built by config.status are constantly
# built and touched.
#
# Therefore we touch config.h explicitly.
config.h: configure config.h.in
	./config.status
	touch $@

-include $(DEPENDFILE)
