// File: Array.spar
//
// Helper functions for arrays. In particular, the clone() and toString()
// methods for arrays are implemented here.

package spar.compiler;

public final class Array {
    private Array() { /* this class is not instantiable by the general public */ }    

    // Cloning function for type char[*^0]
    <$ nullvalue=false $> public static char[*^0] arrayClone( final char arr[*^0] )
    throws CloneNotSupportedException
    {
        char res[*^0] = new char@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type char[*^1]
    <$ nullvalue=false $> public static char[*^1] arrayClone( final char arr[*^1] )
    throws CloneNotSupportedException
    {
        char res[*^1] = new char@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type char[*^2]
    <$ nullvalue=false $> public static char[*^2] arrayClone( final char arr[*^2] )
    throws CloneNotSupportedException
    {
        char res[*^2] = new char@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type char[*^3]
    <$ nullvalue=false $> public static char[*^3] arrayClone( final char arr[*^3] )
    throws CloneNotSupportedException
    {
        char res[*^3] = new char@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type char[*^4]
    <$ nullvalue=false $> public static char[*^4] arrayClone( final char arr[*^4] )
    throws CloneNotSupportedException
    {
        char res[*^4] = new char@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type char[*^5]
    <$ nullvalue=false $> public static char[*^5] arrayClone( final char arr[*^5] )
    throws CloneNotSupportedException
    {
        char res[*^5] = new char@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type char[*^6]
    <$ nullvalue=false $> public static char[*^6] arrayClone( final char arr[*^6] )
    throws CloneNotSupportedException
    {
        char res[*^6] = new char@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type char[*^7]
    <$ nullvalue=false $> public static char[*^7] arrayClone( final char arr[*^7] )
    throws CloneNotSupportedException
    {
        char res[*^7] = new char@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type char[*^8]
    <$ nullvalue=false $> public static char[*^8] arrayClone( final char arr[*^8] )
    throws CloneNotSupportedException
    {
        char res[*^8] = new char@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type byte[*^0]
    <$ nullvalue=false $> public static byte[*^0] arrayClone( final byte arr[*^0] )
    throws CloneNotSupportedException
    {
        char res[*^0] = new byte@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type byte[*^1]
    <$ nullvalue=false $> public static byte[*^1] arrayClone( final byte arr[*^1] )
    throws CloneNotSupportedException
    {
        char res[*^1] = new byte@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type byte[*^2]
    <$ nullvalue=false $> public static byte[*^2] arrayClone( final byte arr[*^2] )
    throws CloneNotSupportedException
    {
        char res[*^2] = new byte@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type byte[*^3]
    <$ nullvalue=false $> public static byte[*^3] arrayClone( final byte arr[*^3] )
    throws CloneNotSupportedException
    {
        char res[*^3] = new byte@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type byte[*^4]
    <$ nullvalue=false $> public static byte[*^4] arrayClone( final byte arr[*^4] )
    throws CloneNotSupportedException
    {
        char res[*^4] = new byte@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type byte[*^5]
    <$ nullvalue=false $> public static byte[*^5] arrayClone( final byte arr[*^5] )
    throws CloneNotSupportedException
    {
        char res[*^5] = new byte@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type byte[*^6]
    <$ nullvalue=false $> public static byte[*^6] arrayClone( final byte arr[*^6] )
    throws CloneNotSupportedException
    {
        char res[*^6] = new byte@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type byte[*^7]
    <$ nullvalue=false $> public static byte[*^7] arrayClone( final byte arr[*^7] )
    throws CloneNotSupportedException
    {
        char res[*^7] = new byte@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type byte[*^8]
    <$ nullvalue=false $> public static byte[*^8] arrayClone( final byte arr[*^8] )
    throws CloneNotSupportedException
    {
        char res[*^8] = new byte@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type boolean[*^0]
    <$ nullvalue=false $> public static boolean[*^0] arrayClone( final boolean arr[*^0] )
    throws CloneNotSupportedException
    {
        char res[*^0] = new boolean@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type boolean[*^1]
    <$ nullvalue=false $> public static boolean[*^1] arrayClone( final boolean arr[*^1] )
    throws CloneNotSupportedException
    {
        char res[*^1] = new boolean@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type boolean[*^2]
    <$ nullvalue=false $> public static boolean[*^2] arrayClone( final boolean arr[*^2] )
    throws CloneNotSupportedException
    {
        char res[*^2] = new boolean@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type boolean[*^3]
    <$ nullvalue=false $> public static boolean[*^3] arrayClone( final boolean arr[*^3] )
    throws CloneNotSupportedException
    {
        char res[*^3] = new boolean@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type boolean[*^4]
    <$ nullvalue=false $> public static boolean[*^4] arrayClone( final boolean arr[*^4] )
    throws CloneNotSupportedException
    {
        char res[*^4] = new boolean@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type boolean[*^5]
    <$ nullvalue=false $> public static boolean[*^5] arrayClone( final boolean arr[*^5] )
    throws CloneNotSupportedException
    {
        char res[*^5] = new boolean@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type boolean[*^6]
    <$ nullvalue=false $> public static boolean[*^6] arrayClone( final boolean arr[*^6] )
    throws CloneNotSupportedException
    {
        char res[*^6] = new boolean@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type boolean[*^7]
    <$ nullvalue=false $> public static boolean[*^7] arrayClone( final boolean arr[*^7] )
    throws CloneNotSupportedException
    {
        char res[*^7] = new boolean@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type boolean[*^8]
    <$ nullvalue=false $> public static boolean[*^8] arrayClone( final boolean arr[*^8] )
    throws CloneNotSupportedException
    {
        char res[*^8] = new boolean@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type int[*^0]
    <$ nullvalue=false $> public static int[*^0] arrayClone( final int arr[*^0] )
    throws CloneNotSupportedException
    {
        char res[*^0] = new int@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type int[*^1]
    <$ nullvalue=false $> public static int[*^1] arrayClone( final int arr[*^1] )
    throws CloneNotSupportedException
    {
        char res[*^1] = new int@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type int[*^2]
    <$ nullvalue=false $> public static int[*^2] arrayClone( final int arr[*^2] )
    throws CloneNotSupportedException
    {
        char res[*^2] = new int@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type int[*^3]
    <$ nullvalue=false $> public static int[*^3] arrayClone( final int arr[*^3] )
    throws CloneNotSupportedException
    {
        char res[*^3] = new int@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type int[*^4]
    <$ nullvalue=false $> public static int[*^4] arrayClone( final int arr[*^4] )
    throws CloneNotSupportedException
    {
        char res[*^4] = new int@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type int[*^5]
    <$ nullvalue=false $> public static int[*^5] arrayClone( final int arr[*^5] )
    throws CloneNotSupportedException
    {
        char res[*^5] = new int@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type int[*^6]
    <$ nullvalue=false $> public static int[*^6] arrayClone( final int arr[*^6] )
    throws CloneNotSupportedException
    {
        char res[*^6] = new int@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type int[*^7]
    <$ nullvalue=false $> public static int[*^7] arrayClone( final int arr[*^7] )
    throws CloneNotSupportedException
    {
        char res[*^7] = new int@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type int[*^8]
    <$ nullvalue=false $> public static int[*^8] arrayClone( final int arr[*^8] )
    throws CloneNotSupportedException
    {
        char res[*^8] = new int@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type long[*^0]
    <$ nullvalue=false $> public static long[*^0] arrayClone( final long arr[*^0] )
    throws CloneNotSupportedException
    {
        char res[*^0] = new long@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type long[*^1]
    <$ nullvalue=false $> public static long[*^1] arrayClone( final long arr[*^1] )
    throws CloneNotSupportedException
    {
        char res[*^1] = new long@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type long[*^2]
    <$ nullvalue=false $> public static long[*^2] arrayClone( final long arr[*^2] )
    throws CloneNotSupportedException
    {
        char res[*^2] = new long@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type long[*^3]
    <$ nullvalue=false $> public static long[*^3] arrayClone( final long arr[*^3] )
    throws CloneNotSupportedException
    {
        char res[*^3] = new long@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type long[*^4]
    <$ nullvalue=false $> public static long[*^4] arrayClone( final long arr[*^4] )
    throws CloneNotSupportedException
    {
        char res[*^4] = new long@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type long[*^5]
    <$ nullvalue=false $> public static long[*^5] arrayClone( final long arr[*^5] )
    throws CloneNotSupportedException
    {
        char res[*^5] = new long@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type long[*^6]
    <$ nullvalue=false $> public static long[*^6] arrayClone( final long arr[*^6] )
    throws CloneNotSupportedException
    {
        char res[*^6] = new long@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type long[*^7]
    <$ nullvalue=false $> public static long[*^7] arrayClone( final long arr[*^7] )
    throws CloneNotSupportedException
    {
        char res[*^7] = new long@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type long[*^8]
    <$ nullvalue=false $> public static long[*^8] arrayClone( final long arr[*^8] )
    throws CloneNotSupportedException
    {
        char res[*^8] = new long@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type float[*^0]
    <$ nullvalue=false $> public static float[*^0] arrayClone( final float arr[*^0] )
    throws CloneNotSupportedException
    {
        char res[*^0] = new float@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type float[*^1]
    <$ nullvalue=false $> public static float[*^1] arrayClone( final float arr[*^1] )
    throws CloneNotSupportedException
    {
        char res[*^1] = new float@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type float[*^2]
    <$ nullvalue=false $> public static float[*^2] arrayClone( final float arr[*^2] )
    throws CloneNotSupportedException
    {
        char res[*^2] = new float@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type float[*^3]
    <$ nullvalue=false $> public static float[*^3] arrayClone( final float arr[*^3] )
    throws CloneNotSupportedException
    {
        char res[*^3] = new float@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type float[*^4]
    <$ nullvalue=false $> public static float[*^4] arrayClone( final float arr[*^4] )
    throws CloneNotSupportedException
    {
        char res[*^4] = new float@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type float[*^5]
    <$ nullvalue=false $> public static float[*^5] arrayClone( final float arr[*^5] )
    throws CloneNotSupportedException
    {
        char res[*^5] = new float@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type float[*^6]
    <$ nullvalue=false $> public static float[*^6] arrayClone( final float arr[*^6] )
    throws CloneNotSupportedException
    {
        char res[*^6] = new float@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type float[*^7]
    <$ nullvalue=false $> public static float[*^7] arrayClone( final float arr[*^7] )
    throws CloneNotSupportedException
    {
        char res[*^7] = new float@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type float[*^8]
    <$ nullvalue=false $> public static float[*^8] arrayClone( final float arr[*^8] )
    throws CloneNotSupportedException
    {
        char res[*^8] = new float@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type double[*^0]
    <$ nullvalue=false $> public static double[*^0] arrayClone( final double arr[*^0] )
    throws CloneNotSupportedException
    {
        char res[*^0] = new double@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type double[*^1]
    <$ nullvalue=false $> public static double[*^1] arrayClone( final double arr[*^1] )
    throws CloneNotSupportedException
    {
        char res[*^1] = new double@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type double[*^2]
    <$ nullvalue=false $> public static double[*^2] arrayClone( final double arr[*^2] )
    throws CloneNotSupportedException
    {
        char res[*^2] = new double@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type double[*^3]
    <$ nullvalue=false $> public static double[*^3] arrayClone( final double arr[*^3] )
    throws CloneNotSupportedException
    {
        char res[*^3] = new double@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type double[*^4]
    <$ nullvalue=false $> public static double[*^4] arrayClone( final double arr[*^4] )
    throws CloneNotSupportedException
    {
        char res[*^4] = new double@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type double[*^5]
    <$ nullvalue=false $> public static double[*^5] arrayClone( final double arr[*^5] )
    throws CloneNotSupportedException
    {
        char res[*^5] = new double@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type double[*^6]
    <$ nullvalue=false $> public static double[*^6] arrayClone( final double arr[*^6] )
    throws CloneNotSupportedException
    {
        char res[*^6] = new double@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type double[*^7]
    <$ nullvalue=false $> public static double[*^7] arrayClone( final double arr[*^7] )
    throws CloneNotSupportedException
    {
        char res[*^7] = new double@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type double[*^8]
    <$ nullvalue=false $> public static double[*^8] arrayClone( final double arr[*^8] )
    throws CloneNotSupportedException
    {
        char res[*^8] = new double@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type complex[*^0]
    <$ nullvalue=false $> public static complex[*^0] arrayClone( final complex arr[*^0] )
    throws CloneNotSupportedException
    {
        char res[*^0] = new complex@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type complex[*^1]
    <$ nullvalue=false $> public static complex[*^1] arrayClone( final complex arr[*^1] )
    throws CloneNotSupportedException
    {
        char res[*^1] = new complex@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type complex[*^2]
    <$ nullvalue=false $> public static complex[*^2] arrayClone( final complex arr[*^2] )
    throws CloneNotSupportedException
    {
        char res[*^2] = new complex@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type complex[*^3]
    <$ nullvalue=false $> public static complex[*^3] arrayClone( final complex arr[*^3] )
    throws CloneNotSupportedException
    {
        char res[*^3] = new complex@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type complex[*^4]
    <$ nullvalue=false $> public static complex[*^4] arrayClone( final complex arr[*^4] )
    throws CloneNotSupportedException
    {
        char res[*^4] = new complex@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type complex[*^5]
    <$ nullvalue=false $> public static complex[*^5] arrayClone( final complex arr[*^5] )
    throws CloneNotSupportedException
    {
        char res[*^5] = new complex@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type complex[*^6]
    <$ nullvalue=false $> public static complex[*^6] arrayClone( final complex arr[*^6] )
    throws CloneNotSupportedException
    {
        char res[*^6] = new complex@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type complex[*^7]
    <$ nullvalue=false $> public static complex[*^7] arrayClone( final complex arr[*^7] )
    throws CloneNotSupportedException
    {
        char res[*^7] = new complex@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for type complex[*^8]
    <$ nullvalue=false $> public static complex[*^8] arrayClone( final complex arr[*^8] )
    throws CloneNotSupportedException
    {
        char res[*^8] = new complex@(arr.getSize());

	for( v :- :arr.getSize() ){
	    res@v = arr@v;
	}
	return res;
    }

    // Cloning function for Object[*^0]
    <$ nullvalue=false $> public static Object[] arrayClone( final Object arr[*^0] )
    {
        char res[*^0] = new Object@(arr.getSize());

	for( v :- :arr.length ){
	    res@v = (arr@v).clone();
	}
	return res;
    }

    // Cloning function for Object[*^1]
    <$ nullvalue=false $> public static Object[] arrayClone( final Object arr[*^1] )
    {
        char res[*^1] = new Object@(arr.getSize());

	for( v :- :arr.length ){
	    res@v = (arr@v).clone();
	}
	return res;
    }

    // Cloning function for Object[*^2]
    <$ nullvalue=false $> public static Object[] arrayClone( final Object arr[*^2] )
    {
        char res[*^2] = new Object@(arr.getSize());

	for( v :- :arr.length ){
	    res@v = (arr@v).clone();
	}
	return res;
    }

    // Cloning function for Object[*^3]
    <$ nullvalue=false $> public static Object[] arrayClone( final Object arr[*^3] )
    {
        char res[*^3] = new Object@(arr.getSize());

	for( v :- :arr.length ){
	    res@v = (arr@v).clone();
	}
	return res;
    }

    // Cloning function for Object[*^4]
    <$ nullvalue=false $> public static Object[] arrayClone( final Object arr[*^4] )
    {
        char res[*^4] = new Object@(arr.getSize());

	for( v :- :arr.length ){
	    res@v = (arr@v).clone();
	}
	return res;
    }

    // Cloning function for Object[*^5]
    <$ nullvalue=false $> public static Object[] arrayClone( final Object arr[*^5] )
    {
        char res[*^5] = new Object@(arr.getSize());

	for( v :- :arr.length ){
	    res@v = (arr@v).clone();
	}
	return res;
    }

    // Cloning function for Object[*^6]
    <$ nullvalue=false $> public static Object[] arrayClone( final Object arr[*^6] )
    {
        char res[*^6] = new Object@(arr.getSize());

	for( v :- :arr.length ){
	    res@v = (arr@v).clone();
	}
	return res;
    }

    // Cloning function for Object[*^7]
    <$ nullvalue=false $> public static Object[] arrayClone( final Object arr[*^7] )
    {
        char res[*^7] = new Object@(arr.getSize());

	for( v :- :arr.length ){
	    res@v = (arr@v).clone();
	}
	return res;
    }

    // Cloning function for Object[*^8]
    <$ nullvalue=false $> public static Object[] arrayClone( final Object arr[*^8] )
    {
        char res[*^8] = new Object@(arr.getSize());

	for( v :- :arr.length ){
	    res@v = (arr@v).clone();
	}
	return res;
    }

    // Cloning function for type char[*^0]
    <$ nullvalue=false $> public static String arrayToString( final char arr[*^0] )
    {
	return "[0C@" + arr.hashCode();
    }

    // Cloning function for type char[*^1]
    <$ nullvalue=false $> public static String arrayToString( final char arr[*^1] )
    {
	return "[C@" + arr.hashCode();
    }

    // Cloning function for type char[*^2]
    <$ nullvalue=false $> public static String arrayToString( final char arr[*^2] )
    {
	return "[2C@" + arr.hashCode();
    }

    // Cloning function for type char[*^3]
    <$ nullvalue=false $> public static String arrayToString( final char arr[*^3] )
    {
	return "[3C@" + arr.hashCode();
    }

    // Cloning function for type char[*^4]
    <$ nullvalue=false $> public static String arrayToString( final char arr[*^4] )
    {
	return "[4C@" + arr.hashCode();
    }

    // Cloning function for type char[*^5]
    <$ nullvalue=false $> public static String arrayToString( final char arr[*^5] )
    {
	return "[5C@" + arr.hashCode();
    }

    // Cloning function for type char[*^6]
    <$ nullvalue=false $> public static String arrayToString( final char arr[*^6] )
    {
	return "[6C@" + arr.hashCode();
    }

    // Cloning function for type char[*^7]
    <$ nullvalue=false $> public static String arrayToString( final char arr[*^7] )
    {
	return "[7C@" + arr.hashCode();
    }

    // Cloning function for type char[*^8]
    <$ nullvalue=false $> public static String arrayToString( final char arr[*^8] )
    {
	return "[8C@" + arr.hashCode();
    }

    // Cloning function for type byte[*^0]
    <$ nullvalue=false $> public static String arrayToString( final byte arr[*^0] )
    {
	return "[0C@" + arr.hashCode();
    }

    // Cloning function for type byte[*^1]
    <$ nullvalue=false $> public static String arrayToString( final byte arr[*^1] )
    {
	return "[C@" + arr.hashCode();
    }

    // Cloning function for type byte[*^2]
    <$ nullvalue=false $> public static String arrayToString( final byte arr[*^2] )
    {
	return "[2C@" + arr.hashCode();
    }

    // Cloning function for type byte[*^3]
    <$ nullvalue=false $> public static String arrayToString( final byte arr[*^3] )
    {
	return "[3C@" + arr.hashCode();
    }

    // Cloning function for type byte[*^4]
    <$ nullvalue=false $> public static String arrayToString( final byte arr[*^4] )
    {
	return "[4C@" + arr.hashCode();
    }

    // Cloning function for type byte[*^5]
    <$ nullvalue=false $> public static String arrayToString( final byte arr[*^5] )
    {
	return "[5C@" + arr.hashCode();
    }

    // Cloning function for type byte[*^6]
    <$ nullvalue=false $> public static String arrayToString( final byte arr[*^6] )
    {
	return "[6C@" + arr.hashCode();
    }

    // Cloning function for type byte[*^7]
    <$ nullvalue=false $> public static String arrayToString( final byte arr[*^7] )
    {
	return "[7C@" + arr.hashCode();
    }

    // Cloning function for type byte[*^8]
    <$ nullvalue=false $> public static String arrayToString( final byte arr[*^8] )
    {
	return "[8C@" + arr.hashCode();
    }

    // Cloning function for type boolean[*^0]
    <$ nullvalue=false $> public static String arrayToString( final boolean arr[*^0] )
    {
	return "[0C@" + arr.hashCode();
    }

    // Cloning function for type boolean[*^1]
    <$ nullvalue=false $> public static String arrayToString( final boolean arr[*^1] )
    {
	return "[C@" + arr.hashCode();
    }

    // Cloning function for type boolean[*^2]
    <$ nullvalue=false $> public static String arrayToString( final boolean arr[*^2] )
    {
	return "[2C@" + arr.hashCode();
    }

    // Cloning function for type boolean[*^3]
    <$ nullvalue=false $> public static String arrayToString( final boolean arr[*^3] )
    {
	return "[3C@" + arr.hashCode();
    }

    // Cloning function for type boolean[*^4]
    <$ nullvalue=false $> public static String arrayToString( final boolean arr[*^4] )
    {
	return "[4C@" + arr.hashCode();
    }

    // Cloning function for type boolean[*^5]
    <$ nullvalue=false $> public static String arrayToString( final boolean arr[*^5] )
    {
	return "[5C@" + arr.hashCode();
    }

    // Cloning function for type boolean[*^6]
    <$ nullvalue=false $> public static String arrayToString( final boolean arr[*^6] )
    {
	return "[6C@" + arr.hashCode();
    }

    // Cloning function for type boolean[*^7]
    <$ nullvalue=false $> public static String arrayToString( final boolean arr[*^7] )
    {
	return "[7C@" + arr.hashCode();
    }

    // Cloning function for type boolean[*^8]
    <$ nullvalue=false $> public static String arrayToString( final boolean arr[*^8] )
    {
	return "[8C@" + arr.hashCode();
    }

    // Cloning function for type int[*^0]
    <$ nullvalue=false $> public static String arrayToString( final int arr[*^0] )
    {
	return "[0C@" + arr.hashCode();
    }

    // Cloning function for type int[*^1]
    <$ nullvalue=false $> public static String arrayToString( final int arr[*^1] )
    {
	return "[C@" + arr.hashCode();
    }

    // Cloning function for type int[*^2]
    <$ nullvalue=false $> public static String arrayToString( final int arr[*^2] )
    {
	return "[2C@" + arr.hashCode();
    }

    // Cloning function for type int[*^3]
    <$ nullvalue=false $> public static String arrayToString( final int arr[*^3] )
    {
	return "[3C@" + arr.hashCode();
    }

    // Cloning function for type int[*^4]
    <$ nullvalue=false $> public static String arrayToString( final int arr[*^4] )
    {
	return "[4C@" + arr.hashCode();
    }

    // Cloning function for type int[*^5]
    <$ nullvalue=false $> public static String arrayToString( final int arr[*^5] )
    {
	return "[5C@" + arr.hashCode();
    }

    // Cloning function for type int[*^6]
    <$ nullvalue=false $> public static String arrayToString( final int arr[*^6] )
    {
	return "[6C@" + arr.hashCode();
    }

    // Cloning function for type int[*^7]
    <$ nullvalue=false $> public static String arrayToString( final int arr[*^7] )
    {
	return "[7C@" + arr.hashCode();
    }

    // Cloning function for type int[*^8]
    <$ nullvalue=false $> public static String arrayToString( final int arr[*^8] )
    {
	return "[8C@" + arr.hashCode();
    }

    // Cloning function for type long[*^0]
    <$ nullvalue=false $> public static String arrayToString( final long arr[*^0] )
    {
	return "[0C@" + arr.hashCode();
    }

    // Cloning function for type long[*^1]
    <$ nullvalue=false $> public static String arrayToString( final long arr[*^1] )
    {
	return "[C@" + arr.hashCode();
    }

    // Cloning function for type long[*^2]
    <$ nullvalue=false $> public static String arrayToString( final long arr[*^2] )
    {
	return "[2C@" + arr.hashCode();
    }

    // Cloning function for type long[*^3]
    <$ nullvalue=false $> public static String arrayToString( final long arr[*^3] )
    {
	return "[3C@" + arr.hashCode();
    }

    // Cloning function for type long[*^4]
    <$ nullvalue=false $> public static String arrayToString( final long arr[*^4] )
    {
	return "[4C@" + arr.hashCode();
    }

    // Cloning function for type long[*^5]
    <$ nullvalue=false $> public static String arrayToString( final long arr[*^5] )
    {
	return "[5C@" + arr.hashCode();
    }

    // Cloning function for type long[*^6]
    <$ nullvalue=false $> public static String arrayToString( final long arr[*^6] )
    {
	return "[6C@" + arr.hashCode();
    }

    // Cloning function for type long[*^7]
    <$ nullvalue=false $> public static String arrayToString( final long arr[*^7] )
    {
	return "[7C@" + arr.hashCode();
    }

    // Cloning function for type long[*^8]
    <$ nullvalue=false $> public static String arrayToString( final long arr[*^8] )
    {
	return "[8C@" + arr.hashCode();
    }

    // Cloning function for type float[*^0]
    <$ nullvalue=false $> public static String arrayToString( final float arr[*^0] )
    {
	return "[0C@" + arr.hashCode();
    }

    // Cloning function for type float[*^1]
    <$ nullvalue=false $> public static String arrayToString( final float arr[*^1] )
    {
	return "[C@" + arr.hashCode();
    }

    // Cloning function for type float[*^2]
    <$ nullvalue=false $> public static String arrayToString( final float arr[*^2] )
    {
	return "[2C@" + arr.hashCode();
    }

    // Cloning function for type float[*^3]
    <$ nullvalue=false $> public static String arrayToString( final float arr[*^3] )
    {
	return "[3C@" + arr.hashCode();
    }

    // Cloning function for type float[*^4]
    <$ nullvalue=false $> public static String arrayToString( final float arr[*^4] )
    {
	return "[4C@" + arr.hashCode();
    }

    // Cloning function for type float[*^5]
    <$ nullvalue=false $> public static String arrayToString( final float arr[*^5] )
    {
	return "[5C@" + arr.hashCode();
    }

    // Cloning function for type float[*^6]
    <$ nullvalue=false $> public static String arrayToString( final float arr[*^6] )
    {
	return "[6C@" + arr.hashCode();
    }

    // Cloning function for type float[*^7]
    <$ nullvalue=false $> public static String arrayToString( final float arr[*^7] )
    {
	return "[7C@" + arr.hashCode();
    }

    // Cloning function for type float[*^8]
    <$ nullvalue=false $> public static String arrayToString( final float arr[*^8] )
    {
	return "[8C@" + arr.hashCode();
    }

    // Cloning function for type double[*^0]
    <$ nullvalue=false $> public static String arrayToString( final double arr[*^0] )
    {
	return "[0C@" + arr.hashCode();
    }

    // Cloning function for type double[*^1]
    <$ nullvalue=false $> public static String arrayToString( final double arr[*^1] )
    {
	return "[C@" + arr.hashCode();
    }

    // Cloning function for type double[*^2]
    <$ nullvalue=false $> public static String arrayToString( final double arr[*^2] )
    {
	return "[2C@" + arr.hashCode();
    }

    // Cloning function for type double[*^3]
    <$ nullvalue=false $> public static String arrayToString( final double arr[*^3] )
    {
	return "[3C@" + arr.hashCode();
    }

    // Cloning function for type double[*^4]
    <$ nullvalue=false $> public static String arrayToString( final double arr[*^4] )
    {
	return "[4C@" + arr.hashCode();
    }

    // Cloning function for type double[*^5]
    <$ nullvalue=false $> public static String arrayToString( final double arr[*^5] )
    {
	return "[5C@" + arr.hashCode();
    }

    // Cloning function for type double[*^6]
    <$ nullvalue=false $> public static String arrayToString( final double arr[*^6] )
    {
	return "[6C@" + arr.hashCode();
    }

    // Cloning function for type double[*^7]
    <$ nullvalue=false $> public static String arrayToString( final double arr[*^7] )
    {
	return "[7C@" + arr.hashCode();
    }

    // Cloning function for type double[*^8]
    <$ nullvalue=false $> public static String arrayToString( final double arr[*^8] )
    {
	return "[8C@" + arr.hashCode();
    }

    // Cloning function for type complex[*^0]
    <$ nullvalue=false $> public static String arrayToString( final complex arr[*^0] )
    {
	return "[0C@" + arr.hashCode();
    }

    // Cloning function for type complex[*^1]
    <$ nullvalue=false $> public static String arrayToString( final complex arr[*^1] )
    {
	return "[C@" + arr.hashCode();
    }

    // Cloning function for type complex[*^2]
    <$ nullvalue=false $> public static String arrayToString( final complex arr[*^2] )
    {
	return "[2C@" + arr.hashCode();
    }

    // Cloning function for type complex[*^3]
    <$ nullvalue=false $> public static String arrayToString( final complex arr[*^3] )
    {
	return "[3C@" + arr.hashCode();
    }

    // Cloning function for type complex[*^4]
    <$ nullvalue=false $> public static String arrayToString( final complex arr[*^4] )
    {
	return "[4C@" + arr.hashCode();
    }

    // Cloning function for type complex[*^5]
    <$ nullvalue=false $> public static String arrayToString( final complex arr[*^5] )
    {
	return "[5C@" + arr.hashCode();
    }

    // Cloning function for type complex[*^6]
    <$ nullvalue=false $> public static String arrayToString( final complex arr[*^6] )
    {
	return "[6C@" + arr.hashCode();
    }

    // Cloning function for type complex[*^7]
    <$ nullvalue=false $> public static String arrayToString( final complex arr[*^7] )
    {
	return "[7C@" + arr.hashCode();
    }

    // Cloning function for type complex[*^8]
    <$ nullvalue=false $> public static String arrayToString( final complex arr[*^8] )
    {
	return "[8C@" + arr.hashCode();
    }

    // Cloning function for Object[*^0]
    <$ nullvalue=false $> public static String arrayToString( final Object arr[*^0] )
    {
	return "[0C@" + arr.hashCode();
    }

    // Cloning function for Object[*^1]
    <$ nullvalue=false $> public static String arrayToString( final Object arr[*^1] )
    {
	return "[C@" + arr.hashCode();
    }

    // Cloning function for Object[*^2]
    <$ nullvalue=false $> public static String arrayToString( final Object arr[*^2] )
    {
	return "[2C@" + arr.hashCode();
    }

    // Cloning function for Object[*^3]
    <$ nullvalue=false $> public static String arrayToString( final Object arr[*^3] )
    {
	return "[3C@" + arr.hashCode();
    }

    // Cloning function for Object[*^4]
    <$ nullvalue=false $> public static String arrayToString( final Object arr[*^4] )
    {
	return "[4C@" + arr.hashCode();
    }

    // Cloning function for Object[*^5]
    <$ nullvalue=false $> public static String arrayToString( final Object arr[*^5] )
    {
	return "[5C@" + arr.hashCode();
    }

    // Cloning function for Object[*^6]
    <$ nullvalue=false $> public static String arrayToString( final Object arr[*^6] )
    {
	return "[6C@" + arr.hashCode();
    }

    // Cloning function for Object[*^7]
    <$ nullvalue=false $> public static String arrayToString( final Object arr[*^7] )
    {
	return "[7C@" + arr.hashCode();
    }

    // Cloning function for Object[*^8]
    <$ nullvalue=false $> public static String arrayToString( final Object arr[*^8] )
    {
	return "[8C@" + arr.hashCode();
    }

}
