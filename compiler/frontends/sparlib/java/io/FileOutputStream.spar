/*
 * Java core library component.
 *
 * Copyright (c) 1997, 1998
 *      Transvirtual Technologies, Inc.  All rights reserved.
 *
 * See the file "license.terms" for information on usage and redistribution
 * of this file.
 */

package java.io;

import java.lang.String;

public class FileOutputStream
  extends OutputStream {

static {
        System.loadLibrary("io");
}

private FileDescriptor fd = new FileDescriptor();

public FileOutputStream(File file) throws IOException
{
	this(file.getPath());
}

public FileOutputStream(FileDescriptor fdObj)
	{
	System.getSecurityManager().checkWrite(fdObj);
	fd = fdObj;
}

public FileOutputStream(String name) throws IOException
{
	this(name, false);
}

public FileOutputStream(String name, boolean append) throws IOException
{
	System.getSecurityManager().checkWrite(name);
	if (append == false) {
		open(name);		
	}
	else {
		openAppend(name);		
	}
}

public void close() throws IOException
{
    boolean ok = spar.compiler.File.close( fd.getFd() );
    if( !ok ){
	throw new IOException();
    }
}

protected void finalize() throws IOException
{
	close();
	try {
	    super.finalize();
	}
	catch(Throwable e){
	    throw new IOException(e.getMessage());
	}
}

final public FileDescriptor getFD()  throws IOException
{
	return (fd);
}

private void open(String name) throws IOException
{
    char namebuf[] = name.toCharArray();
    int hnd = spar.compiler.File.openOutput( __getbuf(namebuf), namebuf.length );
    __delete( namebuf );
    if( hnd<0 ){
	throw new IOException();
    }
    fd.setFd( hnd );
}

private void openAppend(String name) throws IOException
{
    char namebuf[] = name.toCharArray();
    int hnd = spar.compiler.File.openAppend( __getbuf(namebuf), namebuf.length );
    __delete( namebuf );
    if( hnd<0 ){
	throw new IOException();
    }
    fd.setFd( hnd );
}

public void write(byte b[]) throws IOException
{
	write(b, 0, b.length);
}

public void write(byte b[], int off, int len) throws IOException
{
	writeBytes(b, off, len);
}

//native public void write(int b) throws IOException;

// CvR: There are more subtle ways to do this, but..
public void write(int b) throws IOException
{
    byte buf[] = new byte[1];

    buf[0] = (byte) b;

    boolean ok = spar.compiler.File.write( fd.getFd(), __getbuf(buf), 0, 1 );
    if( !ok ){
	__delete buf;
	throw new IOException();
    }
    __delete buf;
}


//native private void writeBytes(byte b[], int off, int len);
private void writeBytes(byte b[], int off, int len) throws IOException
{
    boolean ok = spar.compiler.File.write( fd.getFd(), __getbuf(b), off, len );
    if( !ok ){
	throw new IOException();
    }
}
}
