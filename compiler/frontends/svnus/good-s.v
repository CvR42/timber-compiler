// Generated by sugar Vnus front-end

program

pragma [value boundscheck true]

declarations [
    globalvariable x_0 float 0.0 pragma [flag notorious],
    globalvariable i_0 int,
    globalvariable V_0 view 1 int,
    globalvariable W_0 view 1 int,
    globalvariable n_0 int 2,
    globalvariable c_0 complex,
    globalvariable c2_0 complex,
    globalvariable tpi_0 int,
    globalvariable tpo_0 int,
    globalvariable tpio_0 int,
    globalvariable b_0 boolean,
    globalvariable s_0 string,
    globalvariable f_0 int 0,
    globalvariable shp_0 shape [5, 8] [blockcyclic 5, collapsed] int,
    globalvariable A_0 shape [20] [blockcyclic 5] int,
    globalvariable B_0 shape [20]  int,
    globalvariable aview_0 view 2 int,
    globalvariable V0_0 view 0 int,
    globalvariable s0_0 shape [1]  int,
    globalvariable rec_0 record [ a:int, b:float, c:char ],
    globalvariable rec2_0 record [ a:int, b:float ],
    globalvariable prec_0 pointer record [ a:int, b:float, c:char ],
    globalvariable prec2_0 pointer record [ a:int, b:float ],
    formalvariable f_1 v__writeString int,
    formalvariable s_1 v__writeString string,
    externalprocedure v__writeString [f_1, s_1] pragma [flag pure],
    formalvariable f_2 v__writeLong int,
    formalvariable l_0 v__writeLong long,
    externalprocedure v__writeLong [f_2, l_0],
    formalvariable f_3 v__writeInt int,
    formalvariable i_1 v__writeInt int,
    externalprocedure v__writeInt [f_3, i_1],
    formalvariable f_4 v__writeComplex int,
    formalvariable c_1 v__writeComplex complex,
    externalprocedure v__writeComplex [f_4, c_1],
    formalvariable f_5 v__writeBoolean int,
    formalvariable b_1 v__writeBoolean boolean,
    externalprocedure v__writeBoolean [f_5, b_1],
    formalvariable f_6 v__writeFloat int,
    formalvariable r_0 v__writeFloat float,
    externalprocedure v__writeFloat [f_6, r_0],
    formalvariable nm_0 v__open string,
    formalvariable mode_0 v__open string,
    externalfunction v__open [nm_0, mode_0] int,
    formalvariable f_7 v__close int,
    externalprocedure v__close [f_7],
    formalvariable f_8 test_scopes int,
    formalvariable n_1 test_scopes int,
    localvariable nloc_0 test_scopes int,
    localvariable nsub_0 scope0 int,
    localvariable n_2 scope1 int,
    localvariable n_3 scope2 int,
    cardinalityvariable i_2,
    localvariable A_1 scope3 shape [23]  int,
    cardinalityvariable i1_0,
    localvariable z_0 scope4 int,
    procedure test_scopes_0 [f_8, n_1] pragma [flag pure]
    statements test_scopes [
        assign nloc_0 ( n_1, *, 2 )
        ,
        procedurecall v__writeInt [f_8, expressionpragma [flag notorious] n_1]
        ,
        procedurecall v__writeString [f_8, " "]
        ,
        procedurecall v__writeInt [f_8, nloc_0]
        ,
        procedurecall v__writeString [f_8, "\n"]
        ,
        pragma [flag pointless,value testboolean false,value testint 42,value teststring "hello world"]
        empty
        ,
        statements scope0 [
            assign nsub_0 ( nloc_0, *, 3 )
            ,
            procedurecall v__writeInt [f_8, n_1]
            ,
            procedurecall v__writeString [f_8, " "]
            ,
            procedurecall v__writeInt [f_8, nloc_0]
            ,
            procedurecall v__writeString [f_8, " "]
            ,
            procedurecall v__writeInt [f_8, nsub_0]
            ,
            procedurecall v__writeString [f_8, "\n"]
            ,
            pragma [flag bigdeal]
            if ( nsub_0, >, nloc_0 )
                statements scope1 [
                    assign n_2 3
                    ,
                    while ( n_2, >, 0 )
                        statements [
                            assign n_2 ( n_2, -, 1 )
                            ,
                            assign nsub_0 ( nsub_0, +, n_2 )
                        ]
                    ,
                    procedurecall v__writeInt [f_8, nsub_0]
                    ,
                    procedurecall v__writeString [f_8, "\n"]
                ]
                statements scope2 [
                    assign n_3 6
                    ,
                    while ( n_3, >, 0 )
                        statements [
                            assign n_3 ( n_3, -, 1 )
                            ,
                            assign nsub_0 ( nsub_0, +, n_3 )
                        ]
                    ,
                    procedurecall v__writeInt [f_8, nsub_0]
                    ,
                    procedurecall v__writeString [f_8, "\n"]
                ]
        ]
        ,
        for [i_2:nloc_0]
            statements scope3 [
                forall [i1_0:getsize A_1 0]
                    statements scope4 [
                        assign z_0 ( i1_0, +, 2 )
                        ,
                        assign (A_1, [i1_0]) z_0
                    ]
            ]
    ]
    ,
    formalvariable f_9 test_dynamic int,
    formalvariable aout_0 test_dynamic pointer shape [10]  int,
    formalvariable bout_0 test_dynamic pointer shape [dontcare]  int,
    formalvariable cout_0 test_dynamic pointer view 1 int,
    formalvariable dout_0 test_dynamic pointer view 1 int,
    formalvariable ain_0 test_dynamic shape [10]  int,
    formalvariable bin_0 test_dynamic shape [dontcare]  int,
    formalvariable cin_0 test_dynamic view 1 int,
    formalvariable din_0 test_dynamic view 1 int,
    localvariable tmp_0 test_dynamic shape [getsize bin_0 0]  int,
    localvariable lim_0 test_dynamic int,
    cardinalityvariable i_3,
    cardinalityvariable i_4,
    procedure test_dynamic_0 [f_9, aout_0, bout_0, cout_0, dout_0, ain_0, bin_0, cin_0, din_0]
    statements test_dynamic [
        assign lim_0 10
        ,
        if ( getsize bin_0 0, <, lim_0 )
            statements [
                assign lim_0 getsize bin_0 0
            ]
            statements [
            ]
        ,
        if ( getsize din_0 0, <, lim_0 )
            statements [
                assign lim_0 getsize din_0 0
            ]
            statements [
            ]
        ,
        procedurecall v__writeString [f_9, "lim = "]
        ,
        procedurecall v__writeInt [f_9, lim_0]
        ,
        procedurecall v__writeString [f_9, "\n"]
        ,
        foreach [i_3:lim_0]
            statements [
                pragma [value testpragmamangling (ain_0, [i_3])]
                assign (tmp_0, [i_3]) ( ( ( (ain_0, [i_3]), +, (bin_0, [i_3]) ), +, (cin_0, [i_3]) ), +, (din_0, [i_3]) )
            ]
        ,
        forall [i_4:lim_0]
            statements [
                assign (*aout_0, [i_4]) (tmp_0, [i_4])
                ,
                assign (*bout_0, [i_4]) (tmp_0, [i_4])
                ,
                assign (*cout_0, [i_4]) (tmp_0, [i_4])
                ,
                assign (*dout_0, [i_4]) (tmp_0, [i_4])
            ]
    ]
    ,
    formalvariable f_a run_test_dynamic int,
    formalvariable n_4 run_test_dynamic int,
    localvariable ain_1 run_test_dynamic shape [10]  int,
    localvariable bin_1 run_test_dynamic shape [n_4]  int,
    localvariable cin_1 run_test_dynamic shape [10]  int,
    localvariable din_1 run_test_dynamic shape [( n_4, +, 2 )]  int,
    localvariable vcin_0 run_test_dynamic view 1 int,
    localvariable vdin_0 run_test_dynamic view 1 int,
    localvariable aout_1 run_test_dynamic shape [10]  int,
    localvariable bout_1 run_test_dynamic shape [n_4]  int,
    localvariable cout_1 run_test_dynamic shape [10]  int,
    localvariable dout_1 run_test_dynamic shape [( n_4, +, 2 )]  int,
    localvariable vcout_0 run_test_dynamic view 1 int,
    localvariable vdout_0 run_test_dynamic view 1 int,
    localvariable bad_0 run_test_dynamic boolean,
    localvariable allok_0 run_test_dynamic boolean,
    cardinalityvariable i_5,
    cardinalityvariable i_6,
    cardinalityvariable i_7,
    cardinalityvariable i_8,
    cardinalityvariable i_9,
    cardinalityvariable i_a,
    cardinalityvariable i_b,
    cardinalityvariable i_c,
    cardinalityvariable i_d,
    cardinalityvariable i_e,
    cardinalityvariable i_f,
    cardinalityvariable i_10,
    procedure run_test_dynamic_0 [f_a, n_4]
    statements run_test_dynamic [
        assign vcin_0 view [i_5:10] (cin_1, [i_5])
        ,
        assign vdin_0 view [i_6:( n_4, +, 2 )] (din_1, [i_6])
        ,
        assign vcout_0 view [i_7:10] (cout_1, [i_7])
        ,
        assign vdout_0 view [i_8:( n_4, +, 2 )] (dout_1, [i_8])
        ,
        forall [i_9:10]
            statements [
                assign (ain_1, [i_9]) 1
            ]
        ,
        forall [i_a:n_4]
            statements [
                assign (bin_1, [i_a]) 1
            ]
        ,
        forall [i_b:10]
            statements [
                assign (cin_1, [i_b]) 1
            ]
        ,
        forall [i_c:( n_4, +, 2 )]
            statements [
                assign (din_1, [i_c]) 1
            ]
        ,
        procedurecall test_dynamic_0 [f_a, &aout_1, &bout_1, &vcout_0, &vdout_0, ain_1, bin_1, vcin_0, vdin_0]
        ,
        assign allok_0 true
        ,
        for [i_d:10]
            statements [
                if ( (aout_1, [i_d]), <>, 4 )
                    statements [
                        procedurecall v__writeString [f_a, "test_dynamic: bad value for aout\n"]
                        ,
                        procedurecall v__writeString [f_a, "aout["]
                        ,
                        procedurecall v__writeInt [f_a, i_d]
                        ,
                        procedurecall v__writeString [f_a, "] = "]
                        ,
                        procedurecall v__writeInt [f_a, (aout_1, [i_d])]
                        ,
                        procedurecall v__writeString [f_a, "\n"]
                        ,
                        assign allok_0 false
                    ]
                    statements [
                    ]
            ]
        ,
        assign bad_0 false
        ,
        for [i_e:10]
            statements [
                assign bad_0 ( bad_0,  or , ( (bout_1, [i_e]), <>, (aout_1, [i_e]) ) )
            ]
        ,
        if bad_0
            statements [
                procedurecall v__writeString [f_a, "test_dynamic: bad value for bout\n"]
                ,
                assign allok_0 false
            ]
            statements [
            ]
        ,
        assign bad_0 false
        ,
        for [i_f:10]
            statements [
                assign bad_0 ( bad_0,  or , ( (cout_1, [i_f]), <>, (bout_1, [i_f]) ) )
            ]
        ,
        if bad_0
            statements [
                procedurecall v__writeString [f_a, "test_dynamic: bad value for cout\n"]
                ,
                assign allok_0 false
            ]
            statements [
            ]
        ,
        assign bad_0 false
        ,
        for [i_10:10]
            statements [
                assign bad_0 ( bad_0,  or , ( (dout_1, [i_10]), <>, (cout_1, [i_10]) ) )
            ]
        ,
        if bad_0
            statements [
                procedurecall v__writeString [f_a, "test_dynamic: bad value for dout\n"]
                ,
                assign allok_0 false
            ]
            statements [
            ]
        ,
        if allok_0
            statements [
                procedurecall v__writeString [f_a, "test_dynamic: everything ok\n"]
            ]
            statements [
            ]
    ]
    ,
    procedure empty_proc_0 []
    statements empty_proc [
    ]
    ,
    formalvariable v_0 empty_proc1 pointer shape [1]  int,
    procedure empty_proc1_0 [v_0]
    statements empty_proc1 [
        l:
        assign (*v_0, [0]) 42
    ]
    ,
    formalvariable f_b Print1dView int,
    formalvariable V_1 Print1dView view 1 int,
    cardinalityvariable i_11,
    procedure Print1dView_0 [f_b, V_1]
    statements Print1dView [
        for [i_11:getsize V_1 0]
            statements [
                procedurecall v__writeInt [f_b, (V_1, [i_11])]
                ,
                procedurecall v__writeString [f_b, " "]
            ]
        ,
        procedurecall v__writeString [f_b, "\n"]
        ,
        return
    ]
    ,
    formalvariable f_c Print1dShape int,
    formalvariable A_2 Print1dShape shape [dontcare]  int,
    cardinalityvariable i_12,
    procedure Print1dShape_0 [f_c, A_2]
    statements Print1dShape [
        for [i_12:getsize A_2 0]
            statements [
                print [f_c, (A_2, [i_12]), " "]
            ]
        ,
        println [f_c, ""]
    ]
    ,
    formalvariable i_13 inc int,
    returnvariable res_0 inc int,
    function inc_0 [i_13] res_0 int 
    statements inc [
        assign res_0 ( i_13, +, 1 )
    ]
    ,
    formalvariable i_14 dec int,
    returnvariable res_1 dec int,
    function dec_0 [i_14] res_1 int 
    statements dec [
        return ( i_14, -, 1 )
    ]
    ,
    formalvariable f_d testcmpint int,
    formalvariable a_0 testcmpint int,
    formalvariable b_2 testcmpint int,
    procedure testcmpint_0 [f_d, a_0, b_2]
    statements testcmpint [
        procedurecall v__writeInt [f_d, a_0]
        ,
        procedurecall v__writeString [f_d, "="]
        ,
        procedurecall v__writeInt [f_d, b_2]
        ,
        if ( a_0, =, b_2 )
            statements [
                procedurecall v__writeString [f_d, " yes\n"]
            ]
            statements [
                procedurecall v__writeString [f_d, " no\n"]
            ]
        ,
        procedurecall v__writeInt [f_d, a_0]
        ,
        procedurecall v__writeString [f_d, "<>"]
        ,
        procedurecall v__writeInt [f_d, b_2]
        ,
        if ( a_0, <>, b_2 )
            statements [
                procedurecall v__writeString [f_d, " yes\n"]
            ]
            statements [
                procedurecall v__writeString [f_d, " no\n"]
            ]
        ,
        procedurecall v__writeInt [f_d, a_0]
        ,
        procedurecall v__writeString [f_d, "<"]
        ,
        procedurecall v__writeInt [f_d, b_2]
        ,
        if ( a_0, <, b_2 )
            statements [
                procedurecall v__writeString [f_d, " yes\n"]
            ]
            statements [
                procedurecall v__writeString [f_d, " no\n"]
            ]
        ,
        procedurecall v__writeInt [f_d, a_0]
        ,
        procedurecall v__writeString [f_d, "<="]
        ,
        procedurecall v__writeInt [f_d, b_2]
        ,
        if ( a_0, <=, b_2 )
            statements [
                procedurecall v__writeString [f_d, " yes\n"]
            ]
            statements [
                procedurecall v__writeString [f_d, " no\n"]
            ]
        ,
        procedurecall v__writeInt [f_d, a_0]
        ,
        procedurecall v__writeString [f_d, ">"]
        ,
        procedurecall v__writeInt [f_d, b_2]
        ,
        if ( a_0, >, b_2 )
            statements [
                procedurecall v__writeString [f_d, " yes\n"]
            ]
            statements [
                procedurecall v__writeString [f_d, " no\n"]
            ]
        ,
        procedurecall v__writeInt [f_d, a_0]
        ,
        procedurecall v__writeString [f_d, ">="]
        ,
        procedurecall v__writeInt [f_d, b_2]
        ,
        if ( a_0, >=, b_2 )
            statements [
                procedurecall v__writeString [f_d, " yes\n"]
            ]
            statements [
                procedurecall v__writeString [f_d, " no\n"]
            ]
    ]
    ,
    cardinalityvariable i_15,
    cardinalityvariable j_0,
    cardinalityvariable i_16,
    cardinalityvariable j_1,
    cardinalityvariable i_17,
    cardinalityvariable j_2,
    cardinalityvariable i_18,
    cardinalityvariable j_3,
    cardinalityvariable i_19,
    cardinalityvariable j_4,
    cardinalityvariable i_1a,
    cardinalityvariable j_5,
    cardinalityvariable i_1b,
    cardinalityvariable i_1c,
    cardinalityvariable j_6,
    cardinalityvariable i_1d,
    cardinalityvariable i_1e,
    cardinalityvariable i_1f,
    cardinalityvariable i_20,
    localvariable ok_0 scope5 boolean

]

statements [
    assign f_0 functioncall v__open ["runout", "w"]
    ,
    procedurecall v__writeString [f_0, "Hello world\n"]
    ,
    println [f_0, "Hello world"]
    ,
    if true
        statements [
            procedurecall v__writeString [f_0, "Yep, true is true\n"]
        ]
        statements [
            procedurecall v__writeString [f_0, "Huh, true is false?\n"]
        ]
    ,
    if false
        statements [
            procedurecall v__writeString [f_0, "Huh, false is true?\n"]
        ]
        statements [
            procedurecall v__writeString [f_0, "Yep, false is false\n"]
        ]
    ,
    assign b_0 false
    ,
    assign b_0 (  not , b_0 )
    ,
    assign b_0 ( false,  or , b_0 )
    ,
    assign b_0 ( true,  and , b_0 )
    ,
    assign i_0 2
    ,
    assign i_0 ( 50, -, i_0 )
    ,
    assign i_0 ( 5, +, i_0 )
    ,
    assign i_0 ( 5, *, i_0 )
    ,
    assign i_0 ( i_0, /, 12 )
    ,
    assign i_0 ( ~, i_0 )
    ,
    assign i_0 ( +, i_0 )
    ,
    assign i_0 functioncall inc_0 [functioncall inc_0 [i_0]]
    ,
    assign i_0 functioncall dec_0 [i_0]
    ,
    assign n_0 7
    ,
    assign n_0 ( +, n_0 )
    ,
    assign n_0 ( 7, +, n_0 )
    ,
    assign n_0 ( n_0, -, 5 )
    ,
    assign n_0 ( n_0, *, 12 )
    ,
    assign n_0 ( n_0, /, 13 )
    ,
    assign n_0 ( n_0, *, 6 )
    ,
    assign n_0 ( n_0, /, 3 )
    ,
    assign x_0 2.1
    ,
    assign x_0 ( ~, x_0 )
    ,
    assign x_0 ( +, x_0 )
    ,
    assign x_0 ( 0.7, +, x_0 )
    ,
    assign x_0 ( x_0, -, 5e2 )
    ,
    assign x_0 ( x_0, *, 0.12 )
    ,
    assign x_0 ( x_0, /, 0.13 )
    ,
    assign s_0 "test string"
    ,
    assign c_0 complex cast double 2 cast double 3
    ,
    assign c2_0 complex cast double 5 cast double 12
    ,
    assign c_0 ( ~, c_0 )
    ,
    procedurecall v__writeString [f_0, "c: "]
    ,
    procedurecall v__writeComplex [f_0, c_0]
    ,
    procedurecall v__writeString [f_0, "\n"]
    ,
    assign c_0 ( +, c_0 )
    ,
    procedurecall v__writeString [f_0, "c: "]
    ,
    procedurecall v__writeComplex [f_0, c_0]
    ,
    procedurecall v__writeString [f_0, "\n"]
    ,
    assign c_0 ( c_0, +, c2_0 )
    ,
    procedurecall v__writeString [f_0, "c: "]
    ,
    procedurecall v__writeComplex [f_0, c_0]
    ,
    procedurecall v__writeString [f_0, "\n"]
    ,
    assign c_0 ( c_0, *, c2_0 )
    ,
    procedurecall v__writeString [f_0, "c: "]
    ,
    procedurecall v__writeComplex [f_0, c_0]
    ,
    procedurecall v__writeString [f_0, "\n"]
    ,
    assign c_0 ( c_0, -, c2_0 )
    ,
    procedurecall v__writeString [f_0, "c: "]
    ,
    procedurecall v__writeComplex [f_0, c_0]
    ,
    procedurecall v__writeString [f_0, "\n"]
    ,
    assign c_0 ( c_0, /, c2_0 )
    ,
    procedurecall v__writeString [f_0, "c: "]
    ,
    procedurecall v__writeComplex [f_0, c_0]
    ,
    procedurecall v__writeString [f_0, "\n"]
    ,
    procedurecall v__writeString [f_0, "n: "]
    ,
    procedurecall v__writeInt [f_0, n_0]
    ,
    procedurecall v__writeString [f_0, "\n"]
    ,
    procedurecall v__writeString [f_0, "i: "]
    ,
    procedurecall v__writeInt [f_0, i_0]
    ,
    procedurecall v__writeString [f_0, "\n"]
    ,
    procedurecall v__writeString [f_0, "b: "]
    ,
    procedurecall v__writeBoolean [f_0, b_0]
    ,
    procedurecall v__writeString [f_0, "\n"]
    ,
    procedurecall v__writeString [f_0, "x: "]
    ,
    procedurecall v__writeFloat [f_0, x_0]
    ,
    procedurecall v__writeString [f_0, "\n"]
    ,
    procedurecall v__writeString [f_0, "s: "]
    ,
    procedurecall v__writeString [f_0, s_0]
    ,
    procedurecall v__writeString [f_0, "\n"]
    ,
    procedurecall v__writeString [f_0, "c: "]
    ,
    procedurecall v__writeComplex [f_0, c_0]
    ,
    procedurecall v__writeString [f_0, "\n"]
    ,
    procedurecall v__writeString [f_0, "\n"]
    ,
    assign i_0 ( ~, 42 )
    ,
    procedurecall v__writeString [f_0, "i: "]
    ,
    procedurecall v__writeInt [f_0, i_0]
    ,
    procedurecall v__writeString [f_0, "\n"]
    ,
    println [f_0, "n: ", n_0]
    ,
    println [f_0, "i: ", i_0]
    ,
    println [f_0, "b: ", b_0]
    ,
    println [f_0, "s: ", s_0]
    ,
    procedurecall v__writeFloat [f_0, cast float 1]
    ,
    procedurecall v__writeString [f_0, "\n"]
    ,
    procedurecall v__writeFloat [f_0, cast float ( cast char 1b, +, 'c' )]
    ,
    procedurecall v__writeString [f_0, "\n"]
    ,
    assign i_0 14
    ,
    while ( i_0, >, 0 )
        statements [
            procedurecall v__writeString [f_0, "i = "]
            ,
            procedurecall v__writeInt [f_0, i_0]
            ,
            procedurecall v__writeString [f_0, "\n"]
            ,
            assign i_0 ( i_0, -, 1 )
        ]
    ,
    for [i_15:3, j_0:4]
        statements [
            procedurecall v__writeString [f_0, "i = "]
            ,
            procedurecall v__writeInt [f_0, i_15]
            ,
            procedurecall v__writeString [f_0, ", "]
            ,
            procedurecall v__writeString [f_0, "j = "]
            ,
            procedurecall v__writeInt [f_0, j_0]
            ,
            procedurecall v__writeString [f_0, "\n"]
        ]
    ,
    procedurecall testcmpint_0 [f_0, 1, 2]
    ,
    procedurecall testcmpint_0 [f_0, 1, 1]
    ,
    procedurecall testcmpint_0 [f_0, 2, 1]
    ,
    procedurecall testcmpint_0 [f_0, 223, 1]
    ,
    forall [i_16:5, j_1:8]
        statements [
            assign (shp_0, [i_16, j_1]) ( i_16, +, j_1 )
        ]
    ,
    for [i_17:5, j_2:8]
        statements [
            procedurecall v__writeString [f_0, "shp["]
            ,
            procedurecall v__writeInt [f_0, i_17]
            ,
            procedurecall v__writeString [f_0, ","]
            ,
            procedurecall v__writeInt [f_0, j_2]
            ,
            procedurecall v__writeString [f_0, "] = "]
            ,
            procedurecall v__writeInt [f_0, (shp_0, [i_17, j_2])]
            ,
            procedurecall v__writeString [f_0, "\n"]
        ]
    ,
    assign aview_0 view [i_18:8, j_3:5] (shp_0, [j_3, i_18])
    ,
    for [i_19:8, j_4:5]
        statements [
            procedurecall v__writeString [f_0, "aview["]
            ,
            procedurecall v__writeInt [f_0, i_19]
            ,
            procedurecall v__writeString [f_0, ","]
            ,
            procedurecall v__writeInt [f_0, j_4]
            ,
            procedurecall v__writeString [f_0, "] = "]
            ,
            procedurecall v__writeInt [f_0, (aview_0, [i_19, j_4])]
            ,
            procedurecall v__writeString [f_0, "\n"]
        ]
    ,
    procedurecall v__writeString [f_0, "A := 66;\n"]
    ,
    for [i_1a:getsize A_0 0]
        statements [
            assign (A_0, [i_1a]) 66
        ]
    ,
    assign A_0 A_0
    ,
    procedurecall Print1dShape_0 [f_0, A_0]
    ,
    procedurecall v__writeString [f_0, "V <- A;\nV := 2112;\n"]
    ,
    assign V_0 view [j_5:10] (A_0, [j_5])
    ,
    for [i_1b:getsize V_0 0]
        statements [
            assign (V_0, [i_1b]) 2112
        ]
    ,
    procedurecall Print1dView_0 [f_0, view [i_1c:getsize V_0 0] (V_0, [i_1c])]
    ,
    procedurecall Print1dShape_0 [f_0, A_0]
    ,
    assign W_0 view [j_6:getsize V_0 0] (A_0, [( ( ( 3, *, j_6 ), +, 2 ),  mod , 10 )])
    ,
    for [i_1d:getsize V_0 0]
        statements [
            assign (W_0, [i_1d]) i_1d
        ]
    ,
    procedurecall Print1dShape_0 [f_0, A_0]
    ,
    procedurecall v__writeString [f_0, "A[i] := 0;\n"]
    ,
    forall [i_1e:getsize A_0 0]
        statements [
            assign (A_0, [i_1e]) 0
        ]
    ,
    procedurecall v__writeString [f_0, "A: "]
    ,
    procedurecall Print1dShape_0 [f_0, A_0]
    ,
    procedurecall v__writeString [f_0, "B[i] := i;\n"]
    ,
    forall [i_1f:getsize A_0 0]
        statements [
            assign (B_0, [i_1f]) i_1f
        ]
    ,
    procedurecall v__writeString [f_0, "B: "]
    ,
    procedurecall Print1dShape_0 [f_0, B_0]
    ,
    procedurecall v__writeString [f_0, "A[i] := B[i];\n"]
    ,
    forall [i_20:getsize A_0 0]
        statements [
            assign (A_0, [i_20]) (B_0, [i_20])
        ]
    ,
    procedurecall v__writeString [f_0, "A: "]
    ,
    procedurecall Print1dShape_0 [f_0, A_0]
    ,
    procedurecall test_scopes_0 [f_0, 42]
    ,
    procedurecall run_test_dynamic_0 [f_0, 42]
    ,
    procedurecall v__writeString [f_0, if ( 3, <, 4 ) "yes\n" "no\n"]
    ,
    procedurecall v__writeInt [f_0, cast int 12b]
    ,
    procedurecall v__writeString [f_0, "\n"]
    ,
    assign field rec_0 a 3
    ,
    assign field rec_0 b cast float 55
    ,
    assign field rec_0 c 'x'
    ,
    assign rec_0 record [1, 1.0, 'z']
    ,
    assign rec2_0 cast record [ a:int, b:float ] rec_0
    ,
    assign prec_0 &rec_0
    ,
    assign prec2_0 cast pointer record [ a:int, b:float ] prec_0
    ,
    assign rec2_0 cast record [ a:int, b:float ] rec_0
    ,
    assign field *prec_0 a field *prec2_0 a
    ,
    statements scope5 [
        assign ok_0 ( prec_0, =, cast pointer record [ a:int, b:float, c:char ] null )
        ,
        if ok_0
            statements [
                println [f_0, "Strange, pointer is null"]
            ]
            statements [
                println [f_0, "Good, pointer is not null"]
            ]
    ]
    ,
    assign prec2_0 new record [ a:int, b:float ]
    ,
    if ( prec2_0, =, cast pointer record [ a:int, b:float ] null )
        statements [
            println [f_0, "Strange, pointer is null"]
        ]
        statements [
        ]
    ,
    delete prec2_0
    ,
    garbagecollect
    ,
    switch 3 [
     (
        4,
        statements [
            println [f_0, "four"]
        ]
    )
    ,
    (
        3,
        statements [
            println [f_0, "three"]
        ]
    )
    ,
    (
        2,
        statements [
        ]
    )
    ,
    (
        1,
        statements [
            println [f_0, "one"]
            ,
            goto next        ]
    )
    ,
    (
        0,
        statements [
            println [f_0, "zero"]
        ]
    )
    ,
    (
        default,
        statements [
            println [f_0, "default"]
        ]
    )
    ]
    ,
    next:
    println [f_0, "left shifts: int:", ( 1, <<, 2 ), " byte:", ( 1b, <<, 2 ), " short:", ( 1s, <<, 2 ), " long:", ( 1l, <<, 2 )]
    ,
    println [f_0, "right shifts: int:", ( 55, >>, 2 ), " byte:", ( 55b, >>, 2 ), " short:", ( 55s, >>, 2 ), " long:", ( 55l, >>, 2 )]
    ,
    println [f_0, "unsigned right shifts: int:", ( 55, >>>, 2 ), " byte:", ( 55b, >>>, 2 ), " short:", ( 55s, >>>, 2 ), " long:", ( 55l, >>>, 2 )]
    ,
    println [f_0, "shifts of negative numbers: left:", ( ( ~, 11 ), <<, 2 ), " right:", ( ( ~, 11 ), >>, 2 ), " unsigned right:", ( ( ~, 11 ), >>>, 2 )]
    ,
    println [f_0, "bitwise operations: and:", ( 17,  and , 18 ), " or:", ( 17,  or , 18 ), " xor:", ( 17, xor, 18 )]
    ,
    println [f_0, "boolean operations: and:", ( true,  and , false ), " or:", ( true,  or , false ), " xor:", ( true, xor, false )]
    ,
    println [f_0, "bitwise not:", (  not , 12 ), " ", (  not , ( ~, 144 ) )]
    ,
    println [f_0, "boolean not:", (  not , false ), " ", (  not , true )]
    ,
    procedurecall v__close [f_0]
    ,
    procedurecall empty_proc_0 []
    ,
    procedurecall empty_proc1_0 [&s0_0]
    ,
    assign V0_0 view [] (s0_0, [0])
]
