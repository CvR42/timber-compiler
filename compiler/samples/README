This directory contains a collection of example programs to test
the compiler with. The program hello.java is the traditional minimal
program to check the working of the compiler. Once you have installed
the compiler, you should be able to compile it with

spar hello.java

and then run it with

a.out

The program hellospar.spar is the Spar/Java version.

The file matmul.spar is a small program that can be parallelized.
Assuming that mpi support has been compiled in by giving the configure
option --with-mpi or --with-mpi=mpich, the program can be compiled
as follows (-a8 tells the compiler to compile for 8 processors):

spar -O3 -a8 --target=mpi matmul.spar

This will again generate a file a.out that can be run as any other MPI
program. See the documentation of MPI on your system for details.

The file mpi.pbs is a batch file to run a program a.out with the PBS
queuing system. PBS is used to submit programs to parallel supercomputers
such as the DAS2 <http://www.cs.vu.nl/das2/>.

Files:

hello.java		Minimal program - Java version.
hellospar.spar		Minimal program - Spar/Java version.
matmul.spar		Small parallel program.
alignbug2.spar		Minimal task parallel example.
mpi.pbs			A script for the PBS queuing system.

Task parallelism: the alignbug2 example.
Data parallelism, as shown in matmul.spar, will always produce correct
code, but in may produce inefficient code. With task parallelism code
is annotated with a distribution. This can result in unexpected problems
as the compiler BELIEVES THIS ANNOTATION TO BE CORRECT. This means that
the code will be executed on te processors indicated by the annotation,
and that the data used should have the same distribution. The compiler
will make no effort to make temporaries that are aligned correctly with
the code.

In the example the statement "A[i] = i*1.1d; " will be executed with a
blockcyclic(3) distribution while A has a cyclic distribution. The result
will be that most of A will not be assigned to, and instead contains
the default value of 0.0. This is what the compiler is supposed to do,
but it might not be what you expect.

So, if you use task parallelism, please make sure your data is correctly
aligned with your code.
