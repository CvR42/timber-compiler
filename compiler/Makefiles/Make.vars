# Variables to determine which targets to make, all default to "no".
HAVE_PTHREADS = no
HAVE_PANDA = no
HAVE_MPI = no
HAVE_PVM = no
HAVE_TRIMEDIA = no
ON_DAS = no
CXX = g++
RANLIB = ranlib

# Flavour of mpi, default is "lam", but "mpich is also allowed".
MPIFLAVOUR = lam
# Things to derive or to get from environment:
# PANDA, PVM_ROOT, PTHREADS

# NPROCLIST is a comma-separated list of the processor dimensions
# NPROC is the product of all these dimensions
ifndef NPROC
NPROC = 6
endif
ifndef NPROCLIST
NPROCLIST = $(NPROC)
endif

#frits: set to yes if you want to generate MPE logfiles
USEMPE=no
#frits: set to yes if you want to generate PANDA tracefiles
USEPANDATRACE=no

# From here on only change things if really necessary

# Lots of flags for all the different compilers and runtime systems
# we currently support.
#PTHREADS = /usr/local/pthreads
MPI = $(MPIDIR)
# Assume this is not defined on DAS but only on babylon...
ifeq ($(ON_DAS),no)
PANDA_ARCH = i386_linux/udp/ot/optimized
else
ifeq ($(USEPANDATRACE),yes)
PANDA_ARCH = i386_linux/lfc/no_threads/tracing
else
PANDA_ARCH = i386_linux/lfc/no_threads/optimized
endif
endif
ifndef DASLIB
DASLIB=/usr/local/package/daslib
endif
LFCLIB = /usr/local/package/lfc/lib
LFCVERSION = optimized

BACKEND = $(COMPILERSRCROOT)/backends
FRONTEND = $(COMPILERSRCROOT)/frontends
VNUS = $(BACKEND)/vnus/vnus
SPAR = $(FRONTEND)/spar/sparfront
MAPPER = $(COMPILERSRCROOT)/engines/mapper/mapper

ifeq ($(MPIFLAVOUR),mpich)
ifeq ($(ON_DAS),yes)
MPIRUN = prun
MPIRUNFLAGS = -asocial -t 1:0:0
MPIRUNPOSTFLAGS = $(NPROC)
MPICLEAN =
else
MPIRUN =
MPIRUNFLAGS =
MPIRUNPOSTFLAGS =
MPICLEAN =
endif
else
ifeq ($(MPIFLAVOUR),lam)
MPIRUN = mpirun
MPIRUNFLAGS = -O -w -c $(NPROC) -s n0 -nger
MPIRUNPOSTFLAGS =
MPICLEAN = lamclean
endif
endif

ECHO = echo
PRUN = prun
PRUNFLAGS =  -asocial -t 1:0:0
PRUNPOSTFLAGS = $(NPROC)

#Bloody Richard Stallman
ifeq ($(OSTYPE),linux-gnu)
OSTYPE = linux
endif

ifeq ($(OSTYPE),solaris)
PVMDIR = $(HOME)/pvm3/bin/SUN4SOL2
else
ifeq ($(OSTYPE),linux)
PVMDIR = $(HOME)/pvm3/bin/LINUX
else
PVMDIR = $(HOME)/pvm3/bin/SUN4
endif
endif

MAKEFILE   = Makefile
DEPENDFILE = $(MAKEFILE).d

VNUSSFLAGS = -dt
VNUSTFLAGS = -t1 -dt
VNUSDFLAGS = -p -a$(NPROCLIST) -dt
SVNUSFLAGS = 
VNUSVTOTMFLAGS = -t -a$(NPROCLIST)
VNUSTMTOSFLAGS = -r -dt
VNUSTMTOTFLAGS = -r -t1 -dt
VNUSTMTODFLAGS = -r -p -a$(NPROCLIST) -dt

# EXTRAFLAGS are used with CC. They provide additional compiler options which
# can be added to or overridden by other Makefiles.
EXTRAFLAGS = -O3
ifeq ($(OSTYPE),linux)
EXTRAFLAGS  += -march=pentium -mcpu=pentium
#EXTRAFLAGS  += -march=i686 -mcpu=pentiumpro
#EXTRAFLAGS  += -fno-default-inline
#EXTRAFLAGS  += -ffast-math
#EXTRAFLAGS  += -fomit-frame-pointer # Disable this for gdb and other traces
ifeq ($(USEPANDATRACE),yes)
EXTRAFLAGS  += -DTRACING
endif
else
EXTRAFLAGS  += -fno-default-inline
endif

# Flags used as basis for all targets
WFLAGS	    = -Wall -W -Wno-long-long -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wconversion -Wstrict-prototypes -Wmissing-prototypes -Winline -Woverloaded-virtual -Wsynth -ansi -pedantic

UNUSEDWFLAGS = -Waggregate-return -Wold-style-cast -Wredundant-decls -Wshadow -Wlong-long 

GNUWFLAGS   = # -Waggregate-return -Wconversion

ERRWFLAGS   = #-Werror -pedantic-errors

# Flags used with C compiler
CFLAGS	    = $(WFLAGS) $(ERRWFLAGS) $(GNUWFLAGS) $(EXTRAFLAGS)
# Flags used with C++ compiler
CXXFLAGS    = $(WFLAGS) $(ERRWFLAGS) $(GNUWFLAGS) $(EXTRAFLAGS)
# Flags used with C++ compiler when linking
LDCXXFLAGS  = $(EXTRAFLAGS)

# Ditto for Trimedia compiler
TMCONFIG = $(HOME)/tmconfig.linux-i386
TMCXXFLAGS = -el -host MacOS -tmcfe -Xtmpl=local --
TMLDCXXFLAGS = -el

# Flags used with C++ compiler for our different targets
# Base
# TM prefix is meant for Trimedia instead of Pentium
CXXXFLAGS = -I$(BACKEND)/runtime -I$(TMROOT)/include $(CXXFLAGS)
TMCXXXFLAGS = -I$(BACKEND)/runtime -I$(TMROOT)/include $(TMCXXFLAGS)
# S : sequential
# T : threaded
# D : pvm(distributed)
# M : mpi
# P : panda
# E : embedded
CXXSFLAGS = $(CXXXFLAGS)
TMCXXSFLAGS = $(TMCXXXFLAGS)
#CXXTFLAGS = -I$(PTHREADS)/include $(CXXXFLAGS)
CXXTFLAGS = $(CXXXFLAGS)
CXXDFLAGS = -D__PVM_ROUND_ROBIN__ -I $(CXXXFLAGS)
ifeq ($(MPIFLAVOUR),mpich)
ifeq ($(ON_DAS),yes)
CXXMFLAGS = -DLINUX -Dix86  -I/usr/local/VU/mpi/include $(CXXXFLAGS)
else
CXXMFLAGS = -DLINUX -Dix86  $(CXXXFLAGS)
endif
else
CXXMFLAGS = -DLINUX -Dix86 -I -I/mpi2c++ -DLAM_BUILDING=0 $(CXXXFLAGS)
endif
CXXPFLAGS = -I$(PANDA)/lib/$(PANDA_ARCH) -I$(PANDA)/lib/$(PANDA_ARCH)/objects/system -I$(OPEN_THREADS)/src/qt/linux -I$(PANDA)/include -I$(DASLIB)/include -I$(PANDA)/src/threads -I$(OPEN_THREADS)/src -DOpenThreads $(CXXXFLAGS)
CXXEFLAGS = $(CXXXFLAGS)
TMCXXEFLAGS = $(TMCXXXFLAGS)

# Flags used with C++ compiler when linking our different targets
# Same naming conventions as above
LDCXXXFLAGS = -L$(BACKEND)/runtime $(LDCXXFLAGS)
TMLDCXXXFLAGS = -L$(BACKEND)/runtime  -L$(HOME)/ubicom/drivers/trimedia/dsp/lib $(TMLDCXXFLAGS)
LDCXXSFLAGS = $(LDCXXXFLAGS)
TMLDCXXSFLAGS = $(TMLDCXXXFLAGS)
#LDCXXTFLAGS = -L$(PTHREADS)/lib $(LDCXXXFLAGS)
LDCXXTFLAGS = $(LDCXXXFLAGS)

ifeq ($(OSTYPE),solaris)
LDCXXDFLAGS = -L$(PVM_ROOT)/lib/SUN4SOL2 $(LDCXXXFLAGS) -lsocket -lnsl
else
ifeq ($(OSTYPE),linux)
LDCXXDFLAGS = -L $(LDCXXXFLAGS)
else
LDCXXDFLAGS = -L$(PVM_ROOT)/lib/SUN4 $(LDCXXXFLAGS)
endif
endif
ifeq ($(MPIFLAVOUR),mpich)
ifeq ($(ON_DAS),yes)
MPIARCH = i386/ch_panda4/optimized
LDCXXMFLAGS = $(LDCXXXFLAGS) -L/usr/local/VU/mpi/lib/$(MPIARCH) -L/usr/local/package/myrinet/lib/intel_linux -L$(PANDA)/lib/$(PANDA_ARCH) -L$(LFCLIB)/$(LFCVERSION) -L$(DASLIB)/lib/i386_Linux $(MPILIBS) -lpanda -llfc -lDpi -lLanaiDevice -lbfd -liberty -ldas
ifeq ($(USEMPE),yes)
LDCXXMFLAGS += -L/usr/share/local/proj/mpich/mpich-1.1/lib/$(MPIARCH)
# Use following on das3.tn.tudelft.nl
#LDCXXMFLAGS += -L/home/frits/mpich-1.1/lib/$(MPIARCH)
endif
else
LDCXXMFLAGS = $(LDCXXXFLAGS) 
endif
else
LDCXXMFLAGS = $(LDCXXXFLAGS) -L
endif
ifeq ($(ON_DAS),no)
LDCXXPFLAGS = -L$(PANDA)/lib/$(PANDA_ARCH) $(LDCXXXFLAGS)
else
LDCXXPFLAGS = $(LDCXXXFLAGS) -L/usr/local/package/myrinet/lib/intel_linux -L$(PANDA)/lib/$(PANDA_ARCH) -L$(LFCLIB)/$(LFCVERSION) -L$(DASLIB)/lib/i386_Linux -lpanda -llfc -lDpi -lLanaiDevice -lbfd -liberty -ldas
endif
LDCXXEFLAGS = $(LDCXXXFLAGS)
TMLDCXXEFLAGS = $(TMLDCXXXFLAGS)

# Flags used to indicate libraries for our different targets
# Base
# This set is just for dependenciesin the Make.rule file
LIBVNUS  = $(BACKEND)/runtime/libvnusrtl
LIBIO    = $(BACKEND)/runtime/libvnusio
LIBGLUE  = $(BACKEND)/runtime/libvnusglue
# 1 letter extensions (S,T,D,M,P,E) are Pentium
# 2 letter extensions (TS,TE) are Trimedia
LIBSS  = $(LIBVNUS:%=%-s.a) $(LIBIO:%=%-s.a)
LIBSTS = $(LIBVNUS:%=%-ts.a) $(LIBIO:%=%-ts.a)
LIBST  = $(LIBVNUS:%=%-s.a) $(LIBIO:%=%-p.a) $(LIBGLUE:%=%-t.a)
LIBSD  = $(LIBVNUS:%=%-s.a) $(LIBIO:%=%-p.a) $(LIBGLUE:%=%-d.a)
LIBSM  = $(LIBVNUS:%=%-s.a) $(LIBIO:%=%-p.a) $(LIBGLUE:%=%-m.a)
LIBSP  = $(LIBVNUS:%=%-s.a) $(LIBIO:%=%-p.a) $(LIBGLUE:%=%-p.a)
LIBSE  = $(LIBVNUS:%=%-s.a) $(LIBIO:%=%-p.a) $(LIBGLUE:%=%-e.a)
LIBSTE  = $(LIBVNUS:%=%-ts.a) $(LIBIO:%=%-tp.a) $(LIBGLUE:%=%-te.a)
# Libs to link against
LLLIBSS  = -lvnusio-s -lvnusrtl-s
LLLIBSTS = -lvnusio-ts -lvnusrtl-ts
LLLIBST  = -lvnusio-p -lvnusrtl-s -lvnusglue-t
LLLIBSD  = -lvnusio-p -lvnusrtl-s -lvnusglue-d
LLLIBSM  = -lvnusio-p -lvnusrtl-s -lvnusglue-m
LLLIBSP  = -lvnusio-p -lvnusrtl-s -lvnusglue-p
LLLIBSE  = -lvnusio-p -lvnusrtl-s -lvnusglue-e
LLLIBSTE  = -lvnusio-tp -lvnusrtl-ts -lvnusglue-te
# Link flags for different targets
LIBSSFLAGS = $(LLLIBSS) $(EXTRALIBS)
#ifeq ($(OSTYPE),linux)
#LIBSTFLAGS = $(LLLIBST) -lm -lpthreads
#else
LIBSTFLAGS = $(LLLIBST) -lm -lpthread $(EXTRALIBS)
#endif
LIBSDFLAGS = $(LLLIBSD) -lgpvm3 -lpvm3 $(EXTRALIBS)
ifeq ($(MPIFLAVOUR),mpich)
ifeq ($(USEMPE),yes)
MPILIBS = -llmpi -lpmpi -lmpe -lmpi
else
MPILIBS = -lmpi 
endif
else
MPILIBS = 
endif

LIBSMFLAGS = $(LLLIBSM) $(MPILIBS) $(EXTRALIBS)
LIBSPFLAGS = -lpanda $(LLLIBSP) -lm -lpanda -lpanda $(EXTRALIBS)
LIBSEFLAGS = $(LLLIBSE) $(EXTRALIBS)
LIBSTEFLAGS = $(LLLIBSTE) -ltm -ldev $(EXTRALIBS) 
LIBSTSFLAGS = $(LLLIBSTS) -ltm -ldev

include $(COMPILERSRCROOT)/Makefiles/Make.rules
