/**************************************************************************
*                                                                         *
*             Java Grande Forum Benchmark Suite - Version 2.0             *
*                                                                         *
*                            produced by                                  *
*                                                                         *
*                  Java Grande Benchmarking Project                       *
*                                                                         *
*                                at                                       *
*                                                                         *
*                Edinburgh Parallel Computing Centre                      *
*                                                                         *
*                email: epcc-javagrande@epcc.ed.ac.uk                     *
*                                                                         *
*                 Original version of this code by                        *
*            Florian Doyon (Florian.Doyon@sophia.inria.fr)                *
*              and  Wilfried Klauser (wklauser@acm.org)                   *
*                                                                         *
*      This version copyright (c) The University of Edinburgh, 1999.      *
*                         All rights reserved.                            *
*                                                                         *
**************************************************************************/


package sparraytracer; 


/**
 * This class reflects the 3d vectors used in 3d computations
 */
public class Vec implements java.io.Serializable {
  public static [double^3] cross([double^3] a, [double^3] b) {
    return
      [a[1]*b[2] - a[2]*b[1],
	      a[2]*b[0] - a[0]*b[2],
	      a[0]*b[1] - a[1]*b[0]];
  }

  public static inline double dot([double^3] a, [double^3] b) { return a[0]*b[0] + a[1]*b[1] + a[2]*b[2]; }

  public static [double^3] comb(double a, [double^3] A, double b, [double^3] B) {
      return a * A + b * B;
  }

  public final static double length( [double^3] v ){
    return Math.sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
  }

  public static final [double^3] normalize( [double^3] v ) {
    double len = Math.sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
    if (len > 0.0) {
      v /= len;
    }
    return v;
  }

}
