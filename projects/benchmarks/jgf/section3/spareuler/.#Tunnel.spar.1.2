
/**************************************************************************
*                                                                         *
*             Java Grande Forum Benchmark Suite - Version 2.0             *
*                                                                         *
*                            produced by                                  *
*                                                                         *
*                  Java Grande Benchmarking Project                       *
*                                                                         *
*                                at                                       *
*                                                                         *
*                Edinburgh Parallel Computing Centre                      *
*                                                                         * 
*                email: epcc-javagrande@epcc.ed.ac.uk                     *
*                                                                         *
*                  Original version of this code by                       *
*                     David Oh (bamf@pobox.com)                           *
*                                                                         *
*      This version copyright (c) The University of Edinburgh, 1999.      *
*                         All rights reserved.                            *
*                                                                         *
**************************************************************************/


package spareuler; 

import java.io.*; 

public class Tunnel{

  int size;
  int datasizes[] = {8,12};

  static double machff = 0.7;    /* Inflow mach number */
  public static final double secondOrderDamping = 1.0;
  public static final double fourthOrderDamping = 1.0;
  static final public int ntime = 1; /* 0 = local timestep, 1 = time accurate */ 
  int scale; /* Refine input grid by this factor */ 
  double error;

  static double a[*,*];   /* Grid cell area */
  static double  deltat[*,*];   /* Timestep */
  static double opg[*,*], pg[*,*], pg1[*,*];                     /* Pressure */
  static double sxi[*,*], seta[*,*];
  static double tg[*,*], tg1[*,*];                           /* Temperature */
  static double xnode[*,*], ynode[*,*];      /* Storage of node coordinates */

  static double oldval[*,*,*], newval[*,*,*]; /* Tepmoray arrays for interpolation */ 

  static double cff, uff, vff, pff, rhoff, tff, jplusff, jminusff;
                                    /* Far field values */
  double datamax, datamin;
  static int iter = 100; /* Number of iterations */ 
  static int imax, jmax;     /* Number of nodes in x and y direction*/
  static int imaxin, jmaxin; /* Number of nodes in x and y direction in unscaled data */ 
  static final int nf = 6; /* Number of fields in data file */ 
   static [double^4] d[*,*];   /* Damping coefficients */
   static [double^4] f[*,*], g[*,*];   /* Flux Vectors */
   static [double^4] r[*,*], ug1[*,*];
   static [double^4] ug[*,*];      /* Storage of data */

  static final double Cp = 1004.5;      /* specific heat, const pres. */
  static final double Cv=717.5;      /* specific heat, const vol. */
  static final double gamma=1.4;   /* Ratio of specific heats */
  static final double rgas=287.0;       /* Gas Constant */
  static final double fourthOrderNormalizer = 0.02; /* Damping coefficients */
  static final double secondOrderNormalizer = 0.02;



  public void initialise() throws IOException, FileNotFoundException{

    int i, j, k, n;             /* Dummy counters */
    double scrap, scrap2;     /* Temporary storage */


    /* Set scale factor for interpolation */ 
    scale = datasizes[size]; 
 
    /* Open data file */
    FileReader instream = new FileReader("tunnel.dat");

    /* Convert the stream into tokens (which helps you parse it) */
    StreamTokenizer intokens = new StreamTokenizer(instream);
    
    /* Read header */
    if (intokens.nextToken() == StreamTokenizer.TT_NUMBER)
      imaxin = (int) intokens.nval;
    else
      throw new IOException();
    if (intokens.nextToken() == StreamTokenizer.TT_NUMBER)
      jmaxin = (int) intokens.nval;
    else
      throw new IOException();

    // Read data into temporary array 
    // note: dummy extra row and column needed to make interpolation simple
    oldval = new double[nf,imaxin+1,jmaxin+1];

    for (i=0;i<imaxin;i++){
      for (j=0;j<jmaxin;j++){
	for (k=0; k<nf; k++){
	  if (intokens.nextToken() == StreamTokenizer.TT_NUMBER){
	    oldval[k,i,j]=  (double) intokens.nval;
	  }
	  else{
	    throw new IOException(); 
	  }
	}
      }
    }

    //interpolate onto finer grid 

    imax = (imaxin - 1) * scale + 1; 
    jmax = (jmaxin - 1) * scale + 1;

    newval = new double[nf,imax,jmax];
    
    for (k=0; k<nf; k++){
      for (i=0;i<imax;i++){
	for (j=0;j<jmax;j++){
	  int iold = i/scale; 
          int jold = j/scale; 
          double xf = ( (double) i%scale) /( (double) scale); 
          double yf = ( (double) j%scale) /( (double) scale); 
	  newval[k,i,j] = (1.0 - xf)*(1.0 - yf)* oldval[k,iold,jold]
	                +(1.0 - xf)*       yf * oldval[k,iold,jold+1]
                        +       xf *(1.0 - yf)* oldval[k,iold+1,jold]
                        +       xf *       yf * oldval[k,iold+1,jold+1];
	}
      }
    }

    
    //create arrays 

    deltat = new double[imax+1,jmax+2];
    opg = new double[imax+2,jmax+2];
    pg = new double[imax+2,jmax+2];
    pg1 = new double[imax+2,jmax+2];
    sxi =new double[imax+2,jmax+2];;
    seta = new double[imax+2,jmax+2];;
    tg = new double[imax+2,jmax+2];
    tg1 = new double[imax+2,jmax+2];
    ug = new [double^4][imax+2,jmax+2];
    a = new double[imax,jmax];
    d =  new [double^4][imax+2,jmax+2];
    f =  new [double^4][imax+2,jmax+2];
    g =  new [double^4][imax+2,jmax+2];
    r =  new [double^4][imax+2,jmax+2];
    ug1 =  new [double^4][imax+2,jmax+2];
    xnode = new double[imax,jmax];
    ynode = new double[imax,jmax];

    for (i = 0; i < imax+2; ++i)
      for (j = 0; j < jmax+2; ++j) {
	d[i,j] =  [0.0,0.0,0.0,0.0];
	f[i,j] =  [0.0,0.0,0.0,0.0];
	g[i,j] =  [0.0,0.0,0.0,0.0];
	r[i,j] = [0.0,0.0,0.0,0.0];
	ug[i,j] = [0.0,0.0,0.0,0.0];
	ug1[i,j] = [0.0,0.0,0.0,0.0];
      }

    /* Set farfield values (we use normalized units for everything) */    
    cff = 1.0;
    vff = 0.0;
    pff = 1.0 / gamma;
    rhoff = 1.0;
    tff = pff / (rhoff * rgas);

    // Copy the interpolated data to arrays 


    for (i=0; i<imax; i++){
      for (j=0; j<jmax; j++){

	xnode[i,j] = newval[0,i,j];
	ynode[i,j] = newval[1,i,j];
        ug[i+1,j+1][0] = newval[2,i,j];
        ug[i+1,j+1][1] = newval[3,i,j];
        ug[i+1,j+1][2] = newval[4,i,j];
        ug[i+1,j+1][3] = newval[5,i,j];

	scrap = ug[i+1,j+1][2]/ug[i+1,j+1][0];
	scrap2 = ug[i+1,j+1][1]/ug[i+1,j+1][0];
	tg[i+1,j+1] = ug[i+1,j+1][3]/ug[i+1,j+1][0] 
	  - (0.5 * (scrap*scrap + scrap2*scrap2));
	tg[i+1,j+1] = tg[i+1,j+1] / Cv;
	pg[i+1,j+1] = rgas * ug[i+1,j+1][0] * tg[i+1,j+1];

      }
    }
     
	
    /* Calculate grid cell areas */
    for (i = 1; i < imax; ++i)
      for (j = 1; j < jmax; ++j)
	a[i,j] = 0.5 * ((xnode[i,j] - xnode[i-1,j-1]) 
			              * (ynode[i-1,j] - ynode[i,j-1])-
			 (ynode[i,j] - ynode[i-1,j-1]) 
			              * (xnode[i-1,j] - xnode[i,j-1]));
    // throw away temporary arrays 
    oldval = newval = null; 
  }


  void doIteration() {
    double scrap;
    int i, j;

    /* Record the old pressure values */
    for (i = 1; i < imax; ++i)
      for (j = 1; j < jmax; ++j) {
	opg[i,j] = pg[i,j];
      }


    calculateDummyCells(pg, tg, ug);
    calculateDeltaT();

    calculateDamping(pg, ug);

    /* Do the integration */
    /* Step 1 */
    calculateF(pg, tg, ug);
    calculateG(pg, tg, ug);
    calculateR();

    for (i = 1; i < imax; ++i)
      for (j = 1; j < jmax; ++j) {
	ug1[i,j][0]=ug[i,j][0]-0.25*deltat[i,j]/a[i,j]*(r[i,j][0]-d[i,j][0]);
	ug1[i,j][1]=ug[i,j][1]-0.25*deltat[i,j]/a[i,j]*(r[i,j][1]-d[i,j][1]);
	ug1[i,j][2]=ug[i,j][2]-0.25*deltat[i,j]/a[i,j]*(r[i,j][2]-d[i,j][2]);
	ug1[i,j][3]=ug[i,j][3]-0.25*deltat[i,j]/a[i,j]*(r[i,j][3]-d[i,j][3]);
      }
    calculateStateVar(pg1, tg1, ug1);

    /* Step 2 */
    calculateDummyCells(pg1, tg1, ug1);
    calculateF(pg1, tg1, ug1);
    calculateG(pg1, tg1, ug1);
    calculateR();
    for (i = 1; i < imax; ++i)
      for (j = 1; j < jmax; ++j) {
	ug1[i,j][0]=
	  ug[i,j][0]-0.33333*deltat[i,j]/a[i,j]*(r[i,j][0]-d[i,j][0]);
	ug1[i,j][1]=
	  ug[i,j][1]-0.33333*deltat[i,j]/a[i,j]*(r[i,j][1]-d[i,j][1]);
	ug1[i,j][2]=
	  ug[i,j][2]-0.33333*deltat[i,j]/a[i,j]*(r[i,j][2]-d[i,j][2]);
	ug1[i,j][3]=
	  ug[i,j][3]-0.33333*deltat[i,j]/a[i,j]*(r[i,j][3]-d[i,j][3]);
      }
    calculateStateVar(pg1, tg1, ug1);
    
    /* Step 3 */
    calculateDummyCells(pg1, tg1, ug1);
    calculateF(pg1, tg1, ug1);
    calculateG(pg1, tg1, ug1);
    calculateR();
    for (i = 1; i < imax; ++i)
      for (j = 1; j < jmax; ++j) {
	ug1[i,j][0]=
	  ug[i,j][0]-0.5*deltat[i,j]/a[i,j]*(r[i,j][0]-d[i,j][0]);
	ug1[i,j][1]=
	  ug[i,j][1]-0.5*deltat[i,j]/a[i,j]*(r[i,j][1]-d[i,j][1]);
	ug1[i,j][2]=
	  ug[i,j][2]-0.5*deltat[i,j]/a[i,j]*(r[i,j][2]-d[i,j][2]);
	ug1[i,j][3]=
	  ug[i,j][3]-0.5*deltat[i,j]/a[i,j]*(r[i,j][3]-d[i,j][3]);

      }
    calculateStateVar(pg1, tg1, ug1);
    
    /* Step 4 (final step) */
    calculateDummyCells(pg1, tg1, ug1);
    calculateF(pg1, tg1, ug1);
    calculateG(pg1, tg1, ug1);
    calculateR();
    for (i = 1; i < imax; ++i)
      for (j = 1; j < jmax; ++j) {
	ug[i,j][0] -= deltat[i,j]/a[i,j]*(r[i,j][0]-d[i,j][0]);
	ug[i,j][1] -= deltat[i,j]/a[i,j]*(r[i,j][1]-d[i,j][1]);
	ug[i,j][2] -= deltat[i,j]/a[i,j]*(r[i,j][2]-d[i,j][2]);
	ug[i,j][3] -= deltat[i,j]/a[i,j]*(r[i,j][3]-d[i,j][3]);
      }
    calculateStateVar(pg, tg, ug);

    /* calculate RMS Pressure Error */
    error = 0.0;
    for (i = 1; i < imax; ++i)
      for (j = 1; j < jmax; ++j) {
	scrap = pg[i,j]-opg[i,j];
	error += scrap*scrap;
      }
    error = Math.sqrt(error / (double)((imax-1) * (jmax-1)) ); 
  }


  private static void calculateStateVar(double localpg[*,*], double localtg[*,*],
			 [double^4] localug[*,*])
    /* Calculates the new state values for range-kutta */
    /* Works for default values, 4/11 at 9:45 pm */
    {
      int i, j;

      for (i = 1; i < imax; ++i) {
	for (j = 1; j < jmax; ++j) {
	  double temp0, temp, temp2, temp3;
	  [temp0, temp, temp2, temp3] = localug[i,j];

	  localtg[i,j] = temp3/temp0 - 0.5 *
	    (temp*temp + temp2*temp2)/(temp0*temp0);

	  localtg[i,j] /= Cv;
	  localpg[i,j] = temp0 * rgas * localtg[i,j];
	}
      }
    }


  private static void calculateR() {
    /* Works for default values, straight channel (all 0's) 4/11, 9:15 pm */
    
    double deltax, deltay;
    double temp;
 
    for (i :- 1:imax ) {
      for (j :- 1:jmax ) {
	
	/* Start by clearing R */
	[double^4] rij = [0.0,0.0,0.0,0.0];

	/* East Face */
	deltay = (ynode[i,j] - ynode[i,j-1]);
	deltax = (xnode[i,j] - xnode[i,j-1]);
	temp = 0.5 * deltay;
	[double^4] fij = f[i,j];
	[double^4] gij = g[i,j];
	rij[0] += temp*(fij[0] + f[i+1,j][0]);
	rij[1] += temp*(fij[1] + f[i+1,j][1]);
	rij[2] += temp*(fij[2] + f[i+1,j][2]);
	rij[3] += temp*(fij[3] + f[i+1,j][3]);

	temp = -0.5*deltax;
	rij[0] += temp * (gij[0]+g[i+1,j][0]);
	rij[1] += temp * (gij[1]+g[i+1,j][1]);
	rij[2] += temp * (gij[2]+g[i+1,j][2]);
	rij[3] += temp * (gij[3]+g[i+1,j][3]);
	
	/* South Face */
	deltay = (ynode[i,j-1] - ynode[i-1,j-1]);  
	deltax = (xnode[i,j-1] - xnode[i-1,j-1]);

	temp = 0.5 * deltay;
	rij[0]  += temp*(fij[0]+f[i,j-1][0]);
	rij[1]  += temp*(fij[1]+f[i,j-1][1]);
	rij[2]  += temp*(fij[2]+f[i,j-1][2]);
	rij[3]  += temp*(fij[3]+f[i,j-1][3]);

	temp = -0.5*deltax;
	rij[0] += temp * (gij[0]+g[i,j-1][0]);
	rij[1] += temp * (gij[1]+g[i,j-1][1]);
	rij[2] += temp * (gij[2]+g[i,j-1][2]);
	rij[3] += temp * (gij[3]+g[i,j-1][3]);
	
	/* West Face */
	deltay = (ynode[i-1,j-1] - ynode[i-1,j]);
	deltax = (xnode[i-1,j-1] - xnode[i-1,j]);

	temp = 0.5 * deltay;
	rij[0]  += temp*(fij[0]+f[i-1,j][0]);
	rij[1]  += temp*(fij[1]+f[i-1,j][1]);
	rij[2]  += temp*(fij[2]+f[i-1,j][2]);
	rij[3]  += temp*(fij[3]+f[i-1,j][3]);

	temp = -0.5*deltax;
	rij[0] += temp * (gij[0]+g[i-1,j][0]);
	rij[1] += temp * (gij[1]+g[i-1,j][1]);
	rij[2] += temp * (gij[2]+g[i-1,j][2]);
	rij[3] += temp * (gij[3]+g[i-1,j][3]);
	
	
	/* North Face */
	deltay = (ynode[i-1,j] - ynode[i,j]);
	deltax = (xnode[i-1,j] - xnode[i,j]);

	temp = 0.5 * deltay;
	rij[0]  += temp*(fij[0]+f[i+1,j][0]);
	rij[1]  += temp*(fij[1]+f[i+1,j][1]);
	rij[2]  += temp*(fij[2]+f[i+1,j][2]);
	rij[3]  += temp*(fij[3]+f[i+1,j][3]);
	
	temp = -0.5*deltax;
	rij[0] += temp * (gij[0]+g[i,j+1][0]);
	rij[1] += temp * (gij[1]+g[i,j+1][1]);
	rij[2] += temp * (gij[2]+g[i,j+1][2]);
	rij[3] += temp * (gij[3]+g[i,j+1][3]);

	r[i,j] = rij;

      }
    }
  }


  private static void calculateG(double localpg[*,*], double localtg[*,*],
		  [double^4] localug[*,*]) {
    /* Works for default values 4/10: 5:15 pm */    
    double temp, temp2, temp3;
    
    for (int i = 0; i < imax + 1; ++i) {
      for (int j = 0; j < jmax + 1; ++j) {
	double v = localug[i,j][2] / localug[i,j][0];
	g[i,j][0] = localug[i,j][2];
	g[i,j][1] = localug[i,j][1] * v;
	g[i,j][2] = localug[i,j][2]*v + localpg[i,j];
	temp = localug[i,j][1] * localug[i,j][1];
	temp2 = localug[i,j][2] * localug[i,j][2];
	temp3 = localug[i,j][0] * localug[i,j][0];
	g[i,j][3] = localug[i,j][2] * (Cp * localtg[i,j]+ 
		 (0.5 * (temp + temp2)/(temp3)));
      }
    }
  }


  private static void calculateF(double localpg[*,*], double localtg[*,*], 
		  [double^4] localug[*,*]) {
     /* Works for default values 4/10: 4:50 pm */
    {
      double u;
      double temp1, temp2, temp3;
      
      for (int i = 0; i < imax + 1; ++i) {
	for (int j = 0; j < jmax + 1; ++j) {	  
	  u = localug[i,j][1]/ localug[i,j][0];
	  f[i,j][0] = localug[i,j][1];
	  f[i,j][1] = localug[i,j][1] *u + localpg[i,j];
	  f[i,j][2] = localug[i,j][2] * u;
	  temp1 = localug[i,j][1] * localug[i,j][1];
	  temp2 = localug[i,j][2] * localug[i,j][2];
	  temp3 = localug[i,j][0] * localug[i,j][0];
	  f[i,j][3] = localug[i,j][1] * (Cp * localtg[i,j] + 
	      	 (0.5 * (temp1 + temp2)/(temp3)));
	}
      }
    }
  }

  private static void calculateDamping(double localpg[*,*], [double^4] localug[*,*]) {
      double adt, sbar;
      double nu2;
      double nu4;
      double tempdouble;
      int ascrap, i, j;
      [double^4] temp = [0.0,0.0,0.0,0.0];
      [double^4] temp2 = [0.0,0.0,0.0,0.0];
      [double^4] scrap2 = [0.0,0.0,0.0,0.0], scrap4 = [0.0,0.0,0.0,0.0];
      
      nu2 = secondOrderDamping * secondOrderNormalizer;
      nu4 = fourthOrderDamping * fourthOrderNormalizer;

      /* First do the pressure switches */
      /* Checked and works with defaults, 4/12 at 1:20 am */
      /* The east and west faces have been checked numerically vs.John's old */
      /* Scheme, and work! 4/13 @ 2:20 pm */
      for (i = 1; i < imax; ++i)
	for (j = 1; j < jmax; ++j) {
	  sxi[i,j] = Math.abs(localpg[i+1,j] -
		2.0 * localpg[i,j] + localpg[i-1,j])/ localpg[i,j];
	  seta[i,j] = Math.abs(localpg[i,j+1] -
	       2.0 * localpg[i,j] + localpg[i,j-1]) / localpg[i,j];
	}
      
      /* Then calculate the fluxes */
      for (i = 1; i < imax; ++i) {
	for (j = 1; j < jmax; ++j) {
	  
	  /* Clear values */
	  /* East Face */
	  if (i > 1 && i < imax-1) {
	    adt = (a[i,j] + a[i+1,j]) / (deltat[i,j] + deltat[i+1,j]);
	    sbar = (sxi[i+1,j] + sxi[i,j]) * 0.5;
	  }
	  else {
	    adt = a[i,j]/deltat[i,j];
	    sbar = sxi[i,j];
	  }
	  tempdouble = nu2*sbar*adt;
	  scrap2 = tempdouble * (localug[i+1,j]-localug[i,j]);

	  if (i > 1 && i < imax-1) {
	    temp = localug[i+2,j]-localug[i-1,j];

	    temp2 = 3.0*(localug[i,j]-localug[i+1,j]);

	    tempdouble = -nu4*adt;
	    scrap4 = tempdouble*(temp[0]+temp2);
	  }
	  else {
	    scrap4 = [0.0,0.0,0.0,0.0];
	  }

	  temp = scrap2 + scrap4;
	  d[i,j] = temp;
	  
	  /* West Face */ 
	  if(i > 1 && i < imax-1) {
	    adt = (a[i,j] + a[i-1,j]) / (deltat[i,j] + deltat[i-1,j]);
	    sbar = (sxi[i,j] + sxi[i-1,j]) *0.5;
	  }
	  else {
	    adt = a[i,j]/deltat[i,j];
	    sbar = sxi[i,j];
	  }

	  tempdouble = -nu2*sbar*adt;
	  scrap2 = tempdouble * (localug[i,j]-localug[i-1,j]);


	  if (i > 1 && i < imax-1) {
	    temp = localug[i+1,j]-localug[i-2,j];
	    temp2 = 3.0*(localug[i-1,j]-localug[i,j]);

	    tempdouble = nu4*adt;
	    scrap4 = tempdouble*(temp[0]+temp2);
	  }
	  else {
	    scrap4 = [0.0,0.0,0.0,0.0];
	  }

	  d[i,j] += scrap2 + scrap4;

	  /* North Face */
	  if (j > 1 && j < jmax-1) {
	    adt = (a[i,j] + a[i,j+1]) / (deltat[i,j] + deltat[i,j+1]);
	    sbar = (seta[i,j] + seta[i,j+1]) * 0.5;
	  }
	  else {
	    adt = a[i,j]/deltat[i,j];
	    sbar = seta[i,j];
	  }
	  tempdouble = nu2*sbar*adt;
	  scrap2 = tempdouble * (localug[i,j+1]-localug[i,j]);

	  if (j > 1 && j < jmax-1) {
	    temp = localug[i,j+2]-localug[i,j-1];
	    temp2 = 3.0*(localug[i,j]-localug[i,j+1]);

	    tempdouble = -nu4*adt;
	    scrap4 = tempdouble*(temp[0]+temp2);
	  }
	  else {
	    scrap4 = [0.0,0.0,0.0,0.0];
	  }
	  d[i,j] += scrap2 + scrap4;
	  
	  /* South Face */
	  if (j > 1 && j < jmax-1) {
	    adt = (a[i,j] + a[i,j-1]) / (deltat[i,j] + deltat[i,j-1]);
	    sbar = (seta[i,j] + seta[i,j-1]) * 0.5;
	  }
	  else {
	    adt = a[i,j]/deltat[i,j];
	    sbar = seta[i,j];
	  }
	  tempdouble = -nu2*sbar*adt;
	  scrap2 = tempdouble * (localug[i,j]-localug[i,j-1]);

	  if (j > 1 && j < jmax-1) {
	    temp = localug[i,j+1]-localug[i,j-2];
	    temp2 = 3.0*(localug[i,j-1]-localug[i,j]);

	    tempdouble = nu4*adt;
	    scrap4 = tempdouble*(temp[0]+temp2);
	  }
	  else {
	    scrap4 = [0.0,0.0,0.0,0.0];
	  }
	  d[i,j] += scrap2 + scrap4;
	}
      }
  }
  
  private static void calculateDeltaT() {
    double xeta, yeta, xxi, yxi;              /* Local change in x and y */
    int i, j;
    double c, q, r;
    double safety_factor = 0.7;
    
    for (i = 1; i < imax; ++i)
      for (j = 1; j < jmax; ++j) {
	xxi = (xnode[i,j] - xnode[i-1,j] 
	                         + xnode[i,j-1] - xnode[i-1,j-1]) * 0.5;
	yxi = (ynode[i,j] - ynode[i-1,j] 
	                         + ynode[i,j-1] - ynode[i-1,j-1]) * 0.5;
	xeta = (xnode[i,j] - xnode[i,j-1] 
		                 + xnode[i-1,j] - xnode[i-1,j-1]) * 0.5;
	yeta = (ynode[i,j] - ynode[i,j-1] 
		                 + ynode[i-1,j] - ynode[i-1,j-1]) * 0.5;
	
	q = (yeta * ug[i,j][1] - xeta * ug[i,j][2]);
	r = (-yxi * ug[i,j][1] + xxi * ug[i,j][2]);
	c = Math.sqrt (gamma * rgas * tg[i,j]);
	
	deltat[i,j] = safety_factor * 2.8284 * a[i,j] /

	  ( (Math.abs(q) + Math.abs(r))/ug[i,j][0] + c * 
	   Math.sqrt(xxi*xxi + yxi*yxi + xeta*xeta + yeta*yeta +
				  2.0 * Math.abs(xeta*xxi + yeta*yxi)));
      }
    
    /* If that's the user's choice, make it time accurate */
    if (ntime == 1) {
      double mint = 100000.0;
      for (i = 1; i < imax; ++i)
	for (j = 1; j < jmax; ++j)
	  if (deltat[i,j] < mint)
	    mint = deltat[i,j];
      
      for (i = 1; i < imax; ++i)
	for (j = 1; j < jmax; ++j)
	  deltat[i,j] = mint;
    }
  }

  private static void calculateDummyCells(double localpg[*,*],
			   double localtg[*,*], [double^4] localug[*,*]) {
    double c;
    double jminus;
    double jplus;
    double s;
    double rho, temp, u, v;
    double scrap, scrap2;
    double theta;
    double uprime;
    int i, j;
    [double^2] norm = [0.0,0.0];
    [double^2] tan = [0.0,0.0];
    [double^2] u1 = [0.0,0.0];

    uff = machff;
    jplusff = uff + 2.0 / (gamma - 1.0) * cff;
    jminusff = uff - 2.0 / (gamma - 1.0) * cff;
    
    for (i = 1; i < imax; ++i) {
      /* Bottom wall boundary cells */
      /* Routine checked by brute force for initial conditions, 4/9; 4:30 */
      /* Routine checked by brute force for random conditions, 4/13, 4:40 pm */
      /* Construct tangent vectors */
      tan[0] = xnode[i,0] - xnode[i-1,0];
      tan[1] = ynode[i,0] - ynode[i-1,0];
      norm[0] = - (ynode[i,0] - ynode[i-1,0]);
      norm[1] = xnode[i,0] - xnode[i-1,0];
      
      scrap = Vector2.magnitude( tan );
      tan[0] = tan[0] / scrap;
      tan[1] = tan[1] / scrap;
      scrap = Vector2.magnitude( norm );
      norm[0] = norm[0] / scrap;
      norm[1] = norm[1] / scrap;
      
      /* now set some state variables */
      rho = localug[i,1][0];
      localtg[i,0] = localtg[i,1];
      u1[0] = localug[i,1][1] / rho;
      u1[1] = localug[i,1][2] / rho;
      
      u = Vector2.dot(u1,tan) + Vector2.dot(u1,norm) * tan[1] /norm[1];
      u = u / (tan[0] - (norm[0] * tan[1] / norm[1]));
      
      v = - (Vector2.dot(u1,norm) + u * norm[0]) / norm[1];
      
      /* And construct the new state vector */
      localug[i,0][0] = localug[i,1][0];
      localug[i,0][1] = rho * u;
      localug[i,0][2] = rho * v;
      localug[i,0][3] = rho * (Cv * localtg[i,0] + 0.5 * (u*u + v*v));
      localpg[i,0] = localpg[i,1];
      
      /* Top Wall Boundary Cells */
      /* Checked numerically for default conditions, 4/9 at 5:30 pm */
      /* Construct normal and tangent vectors */
      /* This part checked and works; it produces the correct vectors */
      tan[0] = xnode[i,jmax-1] - xnode[i-1,jmax-1];
      tan[1] = ynode[i,jmax-1] - ynode[i-1,jmax-1];
      norm[0] = ynode[i,jmax-1] - ynode[i-1,jmax-1];
      norm[1] = -(xnode[i,jmax-1] - xnode[i-1,jmax-1]);
      
      scrap = Vector2.magnitude( tan );
      tan[0] = tan[0] / scrap;
      tan[1] = tan[1] / scrap;
      scrap = Vector2.magnitude( norm );
      norm[0] = norm[0] / scrap;
      norm[1] = norm[1] / scrap;
     
      /* now set some state variables */
      rho = localug[i,jmax-1][0];
      temp = localtg[i,jmax-1];
      u1[0] = localug[i,jmax-1][1] / rho;
      u1[1] = localug[i,jmax-1][2] / rho;
     
      u = Vector2.dot(u1,tan) + Vector2.dot(u1,norm) * tan[1] /norm[1];
      u = u / (tan[0] - (norm[0] * tan[1] / norm[1]));
     
      v = - (Vector2.dot(u1,norm) + u * norm[0]) / norm[1];
      
      /* And construct the new state vector */
      localug[i,jmax][0] = localug[i,jmax-1][0];
      localug[i,jmax][1] = rho * u;
      localug[i,jmax][2] = rho * v;
      localug[i,jmax][3] = rho * (Cv * temp + 0.5 * (u*u + v*v));
      localtg[i,jmax] = temp;
      localpg[i,jmax] = localpg[i,jmax-1];
    }
   
   for (j = 1; j < jmax; ++j) {
     /* Inlet Boundary Cells: unchecked */
     /* Construct the normal vector; This works, 4/10, 2:00 pm */
     norm[0] = ynode[0,j-1] - ynode[0,j];
     norm[1] = xnode[0,j] - xnode[0,j-1];
     scrap = Vector2.magnitude( norm );
     norm[0] = norm[0] / scrap;
     norm[1] = norm[1] / scrap;
     theta = Math.acos((ynode[0,j-1] - ynode[0,j]) / 
      Math.sqrt((xnode[0,j] - xnode[0,j-1])*(xnode[0,j] - xnode[0,j-1]) 
	   + (ynode[0,j-1] - ynode[0,j]) * (ynode[0,j-1] - ynode[0,j])));
     
     u1[0] = localug[1,j][1] / localug[1,j][0];
     u1[1] = localug[1,j][2] / localug[1,j][0];
     uprime = u1[0] * Math.cos(theta);
     c = Math.sqrt(gamma * rgas * localtg[1,j]);
     /* Supersonic inflow; works on the initial cond, 4/10 at 3:10 pm */
     if (uprime < -c) {
       /* Use far field conditions */
       localug[0,j][0] = rhoff;
       localug[0,j][1] = rhoff * uff;
       localug[0,j][2] = rhoff * vff;
       localug[0,j][3] = rhoff * (Cv * tff + 0.5 * (uff*uff + vff*vff));
       localtg[0,j] = tff;
       localpg[0,j] = pff;
     }
     /* Subsonic inflow */
     /* This works on the initial conditions 4/10 @ 2:20 pm */
     else if(uprime < 0.0) {
       /* Calculate Riemann invarients here */
       jminus = u1[0] - 2.0/(gamma-1.0) * c;
       s = Math.log(pff) - gamma * Math.log(rhoff);
       v = vff;
       
       u = (jplusff + jminus) / 2.0;
       scrap = (jplusff - u) * (gamma-1.0) * 0.5;
       localtg[0,j] = (1.0 / (gamma * rgas)) * scrap * scrap;
       localpg[0,j] = Math.exp(s) / Math.pow((rgas * localtg[0,j]), gamma);
       localpg[0,j] = Math.pow(localpg[0,j], 1.0 / (1.0 - gamma));
       
       /* And now: construct the new state vector */
       localug[0,j][0] = localpg[0,j] / (rgas * localtg[0,j]);
       localug[0,j][1] = localug[0,j][0] * u;
       localug[0,j][2] = localug[0,j][0] * v;
       localug[0,j][3] = localug[0,j][0] * (Cv * tff + 0.5 * (u*u + v*v));
     }
     /* Other options */
     /* We should throw an exception here */
     else {
       System.err.println("You have outflow at the inlet, which is not allowed.");
     }
     
     /* Outlet Boundary Cells */
     /* Construct the normal vector; works, 4/10 3:10 pm */
     norm[0] = ynode[0,j] - ynode[0,j-1];
     norm[1] = xnode[0,j-1] - xnode[0,j];
     scrap = Vector2.magnitude( norm );
     norm[0] = norm[0] / scrap;
     norm[1] = norm[1] / scrap;
     scrap = xnode[0,j-1] - xnode[0,j];
     scrap2 = ynode[0,j] - ynode[0,j-1];
     theta = Math.acos((ynode[0,j] - ynode[0,j-1]) / 
		       Math.sqrt(scrap*scrap + scrap2*scrap2));
     
     u1[0] = localug[imax-1,j][1] / localug[imax-1,j][0];
     u1[1] = localug[imax-1,j][2] / localug[imax-1,j][0];
     uprime = u1[0] * Math.cos(theta);
     c = Math.sqrt(gamma * rgas * localtg[imax-1,j]);
     /* Supersonic outflow; works for defaults cond, 4/10: 3:10 pm */
     if (uprime > c){
       /* Use a backward difference 2nd order derivative approximation */
       /* To set values at exit */
       localug[imax,j] = 2.0 * localug[imax-1,j] - localug[imax-2,j];
       localpg[imax,j] = 2.0 * localpg[imax-1,j] - localpg[imax-2,j];
       localtg[imax,j] = 2.0 * localtg[imax-1,j] - localtg[imax-2,j];
     }
     /* Subsonic Outflow; works for defaults cond, 4/10: 3:10 pm */
     else if (uprime < c && uprime > 0) {
       jplus = u1[0] + 2.0/(gamma - 1) * c;
       v = localug[imax-1,j][2] / localug[imax-1,j][0];
       s = Math.log(localpg[imax-1,j]) -
	                         gamma * Math.log(localug[imax-1,j][0]);
       
       u = (jplus + jminusff) / 2.0;
       scrap =(jplus - u)* (gamma-1.0) * 0.5;
       localtg[imax,j] = (1.0 / (gamma * rgas)) * scrap * scrap;
       localpg[imax,j] = Math.exp(s) / 
	                       Math.pow((rgas * localtg[imax,j]), gamma);
       localpg[imax,j] = Math.pow(localpg[imax,j], 1.0 / (1.0-gamma));
       rho = localpg[imax,j]/ (rgas * localtg[imax,j]);
       
       /* And now, construct the new state vector */
       localug[imax,j][0] = rho;
       localug[imax,j][1] = rho * u;
       localug[imax,j][2] = rho * v;
       localug[imax,j][3] = rho * (Cv * localtg[imax,j] + 0.5 * (u*u + v*v));
       
     }
     /* Other cases that shouldn't have to be used. */
     else if (uprime < -c) {
       /* Supersonic inflow */
       /* Use far field conditions */
       localug[0,j][0] = rhoff;
       localug[0,j][1] = rhoff * uff;
       localug[0,j][2] = rhoff * vff;
       localug[0,j][3] = rhoff * (Cv * tff + 0.5 * (uff*uff + vff*vff));
       localtg[0,j] = tff;
       localpg[0,j] = pff;
     }
     /* Subsonic inflow */
     /* This works on the initial conditions 4/10 @ 2:20 pm */
     else if(uprime < 0.0) {
       /* Debug: throw exception here? */
       /* Calculate Riemann invarients here */
       jminus = u1[0] - 2.0/(gamma-1.0) * c;
       s = Math.log(pff) - gamma * Math.log(rhoff);
       v = vff;
       
       u = (jplusff + jminus) / 2.0;
       scrap = (jplusff - u)* (gamma-1.0) * 0.5;
       localtg[0,j] = (1.0 / (gamma * rgas)) * scrap * scrap;
       localpg[0,j] = Math.exp(s) / Math.pow((rgas * localtg[0,j]), gamma);
       localpg[0,j] = Math.pow(localpg[0,j], 1.0 / (1.0 - gamma));
       
       /* And now: construct the new state vector */
       localug[0,j][0] = localpg[0,j] / (rgas * localtg[0,j]);
       localug[0,j][1] = localug[0,j][0] * u;
       localug[0,j][2] = localug[0,j][0] * v;
       localug[0,j][3] = localug[0,j][0] * (Cv * tff + 0.5 * (u*u + v*v));
     }
     /* Other Options */
     /* Debug: throw exception here? */
     else {
       System.err.println("You have inflow at the outlet, which is not allowed.");
     }
   } 
   /* Do something with corners to avoid division by zero errors */
   /* What you do shouldn't matter */
   localug[0,0] = localug[1,0];
   localug[imax,0] = localug[imax,1];
   localug[0,jmax] = localug[1,jmax];
   localug[imax,jmax] = localug[imax,jmax-1];
  }

  public void runiters(){

    for (int i = 0; i<iter; i++){
      doIteration();
    }
  }

}

class Vector2
{
  double ihat;   /* Storage for 2-D vector */
  double jhat;

  Vector2() {
    ihat = 0.0;
    jhat = 0.0;
  }

  public static final double magnitude( [double^2] val ) {
    double mag = Math.sqrt(val[0]*val[0] + val[1] * val[1]);
    return mag;
  }

  public static final double dot([double^2] me, [double^2] that) {
    // Calculates dot product of two 2-d vector */

    double answer = me[0] * that[0] + me[1] * that[1];
    
    return answer;
  }
}


